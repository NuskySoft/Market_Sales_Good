// app/src/main/java/es/nuskysoftware/marketsales/data/local/dao/ArticuloDao.kt
package es.nuskysoftware.marketsales.data.local.dao

import androidx.room.*
import es.nuskysoftware.marketsales.data.local.entity.ArticuloEntity
import kotlinx.coroutines.flow.Flow

/**
 * ArticuloDao V11 - Market Sales
 *
 * DIFERENCIAS CON CAJA MERCADILLOS:
 * - Todas las consultas filtradas por userId
 * - Arquitectura híbrida con sincronizadoFirebase
 * - Compatibilidad con sistema "Reloj Suizo"
 */
@Dao
interface ArticuloDao {

    // ========== OPERACIONES BÁSICAS ==========

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertArticulo(articulo: ArticuloEntity)

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertOrUpdate(articulo: ArticuloEntity)

    @Update
    suspend fun updateArticulo(articulo: ArticuloEntity)

    @Delete
    suspend fun deleteArticulo(articulo: ArticuloEntity)

    // ========== CONSULTAS FILTRADAS POR USUARIO ==========

    /**
     * Obtiene todos los artículos del usuario actual ordenados por nombre
     */
    @Query("SELECT * FROM articulos WHERE userId = :userId AND activo = 1 ORDER BY nombre ASC")
    fun getArticulosByUser(userId: String): Flow<List<ArticuloEntity>>

    /**
     * Obtiene artículos filtrados por categoría
     */
    @Query("SELECT * FROM articulos WHERE userId = :userId AND idCategoria = :categoriaId AND activo = 1 ORDER BY nombre ASC")
    fun getArticulosByUserAndCategoria(userId: String, categoriaId: String): Flow<List<ArticuloEntity>>

    /**
     * Obtiene un artículo específico por ID
     */
    @Query("SELECT * FROM articulos WHERE idArticulo = :id")
    suspend fun getArticuloById(id: String): ArticuloEntity?

    /**
     * Elimina artículo por ID
     */
    @Query("DELETE FROM articulos WHERE idArticulo = :id")
    suspend fun deleteArticuloById(id: String)

    // ========== SINCRONIZACIÓN HÍBRIDA ==========

    /**
     * Obtiene artículos no sincronizados de un usuario específico
     */
    @Query("SELECT * FROM articulos WHERE userId = :userId AND sincronizadoFirebase = 0")
    suspend fun getArticulosNoSincronizadosByUser(userId: String): List<ArticuloEntity>

    /**
     * Marca artículo como sincronizado
     */
    @Query("UPDATE articulos SET sincronizadoFirebase = 1, lastModified = :timestamp WHERE idArticulo = :id")
    suspend fun marcarComoSincronizado(id: String, timestamp: Long = System.currentTimeMillis())

    /**
     * Marca artículo como no sincronizado (para cambios locales)
     */
    @Query("UPDATE articulos SET sincronizadoFirebase = 0 WHERE idArticulo = :id")
    suspend fun marcarComoNoSincronizado(id: String)

    /**
     * Obtiene la versión actual de un artículo
     */
    @Query("SELECT version FROM articulos WHERE idArticulo = :id")
    suspend fun getArticuloVersion(id: String): Long?

    // ========== UTILIDADES ==========

    /**
     * Cuenta el total de artículos de un usuario
     */
    @Query("SELECT COUNT(*) FROM articulos WHERE userId = :userId AND activo = 1")
    suspend fun getArticuloCountByUser(userId: String): Int

    /**
     * Verifica si existe un artículo con el mismo nombre para un usuario
     */
    @Query("SELECT COUNT(*) > 0 FROM articulos WHERE userId = :userId AND nombre = :nombre AND activo = 1 AND idArticulo != :excludeId")
    suspend fun existeArticuloConNombre(userId: String, nombre: String, excludeId: String = ""): Boolean

    /**
     * Obtiene nombres únicos de artículos para autocompletado
     */
    @Query("SELECT DISTINCT nombre FROM articulos WHERE userId = :userId AND activo = 1 ORDER BY nombre ASC")
    suspend fun getNombresArticulosUnicos(userId: String): List<String>

    /**
     * Busca artículos por nombre
     */
    @Query("SELECT * FROM articulos WHERE userId = :userId AND nombre LIKE '%' || :query || '%' AND activo = 1 ORDER BY nombre ASC")
    fun searchArticulosByNombre(userId: String, query: String): Flow<List<ArticuloEntity>>

    // ========== MANTENIMIENTO ==========

    /**
     * Elimina artículos inactivos antiguos
     */
    @Query("DELETE FROM articulos WHERE userId = :userId AND activo = 0 AND lastModified < :limiteFecha")
    suspend fun limpiarArticulosInactivosAntiguos(userId: String, limiteFecha: Long)

    /**
     * Resetea sincronización para forzar re-sync
     */
    @Query("UPDATE articulos SET sincronizadoFirebase = 0 WHERE userId = :userId")
    suspend fun resetearSincronizacion(userId: String)
}

// app/src/main/java/es/nuskysoftware/marketsales/data/local/dao/CategoriaDao.kt
package es.nuskysoftware.marketsales.data.local.dao

import androidx.room.*
import es.nuskysoftware.marketsales.data.local.entity.CategoriaEntity
import kotlinx.coroutines.flow.Flow

/**
 * CategoriaDao V11 - Market Sales
 *
 * DIFERENCIAS CON CAJA MERCADILLOS:
 * - Todas las consultas filtradas por userId
 * - Arquitectura híbrida con sincronizadoFirebase
 * - Compatibilidad con sistema "Reloj Suizo"
 */
@Dao
interface CategoriaDao {

    // ========== OPERACIONES BÁSICAS ==========

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertCategoria(categoria: CategoriaEntity)

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertOrUpdate(categoria: CategoriaEntity)

    @Update
    suspend fun updateCategoria(categoria: CategoriaEntity)

    @Delete
    suspend fun deleteCategoria(categoria: CategoriaEntity)

    // ========== CONSULTAS FILTRADAS POR USUARIO ==========

    /**
     * Obtiene todas las categorías del usuario actual ordenadas por nombre
     */
    @Query("SELECT * FROM categorias WHERE userId = :userId AND activa = 1 ORDER BY nombre ASC")
    fun getCategoriasByUser(userId: String): Flow<List<CategoriaEntity>>

    /**
     * Obtiene una categoría específica por ID
     */
    @Query("SELECT * FROM categorias WHERE idCategoria = :id")
    suspend fun getCategoriaById(id: String): CategoriaEntity?

    /**
     * Elimina categoría por ID
     */
    @Query("DELETE FROM categorias WHERE idCategoria = :id")
    suspend fun deleteCategoriaById(id: String)

    // ========== SINCRONIZACIÓN HÍBRIDA ==========

    /**
     * Obtiene categorías no sincronizadas de un usuario específico
     */
    @Query("SELECT * FROM categorias WHERE userId = :userId AND sincronizadoFirebase = 0")
    suspend fun getCategoriasNoSincronizadasByUser(userId: String): List<CategoriaEntity>

    /**
     * Marca categoría como sincronizada
     */
    @Query("UPDATE categorias SET sincronizadoFirebase = 1, lastModified = :timestamp WHERE idCategoria = :id")
    suspend fun marcarComoSincronizada(id: String, timestamp: Long = System.currentTimeMillis())

    /**
     * Marca categoría como no sincronizada (para cambios locales)
     */
    @Query("UPDATE categorias SET sincronizadoFirebase = 0 WHERE idCategoria = :id")
    suspend fun marcarComoNoSincronizada(id: String)

    /**
     * Obtiene la versión actual de una categoría
     */
    @Query("SELECT version FROM categorias WHERE idCategoria = :id")
    suspend fun getCategoriaVersion(id: String): Long?

    // ========== UTILIDADES ==========

    /**
     * Cuenta el total de categorías de un usuario
     */
    @Query("SELECT COUNT(*) FROM categorias WHERE userId = :userId AND activa = 1")
    suspend fun getCategoriaCountByUser(userId: String): Int

    /**
     * Verifica si existe una categoría con el mismo nombre para un usuario
     */
    @Query("SELECT COUNT(*) > 0 FROM categorias WHERE userId = :userId AND nombre = :nombre AND activa = 1 AND idCategoria != :excludeId")
    suspend fun existeCategoriaConNombre(userId: String, nombre: String, excludeId: String = ""): Boolean

    /**
     * Obtiene nombres únicos de categorías para autocompletado
     */
    @Query("SELECT DISTINCT nombre FROM categorias WHERE userId = :userId AND activa = 1 ORDER BY nombre ASC")
    suspend fun getNombresCategoriasUnicas(userId: String): List<String>

    // ========== MANTENIMIENTO ==========

    /**
     * Elimina categorías inactivas antiguas
     */
    @Query("DELETE FROM categorias WHERE userId = :userId AND activa = 0 AND lastModified < :limiteFecha")
    suspend fun limpiarCategoriasInactivasAntiguas(userId: String, limiteFecha: Long)

    /**
     * Resetea sincronización para forzar re-sync
     */
    @Query("UPDATE categorias SET sincronizadoFirebase = 0 WHERE userId = :userId")
    suspend fun resetearSincronizacion(userId: String)
}

// app/src/main/java/es/nuskysoftware/marketsales/data/local/dao/ConfiguracionDao.kt
package es.nuskysoftware.marketsales.data.local.dao

import androidx.room.*
import kotlinx.coroutines.flow.Flow
import es.nuskysoftware.marketsales.data.local.entity.ConfiguracionEntity

/**
 * ConfiguracionDao V10 - ACTUALIZADO PARA SISTEMA MONOUSUARIO
 *
 * CAMBIOS V10:
 * - Agregados métodos para usuarioLogueado
 * - Agregados métodos para sincronización (version, lastModified)
 * - Eliminados métodos obsoletos (usuarioPassword, usuarioEmail, usuarioId, versionApp)
 * - Mantenidos métodos legacy marcados como @Deprecated
 */
@Dao
interface ConfiguracionDao {

    // ========== MÉTODOS BÁSICOS (sin cambios) ==========

    @Query("SELECT * FROM configuracion WHERE id = 1")
    suspend fun getConfiguracion(): ConfiguracionEntity?

    @Query("SELECT * FROM configuracion WHERE id = 1")
    suspend fun getConfiguracionSync(): ConfiguracionEntity?

    @Query("SELECT * FROM configuracion WHERE id = 1")
    fun getConfiguracionFlow(): Flow<ConfiguracionEntity?>

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertarConfiguracion(configuracion: ConfiguracionEntity)

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertOrUpdate(configuracion: ConfiguracionEntity)

    @Update
    suspend fun actualizarConfiguracion(configuracion: ConfiguracionEntity)

    @Query("DELETE FROM configuracion")
    suspend fun eliminarTodasLasConfiguraciones()

    // ========== CONFIGURACIÓN GLOBAL V10 ==========

    /** Actualiza la moneda (común a todos los usuarios) */
    @Query("UPDATE configuracion SET moneda = :moneda, version = version + 1, lastModified = :timestamp, pendienteSync = 1 WHERE id = 1")
    suspend fun updateMoneda(moneda: String, timestamp: Long = System.currentTimeMillis())

    /** Actualiza el idioma (común a todos los usuarios) */
    @Query("UPDATE configuracion SET idioma = :idioma, version = version + 1, lastModified = :timestamp, pendienteSync = 1 WHERE id = 1")
    suspend fun updateIdioma(idioma: String, timestamp: Long = System.currentTimeMillis())

    /** Actualiza la fuente (común a todos los usuarios) */
    @Query("UPDATE configuracion SET fuente = :fuente, version = version + 1, lastModified = :timestamp, pendienteSync = 1 WHERE id = 1")
    suspend fun updateFuente(fuente: String, timestamp: Long = System.currentTimeMillis())

    /** Actualiza el tema oscuro (común a todos los usuarios) */
    @Query("UPDATE configuracion SET temaOscuro = :esTemaOscuro, version = version + 1, lastModified = :timestamp, pendienteSync = 1 WHERE id = 1")
    suspend fun updateTemaOscuro(esTemaOscuro: Boolean, timestamp: Long = System.currentTimeMillis())

    // ========== USUARIO LOGUEADO V10 ==========

    /** Establece el usuario actualmente logueado */
    @Query("UPDATE configuracion SET usuarioLogueado = :usuarioUid, version = version + 1, lastModified = :timestamp WHERE id = 1")
    suspend fun setUsuarioLogueado(usuarioUid: String, timestamp: Long = System.currentTimeMillis())

    /** Obtiene el UID del usuario actualmente logueado */
    @Query("SELECT usuarioLogueado FROM configuracion WHERE id = 1")
    suspend fun getUsuarioLogueado(): String?

    /** Flow que emite el usuario logueado */
    @Query("SELECT usuarioLogueado FROM configuracion WHERE id = 1")
    fun getUsuarioLogueadoFlow(): Flow<String?>

    /** Verifica si es usuario por defecto */
    @Query("SELECT usuarioLogueado = 'usuario_default' FROM configuracion WHERE id = 1")
    suspend fun isUsuarioDefault(): Boolean

    // ========== SINCRONIZACIÓN V10 ==========

    /** Marca si hay pendiente de sincronizar en Firebase */
    @Query("UPDATE configuracion SET pendienteSync = :pendiente WHERE id = 1")
    suspend fun updatePendienteSync(pendiente: Boolean)

    /** Flujo que emite true/false según si hay pendienteSync */
    @Query("SELECT pendienteSync FROM configuracion WHERE id = 1")
    fun getPendienteSyncFlow(): Flow<Boolean>

    /** Actualiza campos de sincronización después de sync exitoso */
    @Query("UPDATE configuracion SET version = :version, lastModified = :timestamp, pendienteSync = 0 WHERE id = 1")
    suspend fun markSyncSuccessful(version: Long, timestamp: Long = System.currentTimeMillis())

    /** Obtiene versión actual para resolución de conflictos */
    @Query("SELECT version FROM configuracion WHERE id = 1")
    suspend fun getCurrentVersion(): Long?

    /** Obtiene timestamp de última modificación */
    @Query("SELECT lastModified FROM configuracion WHERE id = 1")
    suspend fun getLastModified(): Long?

    // ========== MÉTODOS LEGACY (mantener para compatibilidad) ==========

    /** Actualiza la fecha de última sincronización */
    @Query("UPDATE configuracion SET fechaUltimaSync = :fecha WHERE id = 1")
    suspend fun updateFechaUltimaSync(fecha: String?)

    /** Actualiza el último dispositivo */
    @Query("UPDATE configuracion SET ultimoDispositivo = :dispositivo WHERE id = 1")
    suspend fun updateUltimoDispositivo(dispositivo: String?)

    /** Actualiza el número de versión de la app */
    @Query("UPDATE configuracion SET numeroVersion = :version WHERE id = 1")
    suspend fun updateNumeroVersion(version: String)

    // ========== MÉTODOS OBSOLETOS V10 (mantener por compatibilidad) ==========

    @Deprecated("Campo eliminado en V10 - usar UserRepository para gestionar usuarios", ReplaceWith("UserRepository.updateUserPassword()"))
    @Query("SELECT 1") // Query dummy que no hace nada
    suspend fun updateUsuarioPassword(password: String?) { /* No-op */ }

    @Deprecated("Campo eliminado en V10 - usar UserRepository para gestionar usuarios", ReplaceWith("UserRepository.updateUserEmail()"))
    @Query("SELECT 1") // Query dummy que no hace nada
    suspend fun updateUsuarioEmail(email: String?) { /* No-op */ }

    @Deprecated("Campo eliminado en V10 - usar setUsuarioLogueado()", ReplaceWith("setUsuarioLogueado(usuarioId)"))
    @Query("SELECT 1") // Query dummy que no hace nada
    suspend fun updateUsuarioId(usuarioId: String?) { /* No-op */ }

    @Deprecated("Campo eliminado en V10 - usar UserRepository.updateUserPremium()", ReplaceWith("UserRepository.updateUserPremium()"))
    @Query("SELECT 1") // Query dummy que no hace nada
    suspend fun updateVersionApp(version: Int) { /* No-op */ }
}


// app/src/main/java/es/nuskysoftware/marketsales/data/local/dao/UserDao.kt
package es.nuskysoftware.marketsales.data.local.dao

import androidx.room.*
import kotlinx.coroutines.flow.Flow
import es.nuskysoftware.marketsales.data.local.entity.UserEntity

/**
 * ✅ UserDao COMPLETO con todos los métodos que necesita UserRepository
 */
@Dao
interface UserDao {

    // ========== MÉTODOS BÁSICOS ==========
    @Query("SELECT * FROM usuarios WHERE uid = :uid")
    suspend fun getUserById(uid: String): UserEntity?

    @Query("SELECT * FROM usuarios WHERE uid = :uid")
    suspend fun getUserByIdSync(uid: String): UserEntity?

    @Query("SELECT * FROM usuarios WHERE uid = :uid")
    fun getUserByIdFlow(uid: String): Flow<UserEntity?>

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertUser(user: UserEntity)

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertOrUpdate(user: UserEntity)

    @Update
    suspend fun updateUser(user: UserEntity)

    @Delete
    suspend fun deleteUser(user: UserEntity)

    // ========== MÉTODOS FALTANTES PARA UserRepository ==========

    /**
     * Obtener usuario actual (dummy - UserRepository lo maneja)
     */
    @Query("SELECT * FROM usuarios WHERE uid != 'dummy'")
    fun getCurrentUserFlow(): Flow<UserEntity?>

    /**
     * Obtener usuarios pendientes de sincronización
     */
    @Query("SELECT * FROM usuarios WHERE sincronizadoFirebase = 0")
    suspend fun getUsersPendingSync(): List<UserEntity>

    /**
     * Actualizar estado Premium del usuario
     */
    @Query("UPDATE usuarios SET esPremium = :esPremium WHERE uid = :uid")
    suspend fun updateUserPremium(uid: String, esPremium: Boolean)

    /**
     * Actualizar email del usuario
     */
    @Query("UPDATE usuarios SET email = :email WHERE uid = :uid")
    suspend fun updateUserEmail(uid: String, email: String)

    /**
     * Actualizar nombre del usuario
     */
    @Query("UPDATE usuarios SET displayName = :displayName WHERE uid = :uid")
    suspend fun updateUserDisplayName(uid: String, displayName: String)

    /**
     * Actualizar foto del usuario
     */
    @Query("UPDATE usuarios SET photoUrl = :photoUrl WHERE uid = :uid")
    suspend fun updateUserPhotoUrl(uid: String, photoUrl: String)

    /**
     * Obtener todos los usuarios Premium
     */
    @Query("SELECT * FROM usuarios WHERE esPremium = 1 AND activo = 1")
    suspend fun getAllPremiumUsers(): List<UserEntity>

    /**
     * Obtener todos los usuarios Free
     */
    @Query("SELECT * FROM usuarios WHERE esPremium = 0 AND activo = 1")
    suspend fun getAllFreeUsers(): List<UserEntity>

    /**
     * Marcar usuario como sincronizado exitosamente
     */
    @Query("UPDATE usuarios SET sincronizadoFirebase = 1, version = :newVersion WHERE uid = :uid")
    suspend fun markUserSyncSuccessful(uid: String, newVersion: Long)

    /**
     * Actualizar fecha de última sincronización
     */
    @Query("UPDATE usuarios SET fechaUltimaSync = :fecha WHERE uid = :uid")
    suspend fun updateFechaUltimaSync(uid: String, fecha: String)

    /**
     * Obtener versión de usuario
     */
    @Query("SELECT version FROM usuarios WHERE uid = :uid")
    suspend fun getUserVersion(uid: String): Long?

    // ========== MÉTODOS EXISTENTES ==========
    @Query("SELECT * FROM usuarios WHERE email = :email")
    suspend fun getUserByEmail(email: String): UserEntity?

    @Query("SELECT * FROM usuarios WHERE activo = 1")
    suspend fun getAllActiveUsers(): List<UserEntity>

    // En UserDao.kt - Alternativa más robusta:

    @Query("UPDATE usuarios SET displayName = :displayName, email = :email WHERE uid = :userId")
    suspend fun updateUserProfile(userId: String, displayName: String, email: String): Int

    // Método adicional para verificar si se actualizó correctamente
    @Query("SELECT COUNT(*) FROM usuarios WHERE uid = :userId")
    suspend fun userExists(userId: String): Int

    @Query("UPDATE usuarios SET sincronizadoFirebase = 0 WHERE uid = :uid")
    suspend fun markUserNotSynced(uid: String)
}


// app/src/main/java/es/nuskysoftware/marketsales/data/local/database/AppDatabase.kt
package es.nuskysoftware.marketsales.data.local.database

import androidx.room.Database
import androidx.room.Room
import androidx.room.RoomDatabase
import android.content.Context
import es.nuskysoftware.marketsales.data.local.entity.ConfiguracionEntity
import es.nuskysoftware.marketsales.data.local.entity.UserEntity
import es.nuskysoftware.marketsales.data.local.entity.CategoriaEntity
import es.nuskysoftware.marketsales.data.local.entity.ArticuloEntity // ✅ NUEVO
import es.nuskysoftware.marketsales.data.local.dao.ConfiguracionDao
import es.nuskysoftware.marketsales.data.local.dao.UserDao
import es.nuskysoftware.marketsales.data.local.dao.CategoriaDao
import es.nuskysoftware.marketsales.data.local.dao.ArticuloDao // ✅ NUEVO
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.SupervisorJob
import kotlinx.coroutines.launch

/**
 * ✅ V12 - AppDatabase con soporte para Artículos
 * CAMBIOS V12:
 * - Agregada ArticuloEntity y ArticuloDao
 * - Incrementada versión de 4 a 5
 * - Mantenida compatibilidad con estructura existente
 */
@Database(
    entities = [
        ConfiguracionEntity::class,
        UserEntity::class,
        CategoriaEntity::class,
        ArticuloEntity::class // ✅ NUEVO
    ],
    version = 5, // ✅ INCREMENTADA DE 4 A 5
    exportSchema = false
)
abstract class AppDatabase : RoomDatabase() {

    abstract fun configuracionDao(): ConfiguracionDao
    abstract fun userDao(): UserDao
    abstract fun categoriaDao(): CategoriaDao
    abstract fun articuloDao(): ArticuloDao // ✅ NUEVO

    companion object {
        @Volatile
        private var INSTANCE: AppDatabase? = null

        private val applicationScope = CoroutineScope(SupervisorJob() + Dispatchers.IO)

        fun getDatabase(context: Context): AppDatabase {
            return INSTANCE ?: synchronized(this) {
                val instance = Room.databaseBuilder(
                    context.applicationContext,
                    AppDatabase::class.java,
                    "marketsales_database_v10" // ✅ Mantenido el mismo nombre
                )
                    .fallbackToDestructiveMigration()
                    .addCallback(DatabaseCallback(applicationScope))
                    .build()

                INSTANCE = instance
                instance
            }
        }

        fun clearInstance() {
            INSTANCE = null
        }
    }

    private class DatabaseCallback(
        private val scope: CoroutineScope
    ) : RoomDatabase.Callback() {

        override fun onCreate(db: androidx.sqlite.db.SupportSQLiteDatabase) {
            super.onCreate(db)

            INSTANCE?.let { database ->
                scope.launch {
                    try {
                        crearConfiguracionPorDefecto(database.configuracionDao())
                        println("✅ Base de datos V12 inicializada correctamente")
                    } catch (e: Exception) {
                        println("❌ Error inicializando base de datos: ${e.message}")
                    }
                }
            }
        }

        private suspend fun crearConfiguracionPorDefecto(configuracionDao: ConfiguracionDao) {
            val configuracionExistente = configuracionDao.getConfiguracion()

            if (configuracionExistente == null) {
                // ✅ USANDO ConfiguracionEntity V10 con versión actualizada
                val configuracionPorDefecto = ConfiguracionEntity(
                    id = 1,
                    moneda = "€ Euro",
                    idioma = "es",
                    fuente = "Montserrat",
                    temaOscuro = false,
                    usuarioLogueado = "usuario_default",
                    numeroVersion = "V12.0", // ✅ ACTUALIZADA PARA REFLEJAR SOPORTE DE ARTÍCULOS
                    ultimoDispositivo = android.os.Build.MODEL,
                    fechaUltimaSync = null,
                    version = 1,
                    lastModified = System.currentTimeMillis(),
                    pendienteSync = false
                )

                configuracionDao.insertOrUpdate(configuracionPorDefecto)
                println("✅ Configuración V12 por defecto creada")
            }
        }
    }
}

// app/src/main/java/es/nuskysoftware/marketsales/data/local/entity/ArticuloEntity.kt
package es.nuskysoftware.marketsales.data.local.entity

import androidx.room.Entity
import androidx.room.PrimaryKey
import java.util.UUID

/**
 * ArticuloEntity V11 - Market Sales
 *
 * CAMBIOS RESPECTO A CAJA MERCADILLOS:
 * - Agregado campo userId para vincular con usuario
 * - Compatible con arquitectura híbrida "Reloj Suizo"
 * - Sincronización con Firebase + Room offline-first
 * - Campos de control Premium (coste, stock)
 */
@Entity(tableName = "articulos")
data class ArticuloEntity(
    @PrimaryKey
    val idArticulo: String = UUID.randomUUID().toString(),

    // ✅ NUEVO: Campo para vincular con usuario
    val userId: String = "",

    // Campos principales
    val nombre: String = "",
    val idCategoria: String = "",
    val precioVenta: Double = 0.0,

    // Campos Premium
    val precioCoste: Double? = null,
    val stock: Int? = null,
    val controlarStock: Boolean = false,
    val controlarCoste: Boolean = false,

    // Campos adicionales
    val favorito: Boolean = false,
    val fotoUri: String? = null,
    val activo: Boolean = true,

    // Campos de sincronización híbrida
    val version: Long = 1,
    val lastModified: Long = System.currentTimeMillis(),
    val sincronizadoFirebase: Boolean = false
) {
    // Constructor vacío para Firestore
    constructor() : this(
        idArticulo = "",
        userId = "",
        nombre = "",
        idCategoria = "",
        precioVenta = 0.0,
        precioCoste = null,
        stock = null,
        controlarStock = false,
        controlarCoste = false,
        favorito = false,
        fotoUri = null,
        activo = true,
        version = 1,
        lastModified = System.currentTimeMillis(),
        sincronizadoFirebase = false
    )
}

// app/src/main/java/es/nuskysoftware/marketsales/data/local/entity/CategoriaEntity.kt
package es.nuskysoftware.marketsales.data.local.entity

import androidx.room.Entity
import androidx.room.PrimaryKey
import java.util.UUID

/**
 * CategoriaEntity V11 - Market Sales
 *
 * CAMBIOS RESPECTO A CAJA MERCADILLOS:
 * - Agregado campo userId para vincular con tabla usuarios
 * - Compatible con arquitectura híbrida "Reloj Suizo"
 * - Sincronización con Firebase + Room offline-first
 */
@Entity(tableName = "categorias")
data class CategoriaEntity(
    @PrimaryKey
    val idCategoria: String = UUID.randomUUID().toString(),

    // ✅ NUEVO: Campo para vincular con usuario
    val userId: String = "",

    val nombre: String = "",
    val colorHex: String = "#FFFFFF",
    val orden: Int = 0,
    val activa: Boolean = true,

    // Campos de sincronización híbrida
    val version: Long = 1,
    val lastModified: Long = System.currentTimeMillis(),
    val sincronizadoFirebase: Boolean = false
) {
    // Constructor vacío para Firestore
    constructor() : this(
        idCategoria = "",
        userId = "",
        nombre = "",
        colorHex = "#FFFFFF",
        orden = 0,
        activa = true,
        version = 1,
        lastModified = System.currentTimeMillis(),
        sincronizadoFirebase = false
    )
}

// app/src/main/java/es/nuskysoftware/marketsales/data/local/entity/ConfiguracionEntity.kt
package es.nuskysoftware.marketsales.data.local.entity

import androidx.room.Entity
import androidx.room.PrimaryKey

/**
 * ConfiguracionEntity V10 - SIMPLIFICADO MONOUSUARIO
 *
 * CAMBIOS V10:
 * - Configuración GLOBAL (moneda, idioma, fuente, tema) común a todos los usuarios
 * - usuarioLogueado: UID del usuario actual o "usuario_default"
 * - Eliminado: versionApp, empresaId, tipoUsuario, etc. (lógica multiusuario)
 * - Agregado: Campos de sincronización (version, lastModified, pendienteSync)
 */
@Entity(tableName = "configuracion")
data class ConfiguracionEntity(
    @PrimaryKey val id: Int = 1,

    // ========== CONFIGURACIÓN GLOBAL (común a todos los usuarios) ==========
    val moneda: String = "€ Euro",           // Común a todos
    val idioma: String = "es",               // Común a todos
    val fuente: String = "Montserrat",       // Común a todos
    val temaOscuro: Boolean = false,         // Común a todos

    // ========== USUARIO ACTUAL ==========
    val usuarioLogueado: String = "usuario_default",  // UID actual o "usuario_default"

    // ========== CAMPOS LEGACY (mantener para compatibilidad) ==========
    val numeroVersion: String = "V10.0",
    val ultimoDispositivo: String? = android.os.Build.MODEL,
    val fechaUltimaSync: String? = null,

    // ========== SINCRONIZACIÓN V10 ==========
    val version: Long = 1,
    val lastModified: Long = System.currentTimeMillis(),
    val pendienteSync: Boolean = false,
    val sincronizadoFirebase: Boolean = false
)

// ========== EXTENSION PROPERTIES (compatibilidad con código existente) ==========

/**
 * Determina si el usuario actual es Premium
 * NOTA: Ahora se debe consultar desde la tabla usuarios
 */
@Deprecated("Usar UserRepository.getCurrentUser().esPremium", ReplaceWith("userRepository.getCurrentUser()?.esPremium ?: false"))
val ConfiguracionEntity.isPremium: Boolean
    get() = false // Siempre false, se consulta desde usuarios

/**
 * Alias para compatibilidad
 */
val ConfiguracionEntity.modoOscuro: Boolean
    get() = this.temaOscuro

/**
 * Indica si es usuario por defecto
 */
val ConfiguracionEntity.isUsuarioDefault: Boolean
    get() = this.usuarioLogueado == "usuario_default"


// app/src/main/java/es/nuskysoftware/marketsales/data/local/entity/UserEntity.kt
package es.nuskysoftware.marketsales.data.local.entity

import androidx.room.Entity
import androidx.room.PrimaryKey

/**
 * ✅ COMPLETO V10 - UserEntity con todos los campos necesarios
 */
@Entity(tableName = "usuarios")
data class UserEntity(
    @PrimaryKey val uid: String,
    val email: String = "",
    val displayName: String = "",
    val photoUrl: String = "",
    val esPremium: Boolean = false,        // Premium/Free

    // ✅ CAMPOS FALTANTES AGREGADOS
    val version: Long = 1,                 // Para versionado
    val lastModified: Long = System.currentTimeMillis(), // Para sincronización

    val fechaCreacion: Long = System.currentTimeMillis(),
    val fechaUltimaSync: String? = null,
    val sincronizadoFirebase: Boolean = false,
    val activo: Boolean = true
)


// app/src/main/java/es/nuskysoftware/marketsales/data/repository/ArticuloRepository.kt
package es.nuskysoftware.marketsales.data.repository

import android.content.Context
import android.util.Log
import com.google.firebase.firestore.FirebaseFirestore
import es.nuskysoftware.marketsales.data.local.dao.ArticuloDao
import es.nuskysoftware.marketsales.data.local.database.AppDatabase
import es.nuskysoftware.marketsales.data.local.entity.ArticuloEntity
import es.nuskysoftware.marketsales.utils.ConfigurationManager
import es.nuskysoftware.marketsales.utils.ConnectivityObserver
import kotlinx.coroutines.*
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.flow.flowOf
import kotlinx.coroutines.tasks.await

/**
 * ArticuloRepository V11 - Market Sales
 *
 * ARQUITECTURA HÍBRIDA "RELOJ SUIZO":
 * - Local First: Toda operación se ejecuta primero en Room
 * - Sync When Possible: Sincronización automática cuando hay conexión
 * - Never Block UI: La interfaz nunca espera operaciones de red
 * - Graceful Degradation: Funcionamiento completo offline
 * - Filtrado por usuario: Cada usuario solo ve sus datos
 */
class ArticuloRepository(
    context: Context
) {
    private val articuloDao: ArticuloDao = AppDatabase.getDatabase(context).articuloDao()
    private val firestore = FirebaseFirestore.getInstance()
    private val connectivityObserver = ConnectivityObserver(context)
    private val repositoryScope = CoroutineScope(SupervisorJob() + Dispatchers.IO)

    companion object {
        private const val TAG = "ArticuloRepository"
    }

    init {
        // Sincronización automática cuando volvemos online
        repositoryScope.launch {
            connectivityObserver.isConnected.collect { online ->
                if (online) {
                    val userId = ConfigurationManager.getCurrentUserId()
                    if (userId != null) {
                        sincronizarArticulosNoSincronizados(userId)
                    }
                }
            }
        }
    }

    // ========== OPERACIONES PRINCIPALES ==========

    /**
     * Obtiene todos los artículos del usuario actual
     */
    fun getArticulosUsuarioActual(): Flow<List<ArticuloEntity>> {
        val userId = ConfigurationManager.getCurrentUserId()
        return if (userId != null) {
            articuloDao.getArticulosByUser(userId)
        } else {
            flowOf(emptyList())
        }
    }

    /**
     * Obtiene artículos filtrados por categoría
     */
    fun getArticulosByCategoria(categoriaId: String): Flow<List<ArticuloEntity>> {
        val userId = ConfigurationManager.getCurrentUserId()
        return if (userId != null) {
            articuloDao.getArticulosByUserAndCategoria(userId, categoriaId)
        } else {
            flowOf(emptyList())
        }
    }

    /**
     * Crea un nuevo artículo - PATRÓN HÍBRIDO
     */
    suspend fun crearArticulo(
        nombre: String,
        idCategoria: String,
        precioVenta: Double,
        precioCoste: Double? = null,
        stock: Int? = null,
        controlarStock: Boolean = false,
        controlarCoste: Boolean = false,
        favorito: Boolean = false,
        fotoUri: String? = null
    ): String = withContext(Dispatchers.IO) {
        val userId = ConfigurationManager.getCurrentUserId()
            ?: throw IllegalStateException("No se puede crear artículo sin usuario")

        Log.d(TAG, "🔄 Creando artículo para usuario: $userId")

        val nuevoArticulo = ArticuloEntity(
            userId = userId,
            nombre = nombre,
            idCategoria = idCategoria,
            precioVenta = precioVenta,
            precioCoste = precioCoste,
            stock = stock,
            controlarStock = controlarStock,
            controlarCoste = controlarCoste,
            favorito = favorito,
            fotoUri = fotoUri,
            sincronizadoFirebase = false
        )

        try {
            // 1. GUARDAR EN ROOM PRIMERO (respuesta inmediata)
            articuloDao.insertArticulo(nuevoArticulo)
            Log.d(TAG, "✅ Artículo guardado en Room: ${nuevoArticulo.nombre}")

            // 2. INTENTAR SINCRONIZAR CON FIREBASE
            sincronizarArticuloConFirebase(nuevoArticulo)

            return@withContext nuevoArticulo.idArticulo

        } catch (e: Exception) {
            Log.e(TAG, "❌ Error creando artículo", e)
            throw e
        }
    }

    /**
     * Actualiza un artículo existente - PATRÓN HÍBRIDO
     */
    suspend fun actualizarArticulo(articulo: ArticuloEntity): Boolean = withContext(Dispatchers.IO) {
        try {
            val articuloActualizado = articulo.copy(
                version = articulo.version + 1,
                lastModified = System.currentTimeMillis(),
                sincronizadoFirebase = false
            )

            // 1. ACTUALIZAR EN ROOM PRIMERO
            articuloDao.updateArticulo(articuloActualizado)
            Log.d(TAG, "✅ Artículo actualizado en Room: ${articuloActualizado.nombre}")

            // 2. INTENTAR SINCRONIZAR CON FIREBASE
            sincronizarArticuloConFirebase(articuloActualizado)

            true
        } catch (e: Exception) {
            Log.e(TAG, "❌ Error actualizando artículo", e)
            false
        }
    }

    /**
     * Elimina un artículo - PATRÓN HÍBRIDO
     */
    suspend fun eliminarArticulo(articulo: ArticuloEntity): Boolean = withContext(Dispatchers.IO) {
        try {
            // 1. ELIMINAR DE ROOM PRIMERO
            articuloDao.deleteArticulo(articulo)
            Log.d(TAG, "✅ Artículo eliminado de Room: ${articulo.nombre}")

            // 2. INTENTAR ELIMINAR DE FIREBASE
            eliminarArticuloDeFirebase(articulo.idArticulo)

            true
        } catch (e: Exception) {
            Log.e(TAG, "❌ Error eliminando artículo", e)
            false
        }
    }

    /**
     * Obtiene artículo por ID
     */
    suspend fun getArticuloById(id: String): ArticuloEntity? = withContext(Dispatchers.IO) {
        articuloDao.getArticuloById(id)
    }

    // ========== ESTRATEGIA HÍBRIDA INTELIGENTE ==========

    /**
     * Obtiene datos híbridos: combina lo mejor de Room y Firebase
     */
    suspend fun getHybridArticulos(userId: String): List<ArticuloEntity> = withContext(Dispatchers.IO) {
        try {
            // 1. Verificar cambios pendientes en Room
            val articulosNoSincronizados = articuloDao.getArticulosNoSincronizadosByUser(userId)

            if (articulosNoSincronizados.isNotEmpty()) {
                // HAY CAMBIOS PENDIENTES → Room es fuente de verdad
                Log.d(TAG, "📱 Usando Room (${articulosNoSincronizados.size} cambios pendientes)")
                return@withContext articuloDao.getArticulosByUser(userId).first()
            } else {
                // NO HAY CAMBIOS PENDIENTES → Intentar Firebase
                Log.d(TAG, "☁️ Intentando Firebase (sin cambios pendientes)")

                if (connectivityObserver.isConnected.first()) {
                    try {
                        val firebaseArticulos = descargarArticulosDesdeFirebase(userId)
                        if (firebaseArticulos.isNotEmpty()) {
                            // Actualizar Room con datos frescos
                            firebaseArticulos.forEach { articulo ->
                                articuloDao.insertOrUpdate(articulo.copy(sincronizadoFirebase = true))
                            }
                            Log.d(TAG, "✅ Datos frescos de Firebase aplicados")
                        }
                    } catch (e: Exception) {
                        Log.w(TAG, "⚠️ Error con Firebase, usando Room como fallback", e)
                    }
                }

                // Devolver datos de Room (actualizados o fallback)
                return@withContext articuloDao.getArticulosByUser(userId).first()
            }
        } catch (e: Exception) {
            Log.e(TAG, "❌ Error en estrategia híbrida", e)
            // Fallback total a Room
            return@withContext articuloDao.getArticulosByUser(userId).first()
        }
    }

    // ========== SINCRONIZACIÓN CON FIREBASE ==========

    /**
     * Sincroniza un artículo específico con Firebase
     */
    private suspend fun sincronizarArticuloConFirebase(articulo: ArticuloEntity) {
        try {
            if (!connectivityObserver.isConnected.first()) {
                Log.d(TAG, "⚠️ Sin conexión, artículo quedará pendiente de sincronización")
                return
            }

            val datos = mapOf(
                "idArticulo" to articulo.idArticulo,
                "userId" to articulo.userId,
                "nombre" to articulo.nombre,
                "idCategoria" to articulo.idCategoria,
                "precioVenta" to articulo.precioVenta,
                "precioCoste" to articulo.precioCoste,
                "stock" to articulo.stock,
                "controlarStock" to articulo.controlarStock,
                "controlarCoste" to articulo.controlarCoste,
                "favorito" to articulo.favorito,
                "fotoUri" to articulo.fotoUri,
                "activo" to articulo.activo,
                "version" to articulo.version,
                "lastModified" to articulo.lastModified,
                "fechaSync" to System.currentTimeMillis()
            )

            firestore.collection("articulos")
                .document(articulo.idArticulo)
                .set(datos)
                .await()

            // Marcar como sincronizado en Room
            articuloDao.marcarComoSincronizado(articulo.idArticulo)
            Log.d(TAG, "☁️ Artículo sincronizado con Firebase: ${articulo.nombre}")

        } catch (e: Exception) {
            Log.w(TAG, "⚠️ Error sincronizando con Firebase: ${articulo.nombre}", e)
            // El artículo queda marcado como no sincronizado para reintento posterior
        }
    }

    /**
     * Elimina artículo de Firebase
     */
    private suspend fun eliminarArticuloDeFirebase(articuloId: String) {
        try {
            if (connectivityObserver.isConnected.first()) {
                firestore.collection("articulos")
                    .document(articuloId)
                    .delete()
                    .await()
                Log.d(TAG, "☁️ Artículo eliminado de Firebase: $articuloId")
            }
        } catch (e: Exception) {
            Log.w(TAG, "⚠️ Error eliminando de Firebase: $articuloId", e)
        }
    }

    /**
     * Sincroniza artículos no sincronizados cuando hay conexión
     */
    private suspend fun sincronizarArticulosNoSincronizados(userId: String) {
        try {
            val pendientes = articuloDao.getArticulosNoSincronizadosByUser(userId)
            Log.d(TAG, "🔄 Sincronizando ${pendientes.size} artículos pendientes")

            pendientes.forEach { articulo ->
                sincronizarArticuloConFirebase(articulo)
                delay(100) // Evitar saturar Firebase
            }
        } catch (e: Exception) {
            Log.e(TAG, "❌ Error sincronizando pendientes", e)
        }
    }

    /**
     * Descarga artículos desde Firebase
     */
    private suspend fun descargarArticulosDesdeFirebase(userId: String): List<ArticuloEntity> {
        return try {
            val snapshot = firestore.collection("articulos")
                .whereEqualTo("userId", userId)
                .whereEqualTo("activo", true)
                .get()
                .await()

            val articulos = snapshot.documents.mapNotNull { doc ->
                try {
                    val data = doc.data ?: return@mapNotNull null
                    ArticuloEntity(
                        idArticulo = data["idArticulo"] as? String ?: "",
                        userId = data["userId"] as? String ?: "",
                        nombre = data["nombre"] as? String ?: "",
                        idCategoria = data["idCategoria"] as? String ?: "",
                        precioVenta = (data["precioVenta"] as? Number)?.toDouble() ?: 0.0,
                        precioCoste = (data["precioCoste"] as? Number)?.toDouble(),
                        stock = (data["stock"] as? Long)?.toInt(),
                        controlarStock = data["controlarStock"] as? Boolean ?: false,
                        controlarCoste = data["controlarCoste"] as? Boolean ?: false,
                        favorito = data["favorito"] as? Boolean ?: false,
                        fotoUri = data["fotoUri"] as? String,
                        activo = data["activo"] as? Boolean ?: true,
                        version = data["version"] as? Long ?: 1L,
                        lastModified = data["lastModified"] as? Long ?: System.currentTimeMillis(),
                        sincronizadoFirebase = true
                    )
                } catch (e: Exception) {
                    Log.w(TAG, "⚠️ Error parseando artículo de Firebase", e)
                    null
                }
            }

            Log.d(TAG, "☁️ Descargados ${articulos.size} artículos de Firebase")
            articulos

        } catch (e: Exception) {
            Log.e(TAG, "❌ Error descargando de Firebase", e)
            emptyList()
        }
    }

    // ========== UTILIDADES ==========

    /**
     * Verifica si existe un artículo con el mismo nombre
     */
    suspend fun existeArticuloConNombre(nombre: String, excludeId: String = ""): Boolean {
        val userId = ConfigurationManager.getCurrentUserId() ?: return false
        return articuloDao.existeArticuloConNombre(userId, nombre, excludeId)
    }

    /**
     * Busca artículos por nombre
     */
    fun searchArticulos(query: String): Flow<List<ArticuloEntity>> {
        val userId = ConfigurationManager.getCurrentUserId()
        return if (userId != null && query.isNotBlank()) {
            articuloDao.searchArticulosByNombre(userId, query)
        } else {
            flowOf(emptyList())
        }
    }

    /**
     * Fuerza sincronización completa
     */
    suspend fun forzarSincronizacion(): Boolean = withContext(Dispatchers.IO) {
        try {
            val userId = ConfigurationManager.getCurrentUserId() ?: return@withContext false

            sincronizarArticulosNoSincronizados(userId)
            getHybridArticulos(userId) // Esto descargará datos frescos de Firebase

            true
        } catch (e: Exception) {
            Log.e(TAG, "❌ Error en sincronización forzada", e)
            false
        }
    }
}

// app/src/main/java/es/nuskysoftware/marketsales/data/repository/AuthRepository.kt
package es.nuskysoftware.marketsales.data.repository

import android.content.Context
import android.util.Log
import com.google.firebase.Firebase
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.FirebaseUser
import com.google.firebase.auth.GoogleAuthProvider
import com.google.firebase.auth.auth
import com.google.firebase.firestore.FirebaseFirestore
import es.nuskysoftware.marketsales.data.local.entity.ConfiguracionEntity
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.tasks.await
import es.nuskysoftware.marketsales.utils.ConfigurationManager
import kotlinx.coroutines.launch
import kotlin.coroutines.cancellation.CancellationException

/**
 * AuthRepository V10 - SIMPLIFICADO PARA SISTEMA MONOUSUARIO
 *
 * CAMBIOS V10:
 * - Eliminado sistema multiusuario (empresas, roles, permisos)
 * - Simplificado flujo login/logout
 * - Solo gestiona: usuario básico + esPremium
 * - Configuración global común a todos los usuarios
 */

sealed class AuthState {
    object Loading : AuthState()
    object Unauthenticated : AuthState()
    data class Authenticated(val user: FirebaseUser) : AuthState()
    data class Error(val message: String) : AuthState()
}

sealed class AuthResult {
    data class Success(val user: FirebaseUser?) : AuthResult()
    data class Error(val message: String) : AuthResult()
}

class AuthRepository(
    private val context: Context
) {
    private val firebaseAuth = FirebaseAuth.getInstance()
    private val firestore = FirebaseFirestore.getInstance()

    private var isLoadingConfiguration = false


    // ✅ V10: Repositorios simplificados
    private val userRepository = UserRepository(context)
    private val configuracionRepository = ConfiguracionRepository(context)

    private val _authState = MutableStateFlow<AuthState>(AuthState.Loading)
    val authState: StateFlow<AuthState> = _authState.asStateFlow()

    private val _currentUser = MutableStateFlow<FirebaseUser?>(null)
    val currentUser: StateFlow<FirebaseUser?> = _currentUser.asStateFlow()

    companion object {
        private const val TAG = "AuthRepository"
    }
    // En AuthRepository.kt, reemplaza el bloque init{} con esta versión corregida:
// REEMPLAZA COMPLETAMENTE el bloque init{} en tu AuthRepository.kt con esto:

    init {
        // Inicializar estado basado en usuario actual
        val user = firebaseAuth.currentUser
        _currentUser.value = user
        _authState.value = if (user != null) {
            AuthState.Authenticated(user)
        } else {
            AuthState.Unauthenticated
        }

        // ✅ CORRECCIÓN SIMPLE: Si hay usuario, actualizar ConfigurationManager
//        if (user != null) {
//            Log.d(TAG, "Usuario existente detectado: ${user.email}")
//
//            // Actualizar ConfigurationManager directamente
//            ConfigurationManager.updateUserConfiguration(
//                usuarioEmail = user.email,
//                usuarioId = user.uid,
//                displayName = user.displayName ?: "",
//                isAuthenticated = true,  // ✅ ESTO ES LO CRÍTICO
//                planUsuario = "FREE"     // Por defecto FREE, se actualizará después
//            )
//
//            Log.d(TAG, "✅ ConfigurationManager actualizado para usuario existente")
//        }
        if (user != null) {
            Log.d(TAG, "Usuario existente detectado: ${user.email}")

            // Usar GlobalScope para corrutinas (simple pero funcional para init)
            kotlinx.coroutines.GlobalScope.launch {
                try {
                    loadUserConfigurationHybrid(user.uid)
                } catch (e: Exception) {
                    Log.e(TAG, "Error cargando configuración híbrida en init", e)
                    // Fallback simple
//                    ConfigurationManager.updateUserConfiguration(
//                        usuarioEmail = user.email,
//                        usuarioId = user.uid,
//                        displayName = user.displayName ?: "",
//                        isAuthenticated = true,
//                        planUsuario = "FREE"
//                    )
                    ConfigurationManager.logout()
                }
            }
        } else {
            // Asegurar que ConfigurationManager refleje que no hay usuario
            ConfigurationManager.logout()
            Log.d(TAG, "No hay usuario - ConfigurationManager en estado logout")
        }

        // Listener para cambios de autenticación
        firebaseAuth.addAuthStateListener { auth ->
            val currentUser = auth.currentUser
            _currentUser.value = currentUser
            _authState.value = if (currentUser != null) {
                AuthState.Authenticated(currentUser)
            } else {
                AuthState.Unauthenticated
            }
        }

        Log.d(TAG, "AuthRepository V10 inicializado - Usuario actual: ${user?.email ?: "null"}")
    }


    // ========== MÉTODOS DE TESTING (preservados) ==========

    fun testConnection(): Boolean {
        return try {
            val app = firebaseAuth.app
            Log.d(TAG, "Conexión Firebase Auth OK - App: ${app.name}")
            true
        } catch (e: Exception) {
            Log.e(TAG, "Error conexión Firebase Auth", e)
            false
        }
    }

    /**
     * 🔥 NUEVO: Cargar configuración usando estrategia híbrida
     */
//        private suspend fun loadUserConfigurationHybrid(usuarioUid: String) {
//            if (isLoadingConfiguration) {
//                Log.d(TAG, "Ya se está cargando configuración, omitiendo")
//                return
//            } else {
//                try {
//                    Log.d(TAG, "🔄 Cargando configuración HÍBRIDA para usuario: $usuarioUid")
//
//                    // 1. Obtener datos híbridos (Firebase + Room inteligente)
//                    val userEntity = userRepository.getHybridUserData(usuarioUid)
//                    val configEntity = configuracionRepository.getHybridConfiguracion()
//
//                    // 2. Actualizar configuración en BD para este usuario
//                    configuracionRepository.setUsuarioLogueado(usuarioUid)
//
//                    if (configEntity != null && userEntity != null) {
//                        // 3. Actualizar ConfigurationManager con datos híbridos
//                        ConfigurationManager.updateUserConfiguration(
//                            idioma = configEntity.idioma,
//                            fuente = configEntity.fuente,
//                            temaOscuro = configEntity.temaOscuro,
//                            moneda = configEntity.moneda,
//                            usuarioEmail = userEntity.email,
//                            usuarioId = usuarioUid,
//                            displayName = userEntity.displayName,
//                            planUsuario = if (userEntity.esPremium) "PREMIUM" else "FREE",
//                            isAuthenticated = true
//                        )
//
//                        Log.d(TAG, "✅ Configuración HÍBRIDA cargada:")
//                        Log.d(TAG, "   - usuario: $usuarioUid")
//                        Log.d(
//                            TAG,
//                            "   - esPremium: ${userEntity.esPremium} (${if (userEntity.sincronizadoFirebase) "Firebase" else "Room"})"
//                        )
//                        Log.d(
//                            TAG,
//                            "   - moneda: ${configEntity.moneda} (${if (configEntity.pendienteSync) "Room" else "Firebase"})"
//                        )
//
//                    } else {
//                        Log.e(TAG, "Error cargando configuración híbrida")
//                        //ConfigurationManager.resetToDefaults()
//                        return
//                    }
//
//                } catch (e: Exception) {
//                    Log.e(TAG, "Error real cargando configuración híbrida", e)
//                    ConfigurationManager.resetToDefaults()
//                } finally {
//                    isLoadingConfiguration = false
//                }
//            }
//        }
    private suspend fun loadUserConfigurationHybrid(usuarioUid: String) {
        if (isLoadingConfiguration) {
            Log.d(TAG, "Ya se está cargando configuración, omitiendo")
            return
        }

        isLoadingConfiguration = true
        try {
            Log.d(TAG, "🔄 Cargando configuración HÍBRIDA para usuario: $usuarioUid")

            // ✅ VERIFICAR FIREBASE ANTES DE USAR ROOM
            val firebaseDisplayName = Firebase.auth.currentUser?.displayName
            Log.d(TAG, "🔍 Firebase displayName: $firebaseDisplayName")

            val userEntity = userRepository.getHybridUserData(usuarioUid)
            val configEntity = configuracionRepository.getHybridConfiguracion()

            configuracionRepository.setUsuarioLogueado(usuarioUid)

            if (configEntity != null && userEntity != null) {

                // 🚨 NUEVO: Si usuario NO es premium, forzar configuración por defecto
                val finalConfig = if (!userEntity.esPremium) {
                    Log.w(TAG, "🔄 Usuario FREE detectado - aplicando configuración por defecto")
                    configEntity.copy(
                        idioma = "es",
                        fuente = "Montserrat",
                        moneda = "€ Euro",
                        pendienteSync = true
                    )
                } else {
                    configEntity
                }

                // ✅ LÓGICA INTELIGENTE: Priorizar Firebase si es diferente
                val finalDisplayName = if (firebaseDisplayName != null &&
                    firebaseDisplayName.isNotBlank() &&
                    firebaseDisplayName != userEntity.displayName) {
                    Log.d(TAG, "🎯 Usando displayName de Firebase (más reciente): $firebaseDisplayName")

                    // ✅ ACTUALIZAR ROOM CON EL VALOR DE FIREBASE
                    userRepository.updateUserDisplayName(usuarioUid, firebaseDisplayName)

                    firebaseDisplayName
                } else {
                    Log.d(TAG, "🎯 Usando displayName de Room: ${userEntity.displayName}")
                    userEntity.displayName ?: ""
                }

                ConfigurationManager.updateUserConfiguration(
                    idioma = finalConfig.idioma,
                    fuente = finalConfig.fuente,
                    temaOscuro = finalConfig.temaOscuro,
                    moneda = finalConfig.moneda,
                    usuarioEmail = userEntity.email,
                    usuarioId = usuarioUid,
                    displayName = finalDisplayName, // ✅ Usar el displayName inteligente
                    planUsuario = if (userEntity.esPremium) "PREMIUM" else "FREE",
                    isAuthenticated = true
                )

                Log.d(TAG, "✅ Configuración HÍBRIDA cargada:")
                Log.d(TAG, "   - usuario: $usuarioUid")
                Log.d(TAG, "   - displayName final: $finalDisplayName")
                Log.d(TAG, "   - esPremium: ${userEntity.esPremium}")
                Log.d(TAG, "   - idioma: ${finalConfig.idioma}")
                Log.d(TAG, "   - moneda: ${finalConfig.moneda}")

            } else {
                Log.e(TAG, "Error cargando configuración híbrida")
                return
            }

        } catch (e: CancellationException) {
            Log.w(TAG, "Configuración cancelada - manteniendo estado actual")
            return
        } catch (e: Exception) {
            Log.e(TAG, "Error real cargando configuración híbrida", e)
            ConfigurationManager.resetToDefaults()
        } finally {
            isLoadingConfiguration = false
        }
    }

    suspend fun updateUserProfile(userId: String, displayName: String, email: String) {
        try {
            // Usar el método existente de UserRepository
            userRepository.updateUserProfile(userId, displayName, email)
            Log.d(TAG, "✅ Perfil actualizado en UserRepository")
        } catch (e: Exception) {
            Log.e(TAG, "❌ Error actualizando perfil en repository", e)
        }
    }
    suspend fun updateUserProfileAndMarkDirty(userId: String, displayName: String, email: String) {
        try {
            // Actualizar UserRepository con datos frescos
            userRepository.updateUserProfileAndMarkDirty(userId, displayName, email)
            Log.d(TAG, "✅ Perfil actualizado en UserRepository y marcado como no sincronizado")
        } catch (e: Exception) {
            Log.e(TAG, "❌ Error actualizando perfil en repository", e)
        }
    }
    suspend fun refreshUserConfiguration() {
        val currentUser = Firebase.auth.currentUser
        if (currentUser != null) {
            Log.d(TAG, "🔄 Forzando refresh de configuración de usuario")
            loadUserConfigurationHybrid(currentUser.uid)
        }
    }
        fun isUserAuthenticated(): Boolean {
            val authenticated = firebaseAuth.currentUser != null
            Log.d(TAG, "¿Usuario autenticado? $authenticated")
            return authenticated
        }

        // ========== REGISTRO CON EMAIL/PASSWORD V10 ==========

        suspend fun registerWithEmail(email: String, password: String): AuthResult {
            return try {
                Log.d(TAG, "Iniciando registro para: $email")
                _authState.value = AuthState.Loading

                // 1. Crear usuario en Firebase Auth
                val authResult =
                    firebaseAuth.createUserWithEmailAndPassword(email, password).await()
                val user = authResult.user

                if (user != null) {
                    Log.d(TAG, "Usuario registrado exitosamente: ${user.email}")

                    // 2. Crear/cargar usuario en base de datos local
                    val userEntity = userRepository.getOrCreateUser(
                        uid = user.uid,
                        email = user.email ?: "",
                        displayName = user.displayName ?: "",
                        photoUrl = user.photoUrl?.toString() ?: "",
                        esPremium = false // Nuevos usuarios son FREE por defecto
                    )

                    // 3. Cargar configuración para este usuario
                    //loadUserConfiguration(user.uid, userEntity.esPremium)
                    loadUserConfigurationHybrid(user.uid) // ✅ esPremium: true


                    _authState.value = AuthState.Authenticated(user)
                    AuthResult.Success(user)
                } else {
                    val error = "Error: Usuario nulo después del registro"
                    Log.e(TAG, error)
                    _authState.value = AuthState.Error(error)
                    AuthResult.Error(error)
                }

            } catch (e: Exception) {
                val errorMessage = "Error en registro: ${e.message}"
                Log.e(TAG, errorMessage, e)
                _authState.value = AuthState.Error(errorMessage)
                AuthResult.Error(errorMessage)
            }
        }

    suspend fun updateUserInDatabase(userId: String, displayName: String, email: String) {
        try {
            userRepository.updateUserProfile(userId, displayName, email)
            Log.d(TAG, "✅ Perfil actualizado en base de datos local")
        } catch (e: Exception) {
            Log.e(TAG, "❌ Error actualizando perfil en BD local", e)
        }
    }
        // ========== LOGIN CON EMAIL/PASSWORD V10 ==========

        suspend fun loginWithEmail(email: String, password: String): AuthResult {
            return try {
                Log.d(TAG, "Iniciando login para: $email")
                _authState.value = AuthState.Loading

                // 1. Autenticar con Firebase Auth
                val authResult = firebaseAuth.signInWithEmailAndPassword(email, password).await()
                val user = authResult.user

                if (user != null) {
                    Log.d(TAG, "Login exitoso: ${user.email}")

                    // 2. Buscar/crear usuario en base de datos local
                    val userEntity = userRepository.getOrCreateUser(
                        uid = user.uid,
                        email = user.email ?: "",
                        displayName = user.displayName ?: "",
                        photoUrl = user.photoUrl?.toString() ?: ""
                    )

                    // 3. Cargar configuración para este usuario
                    //loadUserConfiguration(user.uid, userEntity.esPremium)
                    loadUserConfigurationHybrid(user.uid) // ✅ esPremium: true


                    _authState.value = AuthState.Authenticated(user)
                    AuthResult.Success(user)
                } else {
                    val error = "Error: Usuario nulo después del login"
                    Log.e(TAG, error)
                    _authState.value = AuthState.Error(error)
                    AuthResult.Error(error)
                }

            } catch (e: Exception) {
                val errorMessage = when (e.message) {
                    "The email address is badly formatted." -> "Email inválido"
                    "The password is invalid or the user does not have a password." -> "Contraseña incorrecta"
                    "There is no user record corresponding to this identifier. The user may have been deleted." -> "Usuario no encontrado"
                    "A network error (such as timeout, interrupted connection or unreachable host) has occurred." -> "Error de conexión"
                    else -> "Error en login: ${e.message}"
                }
                Log.e(TAG, errorMessage, e)
                _authState.value = AuthState.Error(errorMessage)
                AuthResult.Error(errorMessage)
            }
        }

        // ========== GOOGLE AUTH V10 ==========

        suspend fun signInWithGoogle(idToken: String): AuthResult {
            return try {
                Log.d(TAG, "Iniciando Google Auth con idToken")
                _authState.value = AuthState.Loading

                // 1. Crear credencial de Google
                val credential = GoogleAuthProvider.getCredential(idToken, null)

                // 2. Autenticar con Firebase
                val authResult = firebaseAuth.signInWithCredential(credential).await()
                val user = authResult.user

                if (user != null) {
                    Log.d(TAG, "Google Auth exitoso: ${user.email}")

                    // 3. Crear/actualizar usuario en base de datos local
                    val userEntity = userRepository.getOrCreateUser(
                        uid = user.uid,
                        email = user.email ?: "",
                        displayName = user.displayName ?: "",
                        photoUrl = user.photoUrl?.toString() ?: ""
                    )

                    // 4. Cargar configuración para este usuario
                    //loadUserConfiguration(user.uid, userEntity.esPremium)
                    loadUserConfigurationHybrid(user.uid) // ✅ esPremium: true


                    _authState.value = AuthState.Authenticated(user)
                    AuthResult.Success(user)
                } else {
                    val error = "Error: Usuario nulo después de Google Auth"
                    Log.e(TAG, error)
                    _authState.value = AuthState.Error(error)
                    AuthResult.Error(error)
                }

            } catch (e: Exception) {
                val errorMessage = when (e.message) {
                    "An internal error has occurred. [ INVALID_IDP_RESPONSE ]" -> "Error de autenticación con Google"
                    "A network error (such as timeout, interrupted connection or unreachable host) has occurred." -> "Error de conexión"
                    else -> "Error en Google Auth: ${e.message}"
                }
                Log.e(TAG, errorMessage, e)
                _authState.value = AuthState.Error(errorMessage)
                AuthResult.Error(errorMessage)
            }
        }

        // ========== LOGOUT V10 ==========
// También asegúrate de que el método logout() actualice correctamente el estado:
//        suspend fun logout(): AuthResult {
//            return try {
//                Log.d(TAG, "Cerrando sesión...")
//                _authState.value = AuthState.Loading
//
//                // 1. Cerrar sesión en Firebase
//                firebaseAuth.signOut()
//
//                // 2. Cambiar a usuario_default en configuración
//                configuracionRepository.setUsuarioLogueado("usuario_default")
//
//                // 3. ✅ CORRECCIÓN: Actualizar ConfigurationManager con logout completo
//                ConfigurationManager.updateUserConfiguration(
//                    usuarioEmail = null,
//                    usuarioId = null,
//                    displayName = null,
//                    isAuthenticated = false,  // ✅ ESTO ES CRÍTICO
//                    planUsuario = "FREE"
//                )
//
//                Log.d(TAG, "✅ Sesión cerrada exitosamente - isAuthenticated: false")
//                _authState.value = AuthState.Unauthenticated
//
//                AuthResult.Success(null)
//
//            } catch (e: Exception) {
//                val errorMessage = "Error al cerrar sesión: ${e.message}"
//                Log.e(TAG, errorMessage, e)
//                _authState.value = AuthState.Error(errorMessage)
//                AuthResult.Error(errorMessage)
//            }
//        }
        suspend fun logout(): AuthResult {
            return try {
                Log.d(TAG, "Cerrando sesión...")
                _authState.value = AuthState.Loading

                firebaseAuth.signOut()
                configuracionRepository.setUsuarioLogueado("usuario_default")

                // 🚨 CAMBIO: Forzar configuración por defecto inmediatamente
                ConfigurationManager.updateUserConfiguration(
                    idioma = "es",              // ✅ FORZAR español
                    fuente = "Montserrat",      // ✅ FORZAR Montserrat
                    temaOscuro = false,         // ✅ FORZAR tema claro
                    moneda = "€ Euro",          // ✅ FORZAR Euro
                    usuarioEmail = null,
                    usuarioId = null,
                    displayName = null,
                    isAuthenticated = false,
                    planUsuario = "FREE"
                )

                Log.d(TAG, "✅ Sesión cerrada y configuración reseteada")
                _authState.value = AuthState.Unauthenticated

                AuthResult.Success(null)

            } catch (e: Exception) {
                val errorMessage = "Error al cerrar sesión: ${e.message}"
                Log.e(TAG, errorMessage, e)
                _authState.value = AuthState.Error(errorMessage)
                AuthResult.Error(errorMessage)
            }
        }

        // ========== CONFIGURACIÓN V10 ==========
         suspend fun loadUserConfiguration(usuarioUid: String, esPremium: Boolean) {
            try {
                Log.d(TAG, "Cargando configuración para usuario: $usuarioUid")

                // 1. Cargar configuración global
                val configEntity = configuracionRepository.getConfiguracion()

                // 2. Actualizar configuración en BD para este usuario
                configuracionRepository.setUsuarioLogueado(usuarioUid)

                // 3. Obtener datos del usuario
                val userEntity = userRepository.getUserById(usuarioUid)

                if (configEntity != null && userEntity != null) {
                    // 4. ✅ CORRECCIÓN: Actualizar ConfigurationManager con TODOS los datos necesarios
                    ConfigurationManager.updateUserConfiguration(
                        idioma = configEntity.idioma,
                        fuente = configEntity.fuente,
                        temaOscuro = configEntity.temaOscuro,
                        moneda = configEntity.moneda,
                        usuarioEmail = userEntity.email,
                        usuarioId = usuarioUid,
                        displayName = userEntity.displayName,
                        planUsuario = if (userEntity.esPremium) "PREMIUM" else "FREE",
                        isAuthenticated = true  // ✅ ESTO ES LO QUE FALTABA
                    )

                    Log.d(TAG, "✅ Configuración cargada:")
                    Log.d(TAG, "   - usuario: $usuarioUid")
                    Log.d(TAG, "   - esPremium: ${userEntity.esPremium}")
                    Log.d(TAG, "   - isAuthenticated: true")  // ✅ AÑADIDO
                    Log.d(TAG, "   - idioma: ${configEntity.idioma}")
                    Log.d(TAG, "   - moneda: ${configEntity.moneda}")

                } else {
                    Log.e(TAG, "Error cargando configuración o usuario")
                    ConfigurationManager.resetToDefaults()
                }

            } catch (e: Exception) {
                Log.e(TAG, "Error cargando configuración de usuario", e)
                ConfigurationManager.resetToDefaults()
            }
        }

        /**
         * Actualiza configuración (solo si el usuario tiene permisos)
         */
        suspend fun updateConfiguration(
            idioma: String? = null,
            fuente: String? = null,
            temaOscuro: Boolean? = null,
            moneda: String? = null
        ): Boolean {
            return try {
                val currentUser = firebaseAuth.currentUser
                val canChangeAdvanced = ConfigurationManager.canChangeConfiguration()

                // Solo Premium puede cambiar idioma, fuente y moneda
                if (idioma != null && canChangeAdvanced) {
                    configuracionRepository.updateIdioma(idioma)
                    ConfigurationManager.setIdioma(idioma)
                }

                if (fuente != null && canChangeAdvanced) {
                    configuracionRepository.updateFuente(fuente)
                    ConfigurationManager.setFuente(fuente)
                }

                if (moneda != null && canChangeAdvanced) {
                    configuracionRepository.updateMoneda(moneda)
                    ConfigurationManager.setMoneda(moneda)
                }

                // Todos pueden cambiar tema
                if (temaOscuro != null) {
                    configuracionRepository.updateTemaOscuro(temaOscuro)
                    ConfigurationManager.setTemaOscuro(temaOscuro)
                }

                Log.d(TAG, "✅ Configuración actualizada")
                true

            } catch (e: Exception) {
                Log.e(TAG, "Error actualizando configuración", e)
                false
            }
        }

        /**
         * Actualiza el estado Premium del usuario actual
         */
        suspend fun updateUserPremium(esPremium: Boolean): Boolean {
            return try {
                val currentUser = firebaseAuth.currentUser ?: return false

                // Actualizar en base de datos
                userRepository.updateUserPremium(currentUser.uid, esPremium)

                // Actualizar ConfigurationManager
                ConfigurationManager.updateUserPremium(esPremium)

                Log.d(TAG, "✅ Estado Premium actualizado: $esPremium")
                true

            } catch (e: Exception) {
                Log.e(TAG, "Error actualizando estado Premium", e)
                false
            }
        }

        // ========== INFORMACIÓN USUARIO ==========

        fun getCurrentUserInfo(): Map<String, Any>? {
            val user = firebaseAuth.currentUser
            return if (user != null) {
                mapOf(
                    "uid" to user.uid,
                    "email" to (user.email ?: ""),
                    "displayName" to (user.displayName ?: ""),
                    "photoUrl" to (user.photoUrl?.toString() ?: ""),
                    "isEmailVerified" to user.isEmailVerified,
                    "creationTimestamp" to (user.metadata?.creationTimestamp ?: 0L),
                    "provider" to if (user.providerData.any { it.providerId == "google.com" }) "google" else "email"
                )
            } else null
        }

        // ========== MÉTODOS OBSOLETOS V10 (compatibilidad) ==========

        @Deprecated(
            "Usar updateConfiguration()",
            ReplaceWith("updateConfiguration(idioma, fuente, modoOscuro)")
        )
        suspend fun updateUserConfiguration(
            idioma: String,
            fuente: String,
            modoOscuro: Boolean,
            isPremium: Boolean
        ): Boolean {
            return updateConfiguration(idioma, fuente, modoOscuro)
        }

        @Deprecated(
            "Usar updateConfiguration(moneda = moneda)",
            ReplaceWith("updateConfiguration(moneda = moneda)")
        )
        suspend fun updateMoneda(moneda: String): Boolean {
            return updateConfiguration(moneda = moneda)
        }
    }


// app/src/main/java/es/nuskysoftware/marketsales/data/repository/CategoriaRepository.kt
package es.nuskysoftware.marketsales.data.repository

import android.content.Context
import android.util.Log
import com.google.firebase.firestore.FirebaseFirestore
import es.nuskysoftware.marketsales.data.local.dao.CategoriaDao
import es.nuskysoftware.marketsales.data.local.database.AppDatabase
import es.nuskysoftware.marketsales.data.local.entity.CategoriaEntity
import es.nuskysoftware.marketsales.utils.ConfigurationManager
import es.nuskysoftware.marketsales.utils.ConnectivityObserver
import kotlinx.coroutines.*
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.flow.flowOf
import kotlinx.coroutines.tasks.await

/**
 * CategoriaRepository V11 - Market Sales
 *
 * ARQUITECTURA HÍBRIDA "RELOJ SUIZO":
 * - Local First: Toda operación se ejecuta primero en Room
 * - Sync When Possible: Sincronización automática cuando hay conexión
 * - Never Block UI: La interfaz nunca espera operaciones de red
 * - Graceful Degradation: Funcionamiento completo offline
 * - Filtrado por usuario: Cada usuario solo ve sus datos
 */
class CategoriaRepository(
    context: Context
) {
    private val categoriaDao: CategoriaDao = AppDatabase.getDatabase(context).categoriaDao()
    private val firestore = FirebaseFirestore.getInstance()
    private val connectivityObserver = ConnectivityObserver(context)
    private val repositoryScope = CoroutineScope(SupervisorJob() + Dispatchers.IO)

    companion object {
        private const val TAG = "CategoriaRepository"
    }

    init {
        // Sincronización automática cuando volvemos online
        repositoryScope.launch {
            connectivityObserver.isConnected.collect { online ->
                if (online) {
                    val userId = ConfigurationManager.getCurrentUserId()
                    if (userId != null) {
                        sincronizarCategoriasNoSincronizadas(userId)
                    }
                }
            }
        }
    }

    // ========== OPERACIONES PRINCIPALES ==========

    /**
     * Obtiene todas las categorías del usuario actual
     */
    fun getCategoriasUsuarioActual(): Flow<List<CategoriaEntity>> {
        val userId = ConfigurationManager.getCurrentUserId()
        return if (userId != null) {
            categoriaDao.getCategoriasByUser(userId)
        } else {
            flowOf(emptyList())
        }
    }

    /**
     * Crea una nueva categoría - PATRÓN HÍBRIDO
     */
    suspend fun crearCategoria(
        nombre: String,
        colorHex: String,
        orden: Int = 0
    ): String = withContext(Dispatchers.IO) {
        val userId = ConfigurationManager.getCurrentUserId()
            ?: throw IllegalStateException("No se puede crear categoría sin usuario")

        Log.d(TAG, "🔄 Creando categoría para usuario: $userId")

        val nuevaCategoria = CategoriaEntity(
            userId = userId,
            nombre = nombre,
            colorHex = colorHex,
            orden = orden,
            sincronizadoFirebase = false
        )

        try {
            // 1. GUARDAR EN ROOM PRIMERO (respuesta inmediata)
            categoriaDao.insertCategoria(nuevaCategoria)
            Log.d(TAG, "✅ Categoría guardada en Room: ${nuevaCategoria.nombre}")

            // 2. INTENTAR SINCRONIZAR CON FIREBASE
            sincronizarCategoriaConFirebase(nuevaCategoria)

            return@withContext nuevaCategoria.idCategoria

        } catch (e: Exception) {
            Log.e(TAG, "❌ Error creando categoría", e)
            throw e
        }
    }

    /**
     * Actualiza una categoría existente - PATRÓN HÍBRIDO
     */
    suspend fun actualizarCategoria(categoria: CategoriaEntity): Boolean = withContext(Dispatchers.IO) {
        try {
            val categoriaActualizada = categoria.copy(
                version = categoria.version + 1,
                lastModified = System.currentTimeMillis(),
                sincronizadoFirebase = false
            )

            // 1. ACTUALIZAR EN ROOM PRIMERO
            categoriaDao.updateCategoria(categoriaActualizada)
            Log.d(TAG, "✅ Categoría actualizada en Room: ${categoriaActualizada.nombre}")

            // 2. INTENTAR SINCRONIZAR CON FIREBASE
            sincronizarCategoriaConFirebase(categoriaActualizada)

            true
        } catch (e: Exception) {
            Log.e(TAG, "❌ Error actualizando categoría", e)
            false
        }
    }

    /**
     * Elimina una categoría - PATRÓN HÍBRIDO
     */
    suspend fun eliminarCategoria(categoria: CategoriaEntity): Boolean = withContext(Dispatchers.IO) {
        try {
            // 1. ELIMINAR DE ROOM PRIMERO
            categoriaDao.deleteCategoria(categoria)
            Log.d(TAG, "✅ Categoría eliminada de Room: ${categoria.nombre}")

            // 2. INTENTAR ELIMINAR DE FIREBASE
            eliminarCategoriaDeFirebase(categoria.idCategoria)

            true
        } catch (e: Exception) {
            Log.e(TAG, "❌ Error eliminando categoría", e)
            false
        }
    }

    /**
     * Obtiene categoría por ID
     */
    suspend fun getCategoriaById(id: String): CategoriaEntity? = withContext(Dispatchers.IO) {
        categoriaDao.getCategoriaById(id)
    }

    // ========== ESTRATEGIA HÍBRIDA INTELIGENTE ==========

    /**
     * Obtiene datos híbridos: combina lo mejor de Room y Firebase
     */
    suspend fun getHybridCategorias(userId: String): List<CategoriaEntity> = withContext(Dispatchers.IO) {
        try {
            // 1. Verificar cambios pendientes en Room
            val categoriasNoSincronizadas = categoriaDao.getCategoriasNoSincronizadasByUser(userId)

            if (categoriasNoSincronizadas.isNotEmpty()) {
                // HAY CAMBIOS PENDIENTES → Room es fuente de verdad
                Log.d(TAG, "📱 Usando Room (${categoriasNoSincronizadas.size} cambios pendientes)")
                return@withContext categoriaDao.getCategoriasByUser(userId).first()
            } else {
                // NO HAY CAMBIOS PENDIENTES → Intentar Firebase
                Log.d(TAG, "☁️ Intentando Firebase (sin cambios pendientes)")

                if (connectivityObserver.isConnected.first()) {
                    try {
                        val firebaseCategorias = descargarCategoriasDesdeFirebase(userId)
                        if (firebaseCategorias.isNotEmpty()) {
                            // Actualizar Room con datos frescos
                            firebaseCategorias.forEach { categoria ->
                                categoriaDao.insertOrUpdate(categoria.copy(sincronizadoFirebase = true))
                            }
                            Log.d(TAG, "✅ Datos frescos de Firebase aplicados")
                        }
                    } catch (e: Exception) {
                        Log.w(TAG, "⚠️ Error con Firebase, usando Room como fallback", e)
                    }
                }

                // Devolver datos de Room (actualizados o fallback)
                return@withContext categoriaDao.getCategoriasByUser(userId).first()
            }
        } catch (e: Exception) {
            Log.e(TAG, "❌ Error en estrategia híbrida", e)
            // Fallback total a Room
            return@withContext categoriaDao.getCategoriasByUser(userId).first()
        }
    }

    // ========== SINCRONIZACIÓN CON FIREBASE ==========

    /**
     * Sincroniza una categoría específica con Firebase
     */
    private suspend fun sincronizarCategoriaConFirebase(categoria: CategoriaEntity) {
        try {
            if (!connectivityObserver.isConnected.first()) {
                Log.d(TAG, "⚠️ Sin conexión, categría quedará pendiente de sincronización")
                return
            }

            val datos = mapOf(
                "idCategoria" to categoria.idCategoria,
                "userId" to categoria.userId,
                "nombre" to categoria.nombre,
                "colorHex" to categoria.colorHex,
                "orden" to categoria.orden,
                "activa" to categoria.activa,
                "version" to categoria.version,
                "lastModified" to categoria.lastModified,
                "fechaSync" to System.currentTimeMillis()
            )

            firestore.collection("categorias")
                .document(categoria.idCategoria)
                .set(datos)
                .await()

            // Marcar como sincronizada en Room
            categoriaDao.marcarComoSincronizada(categoria.idCategoria)
            Log.d(TAG, "☁️ Categoría sincronizada con Firebase: ${categoria.nombre}")

        } catch (e: Exception) {
            Log.w(TAG, "⚠️ Error sincronizando con Firebase: ${categoria.nombre}", e)
            // La categoría queda marcada como no sincronizada para reintento posterior
        }
    }

    /**
     * Elimina categoría de Firebase
     */
    private suspend fun eliminarCategoriaDeFirebase(categoriaId: String) {
        try {
            if (connectivityObserver.isConnected.first()) {
                firestore.collection("categorias")
                    .document(categoriaId)
                    .delete()
                    .await()
                Log.d(TAG, "☁️ Categoría eliminada de Firebase: $categoriaId")
            }
        } catch (e: Exception) {
            Log.w(TAG, "⚠️ Error eliminando de Firebase: $categoriaId", e)
        }
    }

    /**
     * Sincroniza categorías no sincronizadas cuando hay conexión
     */
    private suspend fun sincronizarCategoriasNoSincronizadas(userId: String) {
        try {
            val pendientes = categoriaDao.getCategoriasNoSincronizadasByUser(userId)
            Log.d(TAG, "🔄 Sincronizando ${pendientes.size} categorías pendientes")

            pendientes.forEach { categoria ->
                sincronizarCategoriaConFirebase(categoria)
                delay(100) // Evitar saturar Firebase
            }
        } catch (e: Exception) {
            Log.e(TAG, "❌ Error sincronizando pendientes", e)
        }
    }

    /**
     * Descarga categorías desde Firebase
     */
    private suspend fun descargarCategoriasDesdeFirebase(userId: String): List<CategoriaEntity> {
        return try {
            val snapshot = firestore.collection("categorias")
                .whereEqualTo("userId", userId)
                .whereEqualTo("activa", true)
                .get()
                .await()

            val categorias = snapshot.documents.mapNotNull { doc ->
                try {
                    val data = doc.data ?: return@mapNotNull null
                    CategoriaEntity(
                        idCategoria = data["idCategoria"] as? String ?: "",
                        userId = data["userId"] as? String ?: "",
                        nombre = data["nombre"] as? String ?: "",
                        colorHex = data["colorHex"] as? String ?: "#FFFFFF",
                        orden = (data["orden"] as? Long)?.toInt() ?: 0,
                        activa = data["activa"] as? Boolean ?: true,
                        version = data["version"] as? Long ?: 1L,
                        lastModified = data["lastModified"] as? Long ?: System.currentTimeMillis(),
                        sincronizadoFirebase = true
                    )
                } catch (e: Exception) {
                    Log.w(TAG, "⚠️ Error parseando categoría de Firebase", e)
                    null
                }
            }

            Log.d(TAG, "☁️ Descargadas ${categorias.size} categorías de Firebase")
            categorias

        } catch (e: Exception) {
            Log.e(TAG, "❌ Error descargando de Firebase", e)
            emptyList()
        }
    }

    // ========== UTILIDADES ==========

    /**
     * Verifica si existe una categoría con el mismo nombre
     */
    suspend fun existeCategoriaConNombre(nombre: String, excludeId: String = ""): Boolean {
        val userId = ConfigurationManager.getCurrentUserId() ?: return false
        return categoriaDao.existeCategoriaConNombre(userId, nombre, excludeId)
    }

    /**
     * Fuerza sincronización completa
     */
    suspend fun forzarSincronizacion(): Boolean = withContext(Dispatchers.IO) {
        try {
            val userId = ConfigurationManager.getCurrentUserId() ?: return@withContext false

            sincronizarCategoriasNoSincronizadas(userId)
            getHybridCategorias(userId) // Esto descargará datos frescos de Firebase

            true
        } catch (e: Exception) {
            Log.e(TAG, "❌ Error en sincronización forzada", e)
            false
        }
    }
}

// app/src/main/java/es/nuskysoftware/marketsales/data/repository/ConfiguracionRepository.kt
package es.nuskysoftware.marketsales.data.repository

import android.content.Context
import android.util.Log
import com.google.firebase.firestore.FirebaseFirestore
import es.nuskysoftware.marketsales.data.local.dao.ConfiguracionDao
import es.nuskysoftware.marketsales.data.local.database.AppDatabase
import es.nuskysoftware.marketsales.data.local.entity.ConfiguracionEntity
import es.nuskysoftware.marketsales.utils.ConnectivityObserver
import kotlinx.coroutines.*
import kotlinx.coroutines.flow.SharingStarted
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.flow.stateIn
import kotlinx.coroutines.tasks.await
import java.text.SimpleDateFormat
import java.util.*

/**
 * ConfiguracionRepository V10 - SIMPLIFICADO PARA SISTEMA MONOUSUARIO
 *
 * CAMBIOS V10:
 * - Métodos actualizados para nueva estructura ConfiguracionEntity
 * - Agregados métodos para usuarioLogueado
 * - Sincronización con nuevos campos version/lastModified
 * - Eliminados métodos obsoletos (usuarioPassword, versionApp, etc.)
 */
class ConfiguracionRepository(
    context: Context
) {
    private val configuracionDao: ConfiguracionDao = AppDatabase.getDatabase(context).configuracionDao()
    private val firestore = FirebaseFirestore.getInstance()
    private val dateFormat = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault())
    private val repositoryScope = CoroutineScope(SupervisorJob() + Dispatchers.IO)

    // Observador de red
    private val connectivityObserver = ConnectivityObserver(context)

    // Exponer configuración como StateFlow
    val configuracion = configuracionDao.getConfiguracionFlow()
        .stateIn(repositoryScope, SharingStarted.WhileSubscribed(5_000), null)

    init {
        // Cuando volvemos a estar online, reintentamos enviar pendientes
        repositoryScope.launch {
            connectivityObserver.isConnected.collect { online ->
                if (online) {
                    val cfg = configuracionDao.getConfiguracionSync()
                    if (cfg?.pendienteSync == true) {
                        sincronizarConFirebase(cfg)
                    }
                }
            }
        }
    }

    // ========== MÉTODOS PRINCIPALES V10 ==========

    /**
     * Obtiene la configuración actual
     */
    suspend fun getConfiguracion(): ConfiguracionEntity? = withContext(Dispatchers.IO) {
        configuracionDao.getConfiguracionSync()
    }

    /**
     * Crea configuración por defecto si no existe
     */
    suspend fun crearConfiguracionPorDefecto() = withContext(Dispatchers.IO) {
        val existente = configuracionDao.getConfiguracion()
        if (existente == null) {
            val porDefecto = ConfiguracionEntity(
                usuarioLogueado = "usuario_default",
                ultimoDispositivo = android.os.Build.MODEL,
                fechaUltimaSync = dateFormat.format(Date())
            )
            configuracionDao.insertOrUpdate(porDefecto)
            sincronizarConFirebase(porDefecto)
        } else {
            if (existente.fechaUltimaSync == null || existente.pendienteSync) {
                sincronizarConFirebase(existente)
            }
        }
    }

    // ========== CONFIGURACIÓN GLOBAL V10 ==========

    /**
     * Actualiza el idioma (común a todos los usuarios)
     */
    suspend fun updateIdioma(idioma: String) = withContext(Dispatchers.IO) {
        configuracionDao.updateIdioma(idioma)
        sincronizarCampoEspecifico("idioma", idioma)
    }

    /**
     * Actualiza el tema oscuro (común a todos los usuarios)
     */
    suspend fun updateTemaOscuro(esTemaOscuro: Boolean) = withContext(Dispatchers.IO) {
        configuracionDao.updateTemaOscuro(esTemaOscuro)
        sincronizarCampoEspecifico("temaOscuro", esTemaOscuro)
    }

    /**
     * Actualiza la fuente (común a todos los usuarios)
     */
    suspend fun updateFuente(fuente: String) = withContext(Dispatchers.IO) {
        configuracionDao.updateFuente(fuente)
        sincronizarCampoEspecifico("fuente", fuente)
    }

    /**
     * Actualiza la moneda (común a todos los usuarios)
     */
    suspend fun updateMoneda(moneda: String) = withContext(Dispatchers.IO) {
        configuracionDao.updateMoneda(moneda)
        sincronizarCampoEspecifico("moneda", moneda)
    }

    // ========== USUARIO LOGUEADO V10 ==========

    /**
     * Establece el usuario actualmente logueado
     */
    suspend fun setUsuarioLogueado(usuarioUid: String) = withContext(Dispatchers.IO) {
        configuracionDao.setUsuarioLogueado(usuarioUid)
        // No sincronizar este campo con Firebase (es solo local)
    }

    /**
     * Obtiene el usuario actualmente logueado
     */
    suspend fun getUsuarioLogueado(): String? = withContext(Dispatchers.IO) {
        configuracionDao.getUsuarioLogueado()
    }

    /**
     * Verifica si es usuario por defecto
     */
    suspend fun isUsuarioDefault(): Boolean = withContext(Dispatchers.IO) {
        configuracionDao.isUsuarioDefault()
    }

    // ========== SINCRONIZACIÓN V10 ==========

    /**
     * Sincroniza la configuración completa
     */
    suspend fun sincronizar() = withContext(Dispatchers.IO) {
        val cfg = configuracionDao.getConfiguracionSync() ?: return@withContext
        sincronizarConFirebase(cfg)
    }

    /**
     * Sincroniza la configuración completa con Firebase
     */
    private fun sincronizarConFirebase(config: ConfiguracionEntity) {
        try {
            val datos = mapOf(
                "idioma" to config.idioma,
                "temaOscuro" to config.temaOscuro,
                "fuente" to config.fuente,
                "moneda" to config.moneda,
                "numeroVersion" to config.numeroVersion,
                "ultimoDispositivo" to config.ultimoDispositivo,
                "fechaUltimaSync" to dateFormat.format(Date()),
                "version" to config.version,
                "lastModified" to System.currentTimeMillis(),
                "dispositivo" to android.os.Build.MODEL
            )

            // Usar "usuario_default" como documento para configuración global
            val docRef = firestore.collection("configuraciones")
                .document("configuracion_global")

            docRef.set(datos)
                .addOnSuccessListener {
                    repositoryScope.launch {
                        configuracionDao.updateFechaUltimaSync(dateFormat.format(Date()))
                        configuracionDao.updatePendienteSync(false)
                    }
                }
                .addOnFailureListener {
                    repositoryScope.launch {
                        configuracionDao.updatePendienteSync(true)
                    }
                }
        } catch (e: Exception) {
            repositoryScope.launch {
                configuracionDao.updatePendienteSync(true)
            }
        }
    }

    /**
     * Sincroniza un campo específico con Firebase
     */
    private suspend fun sincronizarCampoEspecifico(campo: String, valor: Any) {
        try {
            val datos = mapOf(
                campo to valor,
                "fechaUltimaSync" to dateFormat.format(Date()),
                "lastModified" to System.currentTimeMillis()
            )

            firestore.collection("configuraciones")
                .document("configuracion_global")
                .update(datos)
                .addOnSuccessListener {
                    repositoryScope.launch {
                        configuracionDao.updateFechaUltimaSync(dateFormat.format(Date()))
                        configuracionDao.updatePendienteSync(false)
                    }
                }
                .addOnFailureListener {
                    repositoryScope.launch {
                        configuracionDao.updatePendienteSync(true)
                    }
                }
        } catch (e: Exception) {
            repositoryScope.launch {
                configuracionDao.updatePendienteSync(true)
            }
        }
    }
    suspend fun getHybridConfiguracion(): ConfiguracionEntity? = withContext(Dispatchers.IO) {
        try {
            // 1. Verificar si hay cambios pendientes en Room
            val roomConfig = configuracionDao.getConfiguracionSync()
            val hasPendingChanges = roomConfig?.pendienteSync == true

            if (hasPendingChanges) {
                // ✅ HAY CAMBIOS PENDIENTES → Leer de Room (fuente de verdad)
                Log.d("ConfiguracionRepository", "📱 Leyendo configuración de ROOM (cambios pendientes)")
                return@withContext roomConfig
            } else {
                // ✅ NO HAY CAMBIOS PENDIENTES → Leer de Firebase (más actualizado)
                Log.d("ConfiguracionRepository", "☁️ Leyendo configuración de FIREBASE (sin cambios pendientes)")

                if (connectivityObserver.isConnected.first()) {
                    try {
                        val firebaseDoc = firestore.collection("configuraciones")
                            .document("configuracion_global")
                            .get()
                            .await()

                        if (firebaseDoc.exists()) {
                            val firebaseData = firebaseDoc.data!!

                            // Crear entidad híbrida: Firebase + datos locales importantes
                            val hybridConfig = roomConfig?.copy(
                                // Datos de Firebase (comunes)
                                moneda = firebaseData["moneda"] as? String ?: roomConfig.moneda,
                                idioma = firebaseData["idioma"] as? String ?: roomConfig.idioma,
                                fuente = firebaseData["fuente"] as? String ?: roomConfig.fuente,
                                temaOscuro = firebaseData["temaOscuro"] as? Boolean ?: roomConfig.temaOscuro,

                                // Datos locales (específicos del dispositivo)
                                usuarioLogueado = roomConfig.usuarioLogueado, // Mantener local
                                pendienteSync = false // Marcar como sincronizado
                            ) ?: ConfiguracionEntity(
                                moneda = firebaseData["moneda"] as? String ?: "€ Euro",
                                idioma = firebaseData["idioma"] as? String ?: "es",
                                fuente = firebaseData["fuente"] as? String ?: "Montserrat",
                                temaOscuro = firebaseData["temaOscuro"] as? Boolean ?: false
                            )

                            // Actualizar Room con datos frescos
                            configuracionDao.insertOrUpdate(hybridConfig)

                            Log.d("ConfiguracionRepository", "✅ Configuración fresca de Firebase aplicada")
                            return@withContext hybridConfig
                        }
                    } catch (e: Exception) {
                        Log.w("ConfiguracionRepository", "❌ Error leyendo Firebase, usando Room", e)
                    }
                }

                // Fallback: usar Room
                return@withContext roomConfig ?: ConfiguracionEntity()
            }

        } catch (e: Exception) {
            Log.e("ConfiguracionRepository", "Error en estrategia híbrida", e)
            // En caso de error, devolver lo que tengamos en Room o crear configuración por defecto
            val fallbackConfig = configuracionDao.getConfiguracionSync()
            return@withContext fallbackConfig ?: ConfiguracionEntity()
        }
    }
    // ========== MÉTODOS OBSOLETOS V10 (compatibilidad) ==========

    @Deprecated("Usar updateIdioma()", ReplaceWith("updateIdioma(idioma)"))
    suspend fun actualizarIdioma(idioma: String) = updateIdioma(idioma)

    @Deprecated("Usar updateTemaOscuro()", ReplaceWith("updateTemaOscuro(esTemaOscuro)"))
    suspend fun actualizarTema(esTemaOscuro: Boolean) = updateTemaOscuro(esTemaOscuro)

    @Deprecated("Usar updateFuente()", ReplaceWith("updateFuente(fuente)"))
    suspend fun actualizarFuente(fuente: String) = updateFuente(fuente)

    @Deprecated("Usar updateMoneda()", ReplaceWith("updateMoneda(moneda)"))
    suspend fun actualizarMoneda(moneda: String) = updateMoneda(moneda)

    @Deprecated("Campo eliminado en V10 - usar UserRepository", ReplaceWith("UserRepository.updateUserPassword()"))
    suspend fun actualizarPassword(password: String) {
        // No-op en V10
    }

    @Deprecated("Campo eliminado en V10 - usar UserRepository", ReplaceWith("UserRepository.updateUserPremium()"))
    suspend fun actualizarVersionApp(version: Int) {
        // No-op en V10
    }

    @Deprecated("Campo eliminado en V10 - usar UserRepository", ReplaceWith("UserRepository.updateUserEmail()"))
    suspend fun actualizarUsuarioEmail(email: String) {
        // No-op en V10
    }
}

// app/src/main/java/es/nuskysoftware/marketsales/data/repository/UserRepository.kt
package es.nuskysoftware.marketsales.data.repository

import android.content.ContentValues.TAG
import android.content.Context
import android.util.Log
import com.google.firebase.firestore.FirebaseFirestore
import es.nuskysoftware.marketsales.data.local.dao.UserDao
import es.nuskysoftware.marketsales.data.local.database.AppDatabase
import es.nuskysoftware.marketsales.data.local.entity.UserEntity
import es.nuskysoftware.marketsales.utils.ConnectivityObserver
import kotlinx.coroutines.*
import kotlinx.coroutines.flow.SharingStarted
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.flow.stateIn
import kotlinx.coroutines.tasks.await
import java.text.SimpleDateFormat
import java.util.*

/**
 * UserRepository V10 - SIMPLIFICADO PARA SISTEMA MONOUSUARIO
 *
 * CAMBIOS V10:
 * - Eliminado sistema multiusuario (empresas, invitaciones, roles)
 * - Eliminado configuración personal (ahora es global)
 * - Solo gestiona: datos básicos + esPremium + sincronización
 * - Agregado getOrCreateUser() para AuthRepository
 */
class UserRepository(
    context: Context
) {
    private val userDao: UserDao = AppDatabase.getDatabase(context).userDao()
    private val firestore = FirebaseFirestore.getInstance()
    private val dateFormat = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault())
    private val repositoryScope = CoroutineScope(SupervisorJob() + Dispatchers.IO)

    // Observador de red
    private val connectivityObserver = ConnectivityObserver(context)

    // Exponer usuario actual como StateFlow
    val currentUser = userDao.getCurrentUserFlow()
        .stateIn(repositoryScope, SharingStarted.WhileSubscribed(5_000), null)

    init {
        // Cuando volvemos online, sincronizamos usuarios pendientes
        repositoryScope.launch {
            connectivityObserver.isConnected.collect { online ->
                if (online) {
                    val pendingUsers = userDao.getUsersPendingSync()
                    pendingUsers.forEach { user ->
                        sincronizarUsuarioConFirebase(user)
                    }
                }
            }
        }
    }

    // ========== MÉTODOS PRINCIPALES V10 ==========

    /**
     * ✅ NUEVO: Busca usuario existente o crea uno nuevo (para AuthRepository)
     */
    suspend fun getOrCreateUser(
        uid: String,
        email: String,
        displayName: String = "",
        photoUrl: String = "",
        esPremium: Boolean = false
    ): UserEntity = withContext(Dispatchers.IO) {
        try {
            // 1. Buscar usuario existente en Room
            val existingUser = userDao.getUserByIdSync(uid)
            if (existingUser != null) {
                // Actualizar datos básicos si han cambiado
                if (existingUser.email != email ||
                    existingUser.displayName != displayName ||
                    existingUser.photoUrl != photoUrl
                ) {

                    val updatedUser = existingUser.copy(
                        email = email,
                        displayName = displayName,
                        photoUrl = photoUrl
                    )
                    userDao.insertOrUpdate(updatedUser)
                    sincronizarUsuarioConFirebase(updatedUser)
                    return@withContext updatedUser
                }
                return@withContext existingUser
            }

            // 2. Si no existe, buscar en Firebase
            if (connectivityObserver.isConnected.first()) {
                try {
                    val document = firestore.collection("usuarios")
                        .document(uid)
                        .get()
                        .await()

                    if (document.exists()) {
                        val firebaseUser = mapFirebaseToUserEntity(uid, document.data!!)
                        userDao.insertOrUpdate(firebaseUser)
                        return@withContext firebaseUser
                    }
                } catch (e: Exception) {
                    // Si falla Firebase, crear usuario local
                }
            }

            // 3. Crear usuario nuevo
            val newUser = UserEntity(
                uid = uid,
                email = email,
                displayName = displayName,
                photoUrl = photoUrl,
                esPremium = esPremium
            )

            userDao.insertOrUpdate(newUser)
            sincronizarUsuarioConFirebase(newUser)

            return@withContext newUser

        } catch (e: Exception) {
            // En caso de error, crear usuario mínimo
            val fallbackUser = UserEntity(
                uid = uid,
                email = email,
                displayName = displayName,
                photoUrl = photoUrl,
                esPremium = esPremium
            )
            userDao.insertOrUpdate(fallbackUser)
            return@withContext fallbackUser
        }
    }

    /**
     * Obtiene un usuario por ID
     */
    suspend fun getUserById(uid: String): UserEntity? = withContext(Dispatchers.IO) {
        userDao.getUserByIdSync(uid)
    }

    /**
     * Actualiza el estado Premium del usuario
     */
    suspend fun updateUserPremium(uid: String, esPremium: Boolean) = withContext(Dispatchers.IO) {
        userDao.updateUserPremium(uid, esPremium)
        sincronizarCampoEspecifico(uid, "esPremium", esPremium)
    }

    /**
     * Actualiza el email del usuario
     */
    suspend fun updateUserEmail(uid: String, email: String) = withContext(Dispatchers.IO) {
        userDao.updateUserEmail(uid, email)
        sincronizarCampoEspecifico(uid, "email", email)
    }

    /**
     * Actualiza el nombre del usuario
     */
    suspend fun updateUserDisplayName(uid: String, displayName: String) =
        withContext(Dispatchers.IO) {
            userDao.updateUserDisplayName(uid, displayName)
            sincronizarCampoEspecifico(uid, "displayName", displayName)
        }

    /**
     * Actualiza la foto del usuario
     */
    suspend fun updateUserPhotoUrl(uid: String, photoUrl: String) = withContext(Dispatchers.IO) {
        userDao.updateUserPhotoUrl(uid, photoUrl)
        sincronizarCampoEspecifico(uid, "photoUrl", photoUrl)
    }

    /**
     * Busca usuario por email
     */
    suspend fun getUserByEmail(email: String): UserEntity? = withContext(Dispatchers.IO) {
        userDao.getUserByEmail(email)
    }

    /**
     * Obtiene todos los usuarios Premium
     */
    suspend fun getAllPremiumUsers(): List<UserEntity> = withContext(Dispatchers.IO) {
        userDao.getAllPremiumUsers()
    }

    /**
     * Obtiene todos los usuarios Free
     */
    suspend fun getAllFreeUsers(): List<UserEntity> = withContext(Dispatchers.IO) {
        userDao.getAllFreeUsers()
    }

    /**
     * Sincroniza un usuario específico
     */
    suspend fun sincronizar(userId: String) = withContext(Dispatchers.IO) {
        val user = userDao.getUserByIdSync(userId) ?: return@withContext
        sincronizarUsuarioConFirebase(user)
    }

    // ========== MÉTODOS DE SINCRONIZACIÓN V10 ==========

    /**
     * Sincroniza usuario completo con Firebase
     */
    private fun sincronizarUsuarioConFirebase(user: UserEntity) {
        try {
            val datos = mapOf(
                "uid" to user.uid,
                "email" to user.email,
                "displayName" to user.displayName,
                "photoUrl" to user.photoUrl,
                "esPremium" to user.esPremium,
                "version" to user.version,
                "lastModified" to user.lastModified,
                "fechaCreacion" to user.fechaCreacion,
                "fechaUltimaSync" to dateFormat.format(Date()),
                "activo" to user.activo
            )

            val docRef = firestore.collection("usuarios")
                .document(user.uid)

            docRef.set(datos)
                .addOnSuccessListener {
                    repositoryScope.launch {
                        userDao.markUserSyncSuccessful(user.uid, user.version + 1)
                        userDao.updateFechaUltimaSync(user.uid, dateFormat.format(Date()))
                    }
                }
                .addOnFailureListener {
                    repositoryScope.launch {
                        // El usuario queda marcado como no sincronizado hasta próximo intento
                    }
                }

        } catch (e: Exception) {
            // Error en sincronización, se reintentará cuando haya conexión
        }
    }

    /**
     * Sincroniza un campo específico del usuario
     */
    private suspend fun sincronizarCampoEspecifico(userId: String, campo: String, valor: Any) {
        try {
            val datos = mapOf(
                campo to valor,
                "lastModified" to System.currentTimeMillis(),
                "fechaUltimaSync" to dateFormat.format(Date())
            )

            firestore.collection("usuarios")
                .document(userId)
                .update(datos)
                .await()

            // Marcar como sincronizado
            userDao.markUserSyncSuccessful(userId, userDao.getUserVersion(userId) ?: 1L + 1)

        } catch (e: Exception) {
            // El campo queda marcado como no sincronizado
        }
    }

    // ========== MÉTODOS AUXILIARES ==========

    /**
     * Convierte datos de Firebase a UserEntity V10
     */
    private fun mapFirebaseToUserEntity(userId: String, data: Map<String, Any>): UserEntity {
        return UserEntity(
            uid = userId,
            email = data["email"] as? String ?: "",
            displayName = data["displayName"] as? String ?: "",
            photoUrl = data["photoUrl"] as? String ?: "",
            esPremium = data["esPremium"] as? Boolean ?: false,
            version = data["version"] as? Long ?: 1L,
            lastModified = data["lastModified"] as? Long ?: System.currentTimeMillis(),
            sincronizadoFirebase = true, // Viene de Firebase, está sincronizado
            fechaCreacion = data["fechaCreacion"] as? Long ?: System.currentTimeMillis(),
            fechaUltimaSync = dateFormat.format(Date()),
            activo = data["activo"] as? Boolean ?: true
        )
    }

    // ========== MÉTODOS OBSOLETOS V10 (compatibilidad) ==========

    @Deprecated(
        "Usar getOrCreateUser()",
        ReplaceWith("getOrCreateUser(userId, \"\", \"\", \"\", false)")
    )
    suspend fun loadUserData(userId: String): UserEntity? {
        return getOrCreateUser(userId, "", "", "", false)
    }

    @Deprecated(
        "Sistema multiusuario eliminado en V10",
        ReplaceWith("updateUserPremium(userId, premium)")
    )
    suspend fun updateUserPlan(userId: String, planUsuario: String, empresaId: String? = null) {
        updateUserPremium(userId, planUsuario == "PREMIUM")
    }

    @Deprecated(
        "Sistema multiusuario eliminado en V10",
        ReplaceWith("updateUserPremium(userId, true)")
    )
    suspend fun createCompany(userId: String, companyName: String, companyEmail: String): String {
        updateUserPremium(userId, true)
        return "empresa_${System.currentTimeMillis()}" // ID dummy para compatibilidad
    }

    @Deprecated(
        "Sistema multiusuario eliminado en V10",
        ReplaceWith("updateUserPremium(userId, true)")
    )
    suspend fun updateUserType(userId: String, tipoUsuario: String) {
        // En V10, solo distinguimos Premium/Free
        updateUserPremium(userId, tipoUsuario != "FREE")
    }

    @Deprecated("Sistema multiusuario eliminado en V10", ReplaceWith("false"))
    suspend fun inviteUserToCompany(
        email: String,
        empresaId: String,
        tipoUsuario: String
    ): Boolean {
        return false // No soportado en V10
    }

    @Deprecated(
        "Configuración personal eliminada en V10 - ahora global",
        ReplaceWith("ConfiguracionRepository.updateIdioma()")
    )
    suspend fun updateUserIdioma(userId: String, idioma: String) {
        // No-op en V10
    }

    @Deprecated(
        "Configuración personal eliminada en V10 - ahora global",
        ReplaceWith("ConfiguracionRepository.updateFuente()")
    )
    suspend fun updateUserFuente(userId: String, fuente: String) {
        // No-op en V10
    }

    @Deprecated(
        "Configuración personal eliminada en V10 - ahora global",
        ReplaceWith("ConfiguracionRepository.updateTemaOscuro()")
    )
    suspend fun updateUserModoOscuro(userId: String, modoOscuro: Boolean) {
        // No-op en V10
    }

    @Deprecated(
        "Configuración personal eliminada en V10 - ahora global",
        ReplaceWith("ConfiguracionRepository métodos individuales")
    )
    suspend fun updateUserConfiguration(
        userId: String,
        idioma: String,
        fuente: String,
        modoOscuro: Boolean
    ) {
        // No-op en V10 - La configuración ahora es global
    }
    // ========== REEMPLAZA el método getHybridUserData() en UserRepository.kt ==========

    suspend fun getHybridUserData(uid: String): UserEntity? = withContext(Dispatchers.IO) {
        try {
            // 1. Verificar si hay datos pendientes de sincronizar en Room
            val roomUser = userDao.getUserByIdSync(uid)
            val hasPendingChanges = roomUser?.sincronizadoFirebase == false

            if (hasPendingChanges) {
                // ✅ HAY CAMBIOS PENDIENTES → Leer de Room (fuente de verdad)
                Log.d("UserRepository", "📱 Leyendo de ROOM (cambios pendientes): $uid")
                return@withContext roomUser
            } else {
                // ✅ NO HAY CAMBIOS PENDIENTES → Leer de Firebase (más actualizado)
                Log.d("UserRepository", "☁️ Leyendo de FIREBASE (sin cambios pendientes): $uid")

                if (connectivityObserver.isConnected.first()) {
                    try {
                        val firebaseDoc = firestore.collection("usuarios")
                            .document(uid)
                            .get()
                            .await()

                        if (firebaseDoc.exists()) {
                            val firebaseUser = mapFirebaseToUserEntity(uid, firebaseDoc.data!!)

                            // Actualizar Room con datos frescos de Firebase
                            userDao.insertOrUpdate(firebaseUser.copy(sincronizadoFirebase = true))

                            Log.d("UserRepository", "✅ Datos frescos de Firebase aplicados a Room")
                            return@withContext firebaseUser
                        }
                    } catch (e: Exception) {
                        Log.w(
                            "UserRepository",
                            "❌ Error leyendo Firebase, usando Room como fallback",
                            e
                        )
                    }
                }

                // Fallback: usar Room si Firebase falla o no hay conexión
                return@withContext roomUser ?: getOrCreateUser(uid, "", "", "", false)
            }

        } catch (e: Exception) {
            Log.e("UserRepository", "Error en estrategia híbrida", e)
            // En caso de error, devolver lo que tengamos en Room o crear usuario básico
            val fallbackUser = userDao.getUserByIdSync(uid)
            return@withContext fallbackUser ?: getOrCreateUser(uid, "", "", "", false)
        }
    }
    // En UserRepository.kt
    suspend fun updateUserProfile(userId: String, displayName: String, email: String) {
        try {
            userDao.updateUserProfile(userId, displayName, email)
            Log.d(TAG, "✅ Perfil actualizado en Room: $displayName, $email")
        } catch (e: Exception) {
            Log.e(TAG, "❌ Error actualizando perfil en Room", e)
        }
    }
    suspend fun updateUserProfileAndMarkDirty(userId: String, displayName: String, email: String) = withContext(Dispatchers.IO) {
        try {
            // 1. Actualizar los datos en Room
            userDao.updateUserProfile(userId, displayName, email)

            // 2. ✅ CLAVE: Marcar como NO SINCRONIZADO para que getHybridUserData use Room
            userDao.markUserNotSynced(userId)

            Log.d("UserRepository", "✅ Perfil actualizado y marcado como no sincronizado")
            Log.d("UserRepository", "   - displayName: $displayName")
            Log.d("UserRepository", "   - sincronizadoFirebase: false")

        } catch (e: Exception) {
            Log.e("UserRepository", "❌ Error actualizando perfil", e)
        }
    }
    suspend fun refreshUserData(uid: String) = withContext(Dispatchers.IO) {
        try {
            // Forzar lectura de Firebase y actualizar Room
            if (connectivityObserver.isConnected.first()) {
                val firebaseDoc = firestore.collection("usuarios")
                    .document(uid)
                    .get()
                    .await()

                if (firebaseDoc.exists()) {
                    val firebaseUser = mapFirebaseToUserEntity(uid, firebaseDoc.data!!)
                    userDao.insertOrUpdate(firebaseUser.copy(sincronizadoFirebase = true))
                    Log.d("UserRepository", "✅ Datos de usuario refrescados desde Firebase")
                }
            }
        } catch (e: Exception) {
            Log.w("UserRepository", "❌ Error refrescando datos de usuario", e)
        }
    }

    // Método auxiliar para obtener usuario actual (si no existe)
    suspend fun getCurrentUser(): UserEntity? = withContext(Dispatchers.IO) {
        currentUser.value
    }
}

package es.nuskysoftware.cajamercadillos.ui.components

import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import com.github.skydoves.colorpicker.compose.AlphaSlider
import com.github.skydoves.colorpicker.compose.BrightnessSlider
import com.github.skydoves.colorpicker.compose.HsvColorPicker
import com.github.skydoves.colorpicker.compose.rememberColorPickerController

/**
 * DialogSelectorColor:
 * Diálogo reutilizable con selector de color basado en Skydoves.
 * Incluye:
 *  - HsvColorPicker (selector principal)
 *  - Sliders de brillo y opacidad
 *  - Botones Aceptar / Cancelar
 */
@Composable
fun DialogSelectorColor(
    onColorElegido: (Color) -> Unit,
    onCancelar: () -> Unit
) {
    val controller = rememberColorPickerController()

    AlertDialog(
        onDismissRequest = { onCancelar() },
        confirmButton = {
            TextButton(onClick = {
                onColorElegido(controller.selectedColor.value)
            }) {
                Text("Aceptar", color = Color.Black)
            }
        },
        dismissButton = {
            TextButton(onClick = onCancelar) {
                Text("Cancelar", color = Color.Black)
            }
        },
        title = { Text("Selecciona un color") },
        text = {
            Column(horizontalAlignment = Alignment.CenterHorizontally) {
                // Selector principal
                HsvColorPicker(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(200.dp)
                        .padding(8.dp),
                    controller = controller,
                    onColorChanged = {}
                )
                // Control de transparencia
                AlphaSlider(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(8.dp),
                    controller = controller
                )
                // Control de brillo
                BrightnessSlider(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(8.dp),
                    controller = controller
                )
            }
        }
    )
}


// MenuHamburguesa.kt V10 - SIMPLIFICADO PARA SISTEMA MONOUSUARIO
package es.nuskysoftware.marketsales.ui.components

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import es.nuskysoftware.marketsales.R
import es.nuskysoftware.marketsales.ui.viewmodel.AuthViewModel
import es.nuskysoftware.marketsales.ui.viewmodel.AuthViewModelFactory
import es.nuskysoftware.marketsales.utils.ConfigurationManager
import es.nuskysoftware.marketsales.utils.StringResourceManager
import kotlinx.coroutines.launch

@Composable
fun MenuHamburguesa(
    navController: NavController,
    drawerState: DrawerState
) {
    val scope = rememberCoroutineScope()
    val context = LocalContext.current

    // AuthViewModel para detectar estado de usuario
    val authViewModel: AuthViewModel = viewModel(factory = AuthViewModelFactory(context))
    val currentUser by authViewModel.currentUser.collectAsState()

    // Estados V10 simplificados
    val currentLanguage by ConfigurationManager.idioma.collectAsState()
    val esPremium by ConfigurationManager.esPremium.collectAsState()
    val isAuthenticated by ConfigurationManager.isAuthenticated.collectAsState()
    val estaAutenticado by ConfigurationManager.isAuthenticated.collectAsState()
    val usuarioEmail by ConfigurationManager.usuarioEmail.collectAsState()
    val displayName by ConfigurationManager.displayName.collectAsState()

    // Versión V10
    val versionText = if (esPremium) "Premium V10.0" else "Free V10.0"

    ModalDrawerSheet(
        modifier = Modifier.width(280.dp),
        drawerContainerColor = MaterialTheme.colorScheme.surface
    ) {
        // Header del menú V10
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .height(120.dp)
                .background(MaterialTheme.colorScheme.primary),
            contentAlignment = Alignment.CenterStart
        ) {
            Column(
                modifier = Modifier.padding(16.dp)
            ) {
                Text(
                    text = StringResourceManager.getString("app_name", currentLanguage),
                    fontSize = 24.sp,
                    fontWeight = FontWeight.Bold,
                    color = MaterialTheme.colorScheme.onPrimary
                )

                Text(
                    text = versionText,
                    fontSize = 14.sp,
                    color = MaterialTheme.colorScheme.onPrimary.copy(alpha = 0.8f)
                )

                // Información del usuario V10
                if (isAuthenticated && currentUser != null) {
                    Text(
                        text = "👤 ${usuarioEmail ?: displayName ?: "Usuario"}",
                        fontSize = 12.sp,
                        color = MaterialTheme.colorScheme.onPrimary.copy(alpha = 0.7f)
                    )
                } else {
                    Text(
                        text = "👤 Usuario Invitado",
                        fontSize = 12.sp,
                        color = MaterialTheme.colorScheme.onPrimary.copy(alpha = 0.7f)
                    )
                }
            }
        }

        Spacer(modifier = Modifier.height(8.dp))

        // Opciones del menú
        LazyColumn {
            // Opciones principales
            item {
                MenuOption(
                    iconRes = R.drawable.ic_store,
                    title = StringResourceManager.getString("mercadillos", currentLanguage),
                    onClick = {
                        scope.launch { drawerState.close() }
                        navController.navigate("mercadillos") {
                            popUpTo("mercadillos") { inclusive = true }
                        }
                    }
                )
            }

            item {
                MenuOption(
                    iconRes = R.drawable.ic_list,
                    title = StringResourceManager.getString("articulos", currentLanguage),
                    onClick = {
                        scope.launch { drawerState.close() }
                        navController.navigate("articulos")
                    }
                )
            }

            item {
                MenuOption(
                    iconRes = R.drawable.ic_category,
                    title = StringResourceManager.getString("categorias", currentLanguage),
                    onClick = {
                        scope.launch { drawerState.close() }
                        navController.navigate("categorias")
                    }
                )
            }

            item {
                MenuOption(
                    iconRes = R.drawable.ic_inventory,
                    title = StringResourceManager.getString("inventario", currentLanguage),
                    onClick = {
                        scope.launch { drawerState.close() }
                        navController.navigate("inventario")
                    }
                )
            }

            item {
                MenuOption(
                    iconRes = R.drawable.ic_list,
                    title = StringResourceManager.getString("listados", currentLanguage),
                    onClick = {
                        scope.launch { drawerState.close() }
                        navController.navigate("listados")
                    }
                )
            }

            item {
                HorizontalDivider(
                    modifier = Modifier.padding(vertical = 8.dp),
                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.2f)
                )
            }

            // Perfil (solo para usuarios autenticados)
           // if (isAuthenticated && currentUser != null) {
            if (estaAutenticado ) {
                item {
                    MenuOption(
                        iconRes = R.drawable.ic_account,
                        title = StringResourceManager.getString("perfil", currentLanguage),
                        onClick = {
                            scope.launch { drawerState.close() }
                            navController.navigate("perfil")
                        }
                    )
                }
            }

            // Configuración
            item {
                MenuOption(
                    iconRes = R.drawable.ic_settings,
                    title = StringResourceManager.getString("configuracion", currentLanguage),
                    onClick = {
                        scope.launch { drawerState.close() }
                        navController.navigate("configuracion")
                    }
                )
            }

            // Login/Logout condicional V10
            item {
                //if (isAuthenticated && currentUser != null) {
                if (estaAutenticado ) {
                    // Usuario autenticado - mostrar LOGOUT
                    MenuOption(
                        iconRes = R.drawable.ic_logout,
                        title = StringResourceManager.getString("cerrar_sesion", currentLanguage),
                        onClick = {
                            scope.launch {
                                drawerState.close()
                                authViewModel.logout()
                            }
                        }
                    )
                } else {
                    // Usuario NO autenticado - mostrar LOGIN
                    MenuOption(
                        iconRes = R.drawable.ic_login,
                        title = StringResourceManager.getString("iniciar_sesion", currentLanguage),
                        onClick = {
                            scope.launch { drawerState.close() }
                            navController.navigate("login")
                        }
                    )
                }
            }

            // Salir app
            item {
                MenuOption(
                    iconRes = R.drawable.ic_exit,
                    title = StringResourceManager.getString("salir", currentLanguage),
                    onClick = {
                        scope.launch { drawerState.close() }
                        (context as? androidx.activity.ComponentActivity)?.finishAffinity()
                    }
                )
            }
        }
    }
}

@Composable
private fun MenuOption(
    iconRes: Int,
    title: String,
    onClick: () -> Unit
) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .clickable { onClick() }
            .padding(horizontal = 16.dp, vertical = 12.dp),
        verticalAlignment = Alignment.CenterVertically
    ) {
        Icon(
            painter = painterResource(id = iconRes),
            contentDescription = title,
            tint = MaterialTheme.colorScheme.onSurface,
            modifier = Modifier.size(24.dp)
        )

        Spacer(modifier = Modifier.width(16.dp))

        Text(
            text = title,
            fontSize = 16.sp,
            color = MaterialTheme.colorScheme.onSurface,
            fontWeight = FontWeight.Medium
        )
    }
}


// app/src/main/java/es/nuskysoftware/marketsales/ui/pantallas/PantallaArticulos.kt
package es.nuskysoftware.marketsales.ui.pantallas

import androidx.compose.animation.AnimatedVisibility
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.toArgb
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import com.github.skydoves.colorpicker.compose.AlphaSlider
import com.github.skydoves.colorpicker.compose.BrightnessSlider
import com.github.skydoves.colorpicker.compose.HsvColorPicker
import com.github.skydoves.colorpicker.compose.rememberColorPickerController
import es.nuskysoftware.marketsales.R
import es.nuskysoftware.marketsales.data.local.entity.ArticuloEntity
import es.nuskysoftware.marketsales.ui.viewmodel.ArticuloViewModel
import es.nuskysoftware.marketsales.ui.viewmodel.ArticuloViewModelFactory
import es.nuskysoftware.marketsales.ui.viewmodel.CategoriaViewModel
import es.nuskysoftware.marketsales.ui.viewmodel.CategoriaViewModelFactory
import es.nuskysoftware.marketsales.utils.ConfigurationManager
import es.nuskysoftware.marketsales.utils.FooterMarca
import es.nuskysoftware.marketsales.utils.StringResourceManager
import es.nuskysoftware.marketsales.utils.generarColorAleatorioPastel
import kotlinx.coroutines.launch

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun PantallaArticulos(
    navController: NavController? = null
) {
    val context = LocalContext.current
    val scope = rememberCoroutineScope()

    // ViewModels con factory
    val articuloViewModel: ArticuloViewModel = viewModel(
        factory = ArticuloViewModelFactory(context)
    )
    val categoriaViewModel: CategoriaViewModel = viewModel(
        factory = CategoriaViewModelFactory(context)
    )

    // Estados de configuración
    val currentLanguage by ConfigurationManager.idioma.collectAsState()
    val esPremium by ConfigurationManager.esPremium.collectAsState()

    // Estados de los ViewModels
    val articulos by articuloViewModel.articulos.collectAsState()
    val categorias by categoriaViewModel.categorias.collectAsState()
    val articuloUiState by articuloViewModel.uiState.collectAsState()
    val tieneArticulos by articuloViewModel.tieneArticulos.collectAsState()

    // Estados locales del formulario
    var mostrarFormulario by remember { mutableStateOf(false) }
    var nombreArticulo by remember { mutableStateOf("") }
    var categoriaSeleccionada by remember { mutableStateOf("") }
    var precioVenta by remember { mutableStateOf("") }
    var precioCoste by remember { mutableStateOf("") }
    var stock by remember { mutableStateOf("") }
    var controlarStock by remember { mutableStateOf(false) }
    var controlarCoste by remember { mutableStateOf(false) }
    var favorito by remember { mutableStateOf(false) }
    var modoEdicion by remember { mutableStateOf<ArticuloEntity?>(null) }

    // Estados de diálogos
    var mostrarDialogoEliminar by remember { mutableStateOf(false) }
    var articuloAEliminar by remember { mutableStateOf<ArticuloEntity?>(null) }
    var mostrarSelectorCategoria by remember { mutableStateOf(false) }

    // Estados para nueva categoría
    var mostrarDialogoNuevaCategoria by remember { mutableStateOf(false) }
    var nombreNuevaCategoria by remember { mutableStateOf("") }
    var colorNuevaCategoria by remember { mutableStateOf(Color(0xFFD1C4E9)) }
    var mostrarColorPicker by remember { mutableStateOf(false) }

    val snackbarHostState = remember { SnackbarHostState() }

    // Función para limpiar formulario
    fun limpiarFormulario() {
        nombreArticulo = ""
        categoriaSeleccionada = ""
        precioVenta = ""
        precioCoste = ""
        stock = ""
        controlarStock = false
        controlarCoste = false
        favorito = false
        modoEdicion = null
    }

    // Manejar mensajes del ViewModel
    LaunchedEffect(articuloUiState.message) {
        articuloUiState.message?.let { message ->
            snackbarHostState.showSnackbar(message)
            articuloViewModel.limpiarMensaje()
        }
    }

    LaunchedEffect(articuloUiState.error) {
        articuloUiState.error?.let { error ->
            snackbarHostState.showSnackbar(error)
            articuloViewModel.limpiarError()
        }
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = {
                    Text(
                        StringResourceManager.getString("articulos", currentLanguage),
                        fontWeight = FontWeight.Bold
                    )
                },
                navigationIcon = {
                    IconButton(onClick = { navController?.popBackStack() }) {
                        Icon(
                            painter = painterResource(id = R.drawable.ic_arrow_left),
                            contentDescription = StringResourceManager.getString("volver", currentLanguage)
                        )
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primary,
                    titleContentColor = MaterialTheme.colorScheme.onPrimary,
                    navigationIconContentColor = MaterialTheme.colorScheme.onPrimary
                )
            )
        },
        snackbarHost = { SnackbarHost(snackbarHostState) },
        floatingActionButton = {
            if (!mostrarFormulario) {
                FloatingActionButton(
                    onClick = {
                        limpiarFormulario()
                        mostrarFormulario = true
                    },
                    shape = CircleShape,
                    containerColor = MaterialTheme.colorScheme.primary,
                    contentColor = MaterialTheme.colorScheme.onPrimary
                ) {
                    Icon(
                        imageVector = Icons.Default.Add,
                        contentDescription = StringResourceManager.getString("add_articulo", currentLanguage)
                    )
                }
            }
        }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
        ) {
            // ========== FORMULARIO DESLIZANTE ==========
            AnimatedVisibility(visible = mostrarFormulario) {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp),
                    elevation = CardDefaults.cardElevation(defaultElevation = 8.dp),
                    colors = CardDefaults.cardColors(
                        containerColor = MaterialTheme.colorScheme.secondaryContainer
                    ),
                    shape = RoundedCornerShape(16.dp)
                ) {
                    Column(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(20.dp)
                            .verticalScroll(rememberScrollState())
                    ) {
                        Text(
                            text = if (modoEdicion == null)
                                StringResourceManager.getString("nuevo_articulo", currentLanguage)
                            else
                                StringResourceManager.getString("editar_articulo", currentLanguage),
                            style = MaterialTheme.typography.titleMedium,
                            fontWeight = FontWeight.Bold,
                            color = MaterialTheme.colorScheme.onSecondaryContainer
                        )

                        Spacer(modifier = Modifier.height(16.dp))

                        // Campo nombre
                        OutlinedTextField(
                            value = nombreArticulo,
                            onValueChange = { nombreArticulo = it },
                            label = { Text(StringResourceManager.getString("nombre", currentLanguage)) },
                            modifier = Modifier.fillMaxWidth(),
                            isError = nombreArticulo.isNotEmpty() && articuloViewModel.validarNombreArticulo(nombreArticulo) != null,
                            supportingText = {
                                articuloViewModel.validarNombreArticulo(nombreArticulo)?.let { error ->
                                    Text(
                                        text = error,
                                        color = MaterialTheme.colorScheme.error
                                    )
                                }
                            },
                            singleLine = true
                        )

                        Spacer(modifier = Modifier.height(12.dp))

                        // ========== SELECTOR DE CATEGORÍA MEJORADO ==========
                        OutlinedTextField(
                            value = categorias.find { it.idCategoria == categoriaSeleccionada }?.nombre ?: "",
                            onValueChange = { },
                            label = { Text(StringResourceManager.getString("categoria", currentLanguage)) },
                            modifier = Modifier.fillMaxWidth(),
                            readOnly = true,
                            trailingIcon = {
                                IconButton(onClick = { mostrarSelectorCategoria = true }) {
                                    Icon(
                                        painter = painterResource(id = R.drawable.ic_arrow_down),
                                        contentDescription = "Seleccionar categoría"
                                    )
                                }
                            }
                        )

                        Spacer(modifier = Modifier.height(12.dp))

                        // Precio de venta
                        OutlinedTextField(
                            value = precioVenta,
                            onValueChange = { precioVenta = it },
                            label = { Text(StringResourceManager.getString("precio_venta", currentLanguage)) },
                            modifier = Modifier.fillMaxWidth(),
                            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Decimal),
                            isError = precioVenta.isNotEmpty() && precioVenta.toDoubleOrNull()?.let {
                                articuloViewModel.validarPrecioVenta(it)
                            } != null,
                            supportingText = {
                                precioVenta.toDoubleOrNull()?.let { precio ->
                                    articuloViewModel.validarPrecioVenta(precio)?.let { error ->
                                        Text(
                                            text = error,
                                            color = MaterialTheme.colorScheme.error
                                        )
                                    }
                                }
                            },
                            singleLine = true
                        )

                        Spacer(modifier = Modifier.height(12.dp))

                        // ========== CAMPOS PREMIUM CON RESTRICCIONES ==========

                        // Control de coste
                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Checkbox(
                                checked = controlarCoste,
                                onCheckedChange = {
                                    if (esPremium) {
                                        controlarCoste = it
                                    }
                                },
                                enabled = esPremium
                            )
                            Column(modifier = Modifier.weight(1f)) {
                                Text(
                                    text = StringResourceManager.getString("controlar_coste", currentLanguage),
                                    color = if (esPremium) MaterialTheme.colorScheme.onSurface else MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f)
                                )
                                if (!esPremium) {
                                    Text(
                                        text = StringResourceManager.getString("solo_premium_coste", currentLanguage),
                                        style = MaterialTheme.typography.bodySmall,
                                        color = MaterialTheme.colorScheme.error.copy(alpha = 0.7f)
                                    )
                                }
                            }
                        }

                        if (controlarCoste && esPremium) {
                            Spacer(modifier = Modifier.height(8.dp))
                            OutlinedTextField(
                                value = precioCoste,
                                onValueChange = { precioCoste = it },
                                label = { Text(StringResourceManager.getString("precio_coste", currentLanguage)) },
                                modifier = Modifier.fillMaxWidth(),
                                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Decimal),
                                singleLine = true
                            )
                        }

                        Spacer(modifier = Modifier.height(12.dp))

                        // Control de stock
                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Checkbox(
                                checked = controlarStock,
                                onCheckedChange = {
                                    if (esPremium) {
                                        controlarStock = it
                                    }
                                },
                                enabled = esPremium
                            )
                            Column(modifier = Modifier.weight(1f)) {
                                Text(
                                    text = StringResourceManager.getString("controlar_stock", currentLanguage),
                                    color = if (esPremium) MaterialTheme.colorScheme.onSurface else MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f)
                                )
                                if (!esPremium) {
                                    Text(
                                        text = StringResourceManager.getString("solo_premium_stock", currentLanguage),
                                        style = MaterialTheme.typography.bodySmall,
                                        color = MaterialTheme.colorScheme.error.copy(alpha = 0.7f)
                                    )
                                }
                            }
                        }

                        if (controlarStock && esPremium) {
                            Spacer(modifier = Modifier.height(8.dp))
                            OutlinedTextField(
                                value = stock,
                                onValueChange = { stock = it },
                                label = { Text(StringResourceManager.getString("stock", currentLanguage)) },
                                modifier = Modifier.fillMaxWidth(),
                                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                                singleLine = true
                            )
                        }

                        Spacer(modifier = Modifier.height(12.dp))

                        // Favorito (disponible para todos)
                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Checkbox(
                                checked = favorito,
                                onCheckedChange = { favorito = it }
                            )
                            Text(
                                text = StringResourceManager.getString("marcar_favorito", currentLanguage),
                                modifier = Modifier.weight(1f)
                            )
                        }

                        Spacer(modifier = Modifier.height(20.dp))

                        // Botones
                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            horizontalArrangement = Arrangement.spacedBy(12.dp)
                        ) {
                            Button(
                                onClick = {
                                    scope.launch {
                                        val validacionNombre = articuloViewModel.validarNombreArticulo(nombreArticulo)
                                        if (validacionNombre != null) {
                                            snackbarHostState.showSnackbar(validacionNombre)
                                            return@launch
                                        }

                                        val precio = precioVenta.toDoubleOrNull()
                                        if (precio == null) {
                                            snackbarHostState.showSnackbar("Precio de venta inválido")
                                            return@launch
                                        }

                                        if (categoriaSeleccionada.isEmpty()) {
                                            snackbarHostState.showSnackbar("Selecciona una categoría")
                                            return@launch
                                        }

                                        if (modoEdicion == null) {
                                            // Crear nuevo artículo
                                            articuloViewModel.crearArticulo(
                                                nombre = nombreArticulo,
                                                idCategoria = categoriaSeleccionada,
                                                precioVenta = precio,
                                                precioCoste = if (controlarCoste && esPremium && precioCoste.isNotEmpty()) precioCoste.toDoubleOrNull() else null,
                                                stock = if (controlarStock && esPremium && stock.isNotEmpty()) stock.toIntOrNull() else null,
                                                controlarStock = controlarStock && esPremium,
                                                controlarCoste = controlarCoste && esPremium,
                                                favorito = favorito
                                            )
                                        } else {
                                            // Actualizar artículo existente
                                            val articuloActualizado = modoEdicion!!.copy(
                                                nombre = nombreArticulo,
                                                idCategoria = categoriaSeleccionada,
                                                precioVenta = precio,
                                                precioCoste = if (controlarCoste && esPremium && precioCoste.isNotEmpty()) precioCoste.toDoubleOrNull() else null,
                                                stock = if (controlarStock && esPremium && stock.isNotEmpty()) stock.toIntOrNull() else null,
                                                controlarStock = controlarStock && esPremium,
                                                controlarCoste = controlarCoste && esPremium,
                                                favorito = favorito
                                            )
                                            articuloViewModel.actualizarArticulo(articuloActualizado)
                                        }

                                        // Limpiar y cerrar formulario
                                        limpiarFormulario()
                                        mostrarFormulario = false
                                    }
                                },
                                enabled = !articuloUiState.loading && nombreArticulo.isNotBlank() && precioVenta.isNotBlank(),
                                modifier = Modifier.weight(1f)
                            ) {
                                if (articuloUiState.loading) {
                                    CircularProgressIndicator(
                                        modifier = Modifier.size(16.dp),
                                        strokeWidth = 2.dp,
                                        color = MaterialTheme.colorScheme.onPrimary
                                    )
                                } else {
                                    Text(StringResourceManager.getString("guardar", currentLanguage))
                                }
                            }

                            OutlinedButton(
                                onClick = {
                                    limpiarFormulario()
                                    mostrarFormulario = false
                                },
                                modifier = Modifier.weight(1f)
                            ) {
                                Text(StringResourceManager.getString("cancelar", currentLanguage))
                            }
                        }
                    }
                }
            }

            // ========== CONTENIDO PRINCIPAL ==========
            Box(
                modifier = Modifier
                    .weight(1f)
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp)
            ) {
                if (!tieneArticulos) {
                    // Estado vacío
                    Column(
                        modifier = Modifier.fillMaxSize(),
                        horizontalAlignment = Alignment.CenterHorizontally,
                        verticalArrangement = Arrangement.Center
                    ) {
                        Icon(
                            painter = painterResource(id = R.drawable.ic_list),
                            contentDescription = null,
                            modifier = Modifier.size(64.dp),
                            tint = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.4f)
                        )

                        Spacer(modifier = Modifier.height(16.dp))

                        Text(
                            text = StringResourceManager.getString("pulsa_crear_primer_articulo", currentLanguage),
                            style = MaterialTheme.typography.titleMedium,
                            color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f),
                            textAlign = TextAlign.Center
                        )
                    }
                } else {
                    // Lista de artículos en Cards
                    LazyColumn(
                        modifier = Modifier.fillMaxSize(),
                        verticalArrangement = Arrangement.spacedBy(8.dp),
                        contentPadding = PaddingValues(vertical = 8.dp)
                    ) {
                        items(articulos) { articulo ->
                            ArticuloCard(
                                articulo = articulo,
                                categorias = categorias,
                                esPremium = esPremium,
                                onEditar = {
                                    // Cargar datos en el formulario
                                    modoEdicion = articulo
                                    nombreArticulo = articulo.nombre
                                    categoriaSeleccionada = articulo.idCategoria
                                    precioVenta = articulo.precioVenta.toString()
                                    precioCoste = articulo.precioCoste?.toString() ?: ""
                                    stock = articulo.stock?.toString() ?: ""
                                    controlarStock = articulo.controlarStock
                                    controlarCoste = articulo.controlarCoste
                                    favorito = articulo.favorito
                                    mostrarFormulario = true
                                },
                                onEliminar = {
                                    articuloAEliminar = articulo
                                    mostrarDialogoEliminar = true
                                }
                            )
                        }
                    }
                }
            }

            // ========== FOOTER ==========
            FooterMarca()
        }
    }

    // ========== DIÁLOGOS ==========

    // ========== SELECTOR DE CATEGORÍA MEJORADO ==========
    if (mostrarSelectorCategoria) {
        AlertDialog(
            onDismissRequest = { mostrarSelectorCategoria = false },
            title = { Text(StringResourceManager.getString("seleccionar_categoria", currentLanguage)) },
            text = {
                LazyColumn {
                    // Opción para crear nueva categoría
                    item {
                        Card(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(vertical = 4.dp)
                                .clickable {
                                    mostrarSelectorCategoria = false
                                    mostrarDialogoNuevaCategoria = true
                                },
                            colors = CardDefaults.cardColors(
                                containerColor = MaterialTheme.colorScheme.primaryContainer
                            )
                        ) {
                            Row(
                                modifier = Modifier
                                    .fillMaxWidth()
                                    .padding(16.dp),
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Icon(
                                    imageVector = Icons.Default.Add,
                                    contentDescription = "Crear categoría",
                                    tint = MaterialTheme.colorScheme.onPrimaryContainer
                                )
                                Spacer(modifier = Modifier.width(12.dp))
                                Text(
                                    text = StringResourceManager.getString("crear_nueva_categoria", currentLanguage),
                                    color = MaterialTheme.colorScheme.onPrimaryContainer,
                                    fontWeight = FontWeight.Medium
                                )
                            }
                        }
                    }

                    // Lista de categorías existentes
                    items(categorias) { categoria ->
                        TextButton(
                            onClick = {
                                categoriaSeleccionada = categoria.idCategoria
                                mostrarSelectorCategoria = false
                            },
                            modifier = Modifier.fillMaxWidth()
                        ) {
                            Row(
                                verticalAlignment = Alignment.CenterVertically,
                                modifier = Modifier.fillMaxWidth()
                            ) {
                                // Círculo de color
                                Box(
                                    modifier = Modifier
                                        .size(16.dp)
                                        .clip(CircleShape)
                                        .background(Color(android.graphics.Color.parseColor(categoria.colorHex)))
                                )
                                Spacer(modifier = Modifier.width(12.dp))
                                Text(categoria.nombre)
                            }
                        }
                    }

                    if (categorias.isEmpty()) {
                        item {
                            Text(
                                text = StringResourceManager.getString("sin_categorias", currentLanguage),
                                color = MaterialTheme.colorScheme.onSurfaceVariant,
                                modifier = Modifier.padding(16.dp)
                            )
                        }
                    }
                }
            },
            confirmButton = {
                TextButton(onClick = { mostrarSelectorCategoria = false }) {
                    Text(StringResourceManager.getString("cancelar", currentLanguage))
                }
            }
        )
    }

    // ========== DIÁLOGO NUEVA CATEGORÍA ==========
    if (mostrarDialogoNuevaCategoria) {
        AlertDialog(
            onDismissRequest = {
                mostrarDialogoNuevaCategoria = false
                nombreNuevaCategoria = ""
                colorNuevaCategoria = Color(0xFFD1C4E9)
            },
            title = { Text(StringResourceManager.getString("nueva_categoria", currentLanguage)) },
            text = {
                Column {
                    OutlinedTextField(
                        value = nombreNuevaCategoria,
                        onValueChange = { nombreNuevaCategoria = it },
                        label = { Text(StringResourceManager.getString("nombre", currentLanguage)) },
                        modifier = Modifier.fillMaxWidth(),
                        singleLine = true
                    )

                    Spacer(modifier = Modifier.height(16.dp))

                    // Selector de color
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .clickable { mostrarColorPicker = true }
                            .padding(vertical = 8.dp),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text(
                            text = StringResourceManager.getString("seleccionar_color", currentLanguage),
                            modifier = Modifier.weight(1f)
                        )
                        Spacer(modifier = Modifier.width(16.dp))
                        Box(
                            modifier = Modifier
                                .size(32.dp)
                                .clip(CircleShape)
                                .background(colorNuevaCategoria)
                        )
                    }
                }
            },
            confirmButton = {
                TextButton(
                    onClick = {
                        if (nombreNuevaCategoria.isNotBlank()) {
                            scope.launch {
                                val colorFinal = if (colorNuevaCategoria == Color(0xFFD1C4E9)) {
                                    generarColorAleatorioPastel()
                                } else colorNuevaCategoria

                                val colorHex = String.format("#%06X", 0xFFFFFF and colorFinal.toArgb())

                                categoriaViewModel.crearCategoria(nombreNuevaCategoria, colorHex)

                                // Limpiar y cerrar
                                nombreNuevaCategoria = ""
                                colorNuevaCategoria = Color(0xFFD1C4E9)
                                mostrarDialogoNuevaCategoria = false
                            }
                        }
                    },
                    enabled = nombreNuevaCategoria.isNotBlank()
                ) {
                    Text(StringResourceManager.getString("crear", currentLanguage))
                }
            },
            dismissButton = {
                TextButton(onClick = {
                    mostrarDialogoNuevaCategoria = false
                    nombreNuevaCategoria = ""
                    colorNuevaCategoria = Color(0xFFD1C4E9)
                }) {
                    Text(StringResourceManager.getString("cancelar", currentLanguage))
                }
            }
        )
    }

    // ========== SELECTOR DE COLOR ==========
    if (mostrarColorPicker) {
        ColorPickerDialog(
            onColorElegido = { color ->
                colorNuevaCategoria = color
                mostrarColorPicker = false
            },
            onCancelar = { mostrarColorPicker = false }
        )
    }

    // Confirmación eliminar
    if (mostrarDialogoEliminar && articuloAEliminar != null) {
        AlertDialog(
            onDismissRequest = {
                mostrarDialogoEliminar = false
                articuloAEliminar = null
            },
            title = {
                Text(StringResourceManager.getString("eliminar_articulo", currentLanguage))
            },
            text = {
                Text(
                    StringResourceManager.getString("confirmar_eliminar_articulo", currentLanguage)
                        .replace("{nombre}", articuloAEliminar!!.nombre)
                )
            },
            confirmButton = {
                Button(
                    onClick = {
                        articuloViewModel.eliminarArticulo(articuloAEliminar!!)
                        mostrarDialogoEliminar = false
                        articuloAEliminar = null
                    },
                    colors = ButtonDefaults.buttonColors(
                        containerColor = MaterialTheme.colorScheme.error
                    )
                ) {
                    Text(
                        StringResourceManager.getString("eliminar", currentLanguage),
                        color = MaterialTheme.colorScheme.onError
                    )
                }
            },
            dismissButton = {
                OutlinedButton(
                    onClick = {
                        mostrarDialogoEliminar = false
                        articuloAEliminar = null
                    }
                ) {
                    Text(StringResourceManager.getString("cancelar", currentLanguage))
                }
            }
        )
    }
}


@Composable
private fun ArticuloCard(
    articulo: ArticuloEntity,
    categorias: List<es.nuskysoftware.marketsales.data.local.entity.CategoriaEntity>,
    esPremium: Boolean,
    onEditar: () -> Unit,
    onEliminar: () -> Unit
) {
    val categoria = categorias.find { it.idCategoria == articulo.idCategoria }

    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surface
        ),
        shape = RoundedCornerShape(12.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Column(modifier = Modifier.weight(1f)) {
                // Nombre del artículo
                Text(
                    text = articulo.nombre,
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Medium,
                    maxLines = 1,
                    overflow = TextOverflow.Ellipsis
                )

                Spacer(modifier = Modifier.height(4.dp))

                // Categoría
                Text(
                    text = categoria?.nombre ?: "Sin categoría",
                    style = MaterialTheme.typography.bodySmall,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )

                // Precio de venta
                Text(
                    text = "Precio: ${articulo.precioVenta} €",
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.onSurface
                )

                // Información Premium
                if (esPremium) {
                    if (articulo.controlarStock && articulo.stock != null) {
                        Text(
                            text = "Stock: ${articulo.stock}",
                            style = MaterialTheme.typography.bodySmall,
                            color = MaterialTheme.colorScheme.onSurfaceVariant
                        )
                    }
                    if (articulo.controlarCoste && articulo.precioCoste != null) {
                        Text(
                            text = "Coste: ${articulo.precioCoste} €",
                            style = MaterialTheme.typography.bodySmall,
                            color = MaterialTheme.colorScheme.onSurfaceVariant
                        )
                    }
                }

                // Indicador favorito
                if (articulo.favorito) {
                    Text(
                        text = "⭐ Favorito",
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.primary
                    )
                }
            }

            // Botones de acción
            Row(
                horizontalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                IconButton(onClick = onEditar) {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_edit),
                        contentDescription = "Editar",
                        tint = MaterialTheme.colorScheme.primary
                    )
                }

                IconButton(onClick = onEliminar) {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_delete),
                        contentDescription = "Eliminar",
                        tint = MaterialTheme.colorScheme.error
                    )
                }
            }
        }
    }
}

// app/src/main/java/es/nuskysoftware/marketsales/ui/pantallas/PantallaCategorias.kt
package es.nuskysoftware.marketsales.ui.pantallas

import androidx.compose.animation.AnimatedVisibility
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.toArgb
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import com.github.skydoves.colorpicker.compose.AlphaSlider
import com.github.skydoves.colorpicker.compose.BrightnessSlider
import com.github.skydoves.colorpicker.compose.HsvColorPicker
import com.github.skydoves.colorpicker.compose.rememberColorPickerController
import es.nuskysoftware.marketsales.R
import es.nuskysoftware.marketsales.data.local.entity.CategoriaEntity
import es.nuskysoftware.marketsales.ui.viewmodel.CategoriaViewModel
import es.nuskysoftware.marketsales.ui.viewmodel.CategoriaViewModelFactory
import es.nuskysoftware.marketsales.utils.ConfigurationManager
import es.nuskysoftware.marketsales.utils.FooterMarca
import es.nuskysoftware.marketsales.utils.StringResourceManager
import es.nuskysoftware.marketsales.utils.generarColorAleatorioPastel
import kotlinx.coroutines.launch

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun PantallaCategorias(
    navController: NavController? = null
) {
    val context = LocalContext.current
    val scope = rememberCoroutineScope()

    // ViewModel con factory
    val categoriaViewModel: CategoriaViewModel = viewModel(
        factory = CategoriaViewModelFactory(context)
    )

    // Estados de configuración
    val currentLanguage by ConfigurationManager.idioma.collectAsState()

    // Estados del ViewModel
    val categorias by categoriaViewModel.categorias.collectAsState()
    val uiState by categoriaViewModel.uiState.collectAsState()
    val tieneCategorias by categoriaViewModel.tieneCategorias.collectAsState()

    // Estados locales
    var mostrarFormulario by remember { mutableStateOf(false) }
    var nombreCategoria by remember { mutableStateOf("") }
    var colorSeleccionado by remember { mutableStateOf(Color(0xFFD1C4E9)) }
    var modoEdicion by remember { mutableStateOf<CategoriaEntity?>(null) }

    var mostrarColorPicker by remember { mutableStateOf(false) }
    var mostrarDialogoEliminar by remember { mutableStateOf(false) }
    var categoriaAEliminar by remember { mutableStateOf<CategoriaEntity?>(null) }

    val snackbarHostState = remember { SnackbarHostState() }

    // Manejar mensajes del ViewModel
    LaunchedEffect(uiState.message) {
        uiState.message?.let { message ->
            snackbarHostState.showSnackbar(message)
            categoriaViewModel.limpiarMensaje()
        }
    }

    LaunchedEffect(uiState.error) {
        uiState.error?.let { error ->
            snackbarHostState.showSnackbar(error)
            categoriaViewModel.limpiarError()
        }
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = {
                    Text(
                        StringResourceManager.getString("categorias", currentLanguage),
                        fontWeight = FontWeight.Bold
                    )
                },
                navigationIcon = {
                    IconButton(onClick = { navController?.popBackStack() }) {
                        Icon(
                            painter = painterResource(id = R.drawable.ic_arrow_left),
                            contentDescription = StringResourceManager.getString("volver", currentLanguage)
                        )
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primary,
                    titleContentColor = MaterialTheme.colorScheme.onPrimary,
                    navigationIconContentColor = MaterialTheme.colorScheme.onPrimary
                )
            )
        },
        snackbarHost = { SnackbarHost(snackbarHostState) },
        floatingActionButton = {
            if (!mostrarFormulario) {
                FloatingActionButton(
                    onClick = {
                        mostrarFormulario = true
                        nombreCategoria = ""
                        colorSeleccionado = Color(0xFFD1C4E9)
                        modoEdicion = null
                    },
                    shape = CircleShape,
                    containerColor = MaterialTheme.colorScheme.primary,
                    contentColor = MaterialTheme.colorScheme.onPrimary
                ) {
                    Icon(
                        imageVector = Icons.Default.Add,
                        contentDescription = StringResourceManager.getString("add_categoria", currentLanguage)
                    )
                }
            }
        }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
        ) {
            // ========== FORMULARIO DESLIZANTE ==========
            AnimatedVisibility(visible = mostrarFormulario) {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp),
                    elevation = CardDefaults.cardElevation(defaultElevation = 8.dp),
                    colors = CardDefaults.cardColors(
                        containerColor = MaterialTheme.colorScheme.secondaryContainer
                    ),
                    shape = RoundedCornerShape(16.dp)
                ) {
                    Column(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(20.dp)
                    ) {
                        Text(
                            text = if (modoEdicion == null)
                                StringResourceManager.getString("nueva_categoria", currentLanguage)
                            else
                                StringResourceManager.getString("editar_categoria", currentLanguage),
                            style = MaterialTheme.typography.titleMedium,
                            fontWeight = FontWeight.Bold,
                            color = MaterialTheme.colorScheme.onSecondaryContainer
                        )

                        Spacer(modifier = Modifier.height(16.dp))

                        // Campo nombre
                        OutlinedTextField(
                            value = nombreCategoria,
                            onValueChange = { nombreCategoria = it },
                            label = { Text(StringResourceManager.getString("nombre", currentLanguage)) },
                            modifier = Modifier.fillMaxWidth(),
                            isError = nombreCategoria.isNotEmpty() && categoriaViewModel.validarNombreCategoria(nombreCategoria) != null,
                            supportingText = {
                                categoriaViewModel.validarNombreCategoria(nombreCategoria)?.let { error ->
                                    Text(
                                        text = error,
                                        color = MaterialTheme.colorScheme.error
                                    )
                                }
                            },
                            singleLine = true
                        )

                        Spacer(modifier = Modifier.height(16.dp))

                        // Selector de color
                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .clickable { mostrarColorPicker = true }
                                .padding(vertical = 8.dp),
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Text(
                                text = StringResourceManager.getString("seleccionar_color", currentLanguage),
                                style = MaterialTheme.typography.bodyLarge,
                                color = MaterialTheme.colorScheme.onSecondaryContainer,
                                modifier = Modifier.weight(1f)
                            )

                            Spacer(modifier = Modifier.width(16.dp))

                            Box(
                                modifier = Modifier
                                    .size(40.dp)
                                    .clip(CircleShape)
                                    .background(colorSeleccionado)
                            )
                        }

                        Spacer(modifier = Modifier.height(20.dp))

                        // Botones
                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            horizontalArrangement = Arrangement.spacedBy(12.dp)
                        ) {
                            Button(
                                onClick = {
                                    scope.launch {
                                        val validacionNombre = categoriaViewModel.validarNombreCategoria(nombreCategoria)
                                        if (validacionNombre != null) {
                                            snackbarHostState.showSnackbar(validacionNombre)
                                            return@launch
                                        }

                                        val colorFinal = if (colorSeleccionado == Color(0xFFD1C4E9)) {
                                            generarColorAleatorioPastel()
                                        } else colorSeleccionado

                                        val colorHex = String.format("#%06X", 0xFFFFFF and colorFinal.toArgb())

                                        if (modoEdicion == null) {
                                            categoriaViewModel.crearCategoria(nombreCategoria, colorHex)
                                        } else {
                                            val categoriaEditada = modoEdicion!!.copy(
                                                nombre = nombreCategoria,
                                                colorHex = colorHex
                                            )
                                            categoriaViewModel.actualizarCategoria(categoriaEditada)
                                        }

                                        // Limpiar formulario
                                        nombreCategoria = ""
                                        colorSeleccionado = Color(0xFFD1C4E9)
                                        modoEdicion = null
                                        mostrarFormulario = false
                                    }
                                },
                                enabled = !uiState.loading && nombreCategoria.isNotBlank(),
                                modifier = Modifier.weight(1f)
                            ) {
                                if (uiState.loading) {
                                    CircularProgressIndicator(
                                        modifier = Modifier.size(16.dp),
                                        strokeWidth = 2.dp,
                                        color = MaterialTheme.colorScheme.onPrimary
                                    )
                                } else {
                                    Text(StringResourceManager.getString("guardar", currentLanguage))
                                }
                            }

                            OutlinedButton(
                                onClick = {
                                    mostrarFormulario = false
                                    nombreCategoria = ""
                                    colorSeleccionado = Color(0xFFD1C4E9)
                                    modoEdicion = null
                                },
                                modifier = Modifier.weight(1f)
                            ) {
                                Text(StringResourceManager.getString("cancelar", currentLanguage))
                            }
                        }
                    }
                }
            }

            // ========== CONTENIDO PRINCIPAL ==========
            Box(
                modifier = Modifier
                    .weight(1f)
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp)
            ) {
                if (!tieneCategorias) {
                    // Estado vacío
                    Column(
                        modifier = Modifier.fillMaxSize(),
                        horizontalAlignment = Alignment.CenterHorizontally,
                        verticalArrangement = Arrangement.Center
                    ) {
                        Icon(
                            painter = painterResource(id = R.drawable.ic_category),
                            contentDescription = null,
                            modifier = Modifier.size(64.dp),
                            tint = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.4f)
                        )

                        Spacer(modifier = Modifier.height(16.dp))

                        Text(
                            text = StringResourceManager.getString("pulsa_crear_primera_categoria", currentLanguage),
                            style = MaterialTheme.typography.titleMedium,
                            color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f),
                            textAlign = TextAlign.Center
                        )
                    }
                } else {
                    // Lista de categorías en Cards
                    LazyColumn(
                        modifier = Modifier.fillMaxSize(),
                        verticalArrangement = Arrangement.spacedBy(8.dp),
                        contentPadding = PaddingValues(vertical = 8.dp)
                    ) {
                        items(categorias) { categoria ->
                            CategoriaCard(
                                categoria = categoria,
                                onEditar = {
                                    mostrarFormulario = true
                                    nombreCategoria = categoria.nombre
                                    colorSeleccionado = Color(android.graphics.Color.parseColor(categoria.colorHex))
                                    modoEdicion = categoria
                                },
                                onEliminar = {
                                    categoriaAEliminar = categoria
                                    mostrarDialogoEliminar = true
                                }
                            )
                        }
                    }
                }
            }

            // ========== FOOTER ==========
            FooterMarca()
        }
    }

    // ========== DIÁLOGOS ==========

    // Selector de color
    if (mostrarColorPicker) {
        ColorPickerDialog(
            onColorElegido = { color ->
                colorSeleccionado = color
                mostrarColorPicker = false
            },
            onCancelar = { mostrarColorPicker = false }
        )
    }

    // Confirmación eliminar
    if (mostrarDialogoEliminar && categoriaAEliminar != null) {
        AlertDialog(
            onDismissRequest = {
                mostrarDialogoEliminar = false
                categoriaAEliminar = null
            },
            title = {
                Text(StringResourceManager.getString("eliminar_categoria", currentLanguage))
            },
            text = {
                Text(
                    StringResourceManager.getString("confirmar_eliminar_categoria", currentLanguage)
                        .replace("{nombre}", categoriaAEliminar!!.nombre)
                )
            },
            confirmButton = {
                Button(
                    onClick = {
                        categoriaViewModel.eliminarCategoria(categoriaAEliminar!!)
                        mostrarDialogoEliminar = false
                        categoriaAEliminar = null
                    },
                    colors = ButtonDefaults.buttonColors(
                        containerColor = MaterialTheme.colorScheme.error
                    )
                ) {
                    Text(
                        StringResourceManager.getString("eliminar", currentLanguage),
                        color = MaterialTheme.colorScheme.onError
                    )
                }
            },
            dismissButton = {
                OutlinedButton(
                    onClick = {
                        mostrarDialogoEliminar = false
                        categoriaAEliminar = null
                    }
                ) {
                    Text(StringResourceManager.getString("cancelar", currentLanguage))
                }
            }
        )
    }
}

@Composable
private fun CategoriaCard(
    categoria: CategoriaEntity,
    onEditar: () -> Unit,
    onEliminar: () -> Unit
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surface
        ),
        shape = RoundedCornerShape(12.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                modifier = Modifier.weight(1f)
            ) {
                // Círculo de color
                Box(
                    modifier = Modifier
                        .size(24.dp)
                        .clip(CircleShape)
                        .background(Color(android.graphics.Color.parseColor(categoria.colorHex)))
                )

                Spacer(modifier = Modifier.width(16.dp))

                // Nombre
                Text(
                    text = categoria.nombre,
                    style = MaterialTheme.typography.bodyLarge,
                    fontWeight = FontWeight.Medium,
                    color = MaterialTheme.colorScheme.onSurface
                )
            }

            // Botones de acción
            Row(
                horizontalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                IconButton(onClick = onEditar) {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_edit),
                        contentDescription = "Editar",
                        tint = MaterialTheme.colorScheme.primary
                    )
                }

                IconButton(onClick = onEliminar) {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_delete),
                        contentDescription = "Eliminar",
                        tint = MaterialTheme.colorScheme.error
                    )
                }
            }
        }
    }
}

@Composable
fun ColorPickerDialog(
    onColorElegido: (Color) -> Unit,
    onCancelar: () -> Unit
) {
    val controller = rememberColorPickerController()

    AlertDialog(
        onDismissRequest = onCancelar,
        title = { Text("Seleccionar color") },
        text = {
            Column(horizontalAlignment = Alignment.CenterHorizontally) {
                // Selector principal
                HsvColorPicker(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(200.dp)
                        .padding(8.dp),
                    controller = controller,
                    onColorChanged = {}
                )

                // Control de transparencia
                AlphaSlider(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(8.dp),
                    controller = controller
                )

                // Control de brillo
                BrightnessSlider(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(8.dp),
                    controller = controller
                )
            }
        },
        confirmButton = {
            TextButton(onClick = {
                onColorElegido(controller.selectedColor.value)
            }) {
                Text("Aceptar", color = Color.Black) // ✅ NEGRO como solicitaste
            }
        },
        dismissButton = {
            TextButton(onClick = onCancelar) {
                Text("Cancelar", color = Color.Black) // ✅ NEGRO como solicitaste
            }
        }
    )
}

// PantallaConfiguracion.kt V10 - SIMPLIFICADO PARA SISTEMA MONOUSUARIO
package es.nuskysoftware.marketsales.ui.pantallas

import android.util.Log
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.runtime.rememberCoroutineScope
import androidx.navigation.NavController
import es.nuskysoftware.marketsales.R
import es.nuskysoftware.marketsales.data.repository.AuthRepository
import es.nuskysoftware.marketsales.utils.ConfigurationManager
import es.nuskysoftware.marketsales.utils.FooterMarca
import es.nuskysoftware.marketsales.utils.StringResourceManager
import kotlinx.coroutines.launch

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun PantallaConfiguracion(
    navController: NavController? = null
) {
    val context = LocalContext.current
    val authRepo = remember { AuthRepository(context) }
    val scope = rememberCoroutineScope()

//    // Estados V10 simplificados
//    val currentLanguage by ConfigurationManager.idioma.collectAsState()
//    val currentFont by ConfigurationManager.fuente.collectAsState()
//    val isDarkTheme by ConfigurationManager.temaOscuro.collectAsState()
//    val currentMoneda by ConfigurationManager.moneda.collectAsState()
//    val esPremium by ConfigurationManager.esPremium.collectAsState()
//    val usuarioEmail by ConfigurationManager.usuarioEmail.collectAsState()
//    val isAuthenticated by ConfigurationManager.isAuthenticated.collectAsState()

    // Estados V10 simplificados
    val currentLanguage by ConfigurationManager.idioma.collectAsState()
    val currentFont by ConfigurationManager.fuente.collectAsState()
    val isDarkTheme by ConfigurationManager.temaOscuro.collectAsState()
    val currentMoneda by ConfigurationManager.moneda.collectAsState()
    val esPremium by ConfigurationManager.esPremium.collectAsState()
    val usuarioEmail by ConfigurationManager.usuarioEmail.collectAsState()
    val isAuthenticated by ConfigurationManager.isAuthenticated.collectAsState()

    // Permisos V10 simplificados
    //val canChangeAdvanced = ConfigurationManager.canChangeConfiguration()
    val canChangeAdvanced = esPremium // En lugar de ConfigurationManager.canChangeConfiguration()

    Scaffold(
        topBar = {
            TopAppBar(
                title = {
                    Text(
                        StringResourceManager.getString("configuracion", currentLanguage),
                        fontWeight = FontWeight.Bold
                    )
                },
                navigationIcon = {
                    IconButton(onClick = { navController?.popBackStack() }) {
                        Icon(
                            imageVector = Icons.Default.ArrowBack,
                            contentDescription = "Volver"
                        )
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primary,
                    titleContentColor = MaterialTheme.colorScheme.onPrimary,
                    navigationIconContentColor = MaterialTheme.colorScheme.onPrimary
                )
            )
        }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
        ) {
            LazyColumn(
                modifier = Modifier
                    .weight(1f)
                    .fillMaxWidth()
                    .padding(16.dp),
                verticalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                // Información de cuenta V10
                item {
                    TarjetaInformacionCuenta(
                        email = usuarioEmail ?: if (isAuthenticated) "usuario@email.com" else "Usuario Invitado",
                        esPremium = esPremium,
                        isAuthenticated = isAuthenticated,
                        version = "V10.0",
                        language = currentLanguage
                    )
                }

                // Idioma (solo Premium)
                item {
                    OpcionConfiguracionV10(
                        iconRes = R.drawable.ic_language,
                        titulo = StringResourceManager.getString("idioma", currentLanguage),
                        valorActual = if (currentLanguage == "es") "Español" else "English",
                        opciones = listOf("es" to "Español", "en" to "English"),
                        habilitado = canChangeAdvanced,
                        onSeleccionar = { codigo ->
                            scope.launch {
                                authRepo.updateConfiguration(idioma = codigo)

                            }
                        }
                    )
                }

                // Fuente (solo Premium)
                item {
                    OpcionConfiguracionV10(
                        iconRes = R.drawable.ic_font,
                        titulo = StringResourceManager.getString("fuente", currentLanguage),
                        valorActual = currentFont,
                        opciones = listOf("Montserrat" to "Montserrat", "Poppins" to "Poppins", "Roboto" to "Roboto"),
                        habilitado = canChangeAdvanced,
                        onSeleccionar = { fuente ->
                            scope.launch {
                                authRepo.updateConfiguration(fuente = fuente)
                            }
                        }
                    )
                }

                // Tema Oscuro (todos pueden cambiar)
                item {
                    Card(
                        modifier = Modifier.fillMaxWidth(),
                        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface),
                        elevation = CardDefaults.cardElevation(4.dp)
                    ) {
                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(16.dp),
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Icon(
                                painter = painterResource(id = R.drawable.ic_palette),
                                contentDescription = "Tema",
                                tint = MaterialTheme.colorScheme.primary,
                                modifier = Modifier.size(24.dp)
                            )
                            Spacer(modifier = Modifier.width(16.dp))
                            Column(modifier = Modifier.weight(1f)) {
                                Text(
                                    text = StringResourceManager.getString("tema", currentLanguage),
                                    style = MaterialTheme.typography.bodyLarge,
                                    fontWeight = FontWeight.Medium
                                )
                                Text(
                                    text = if (isDarkTheme) "Oscuro" else "Claro",
                                    style = MaterialTheme.typography.bodySmall,
                                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)
                                )
                            }
                            Switch(
                                checked = isDarkTheme,
                                onCheckedChange = { nuevoValor ->
                                    scope.launch {
                                        authRepo.updateConfiguration(temaOscuro = nuevoValor)
                                    }
                                }
                            )
                        }
                    }
                }

                // Moneda (solo Premium)
                item {
                    val monedas = listOf(
                        "€ Euro" to "€ Euro",
                        "$ Dólar" to "$ Dólar",
                        "£ Libra" to "£ Libra",
                        "$ Peso Argentino" to "$ Peso Argentino",
                        "$ Peso Mexicano" to "$ Peso Mexicano",
                        "$ Peso Colombiano" to "$ Peso Colombiano",
                        "S/ Sol Peruano" to "S/ Sol Peruano",
                        "$ Peso Chileno" to "$ Peso Chileno",
                        "Bs Bolívar" to "Bs Bolívar",
                        "$ Real Brasileño" to "$ Real Brasileño"
                    )

                    OpcionConfiguracionV10(
                        iconRes = R.drawable.ic_money,
                        titulo = "Moneda",
                        valorActual = currentMoneda,
                        opciones = monedas,
                        habilitado = canChangeAdvanced,
                        onSeleccionar = { moneda ->
                            scope.launch {
                                authRepo.updateConfiguration(moneda = moneda)
                            }
                        }
                    )
                }

                // Sección desarrollo/testing
                item {
                    Card(
                        modifier = Modifier.fillMaxWidth().clickable {
                            scope.launch {
                                authRepo.updateUserPremium(!esPremium)
                            }
                        },
                        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.secondaryContainer)
                    ) {
                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(16.dp),
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Icon(
                                painter = painterResource(id = R.drawable.ic_settings),
                                contentDescription = "Desarrollo",
                                tint = MaterialTheme.colorScheme.onSecondaryContainer,
                                modifier = Modifier.size(24.dp)
                            )
                            Spacer(modifier = Modifier.width(16.dp))
                            Column(modifier = Modifier.weight(1f)) {
                                Text(
                                    text = "Desarrollo",
                                    style = MaterialTheme.typography.bodyLarge,
                                    fontWeight = FontWeight.Medium,
                                    color = MaterialTheme.colorScheme.onSecondaryContainer
                                )
                                Text(
                                    text = if (esPremium) "🚀 Premium ACTIVO" else "✋ Modo FREE",
                                    style = MaterialTheme.typography.bodySmall,
                                    color = MaterialTheme.colorScheme.onSecondaryContainer.copy(alpha = 0.7f)
                                )
                            }
                        }
                    }
                }

                // Promoción Premium para usuarios FREE
                if (!esPremium) {
                    item {
                        TarjetaPromocionPremium(language = currentLanguage)
                    }
                }
            }

            // Footer
            FooterMarca()
        }
    }
    // 🔍 LOG TEMPORAL para debugging
    LaunchedEffect(esPremium, canChangeAdvanced) {
        Log.d("PantallaConfiguracion", "🔍 Estado actual:")
        Log.d("PantallaConfiguracion", "   - esPremium: $esPremium")
        Log.d("PantallaConfiguracion", "   - canChangeAdvanced: $canChangeAdvanced")
        Log.d("PantallaConfiguracion", "   - isAuthenticated: $isAuthenticated")
    }
}

@Composable
private fun OpcionConfiguracionV10(
    iconRes: Int,
    titulo: String,
    valorActual: String,
    opciones: List<Pair<String, String>>,
    habilitado: Boolean,
    onSeleccionar: (String) -> Unit
) {
    var expanded by remember { mutableStateOf(false) }

    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = if (habilitado)
                MaterialTheme.colorScheme.surface
            else
                MaterialTheme.colorScheme.surface.copy(alpha = 0.5f)
        ),
        elevation = CardDefaults.cardElevation(if (habilitado) 4.dp else 2.dp)
    ) {
        Column {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .clickable(enabled = habilitado) {
                        if (habilitado) expanded = !expanded
                    }
                    .padding(16.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Icon(
                    painter = painterResource(id = iconRes),
                    contentDescription = titulo,
                    tint = if (habilitado)
                        MaterialTheme.colorScheme.primary
                    else
                        MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f),
                    modifier = Modifier.size(24.dp)
                )
                Spacer(modifier = Modifier.width(16.dp))
                Column(modifier = Modifier.weight(1f)) {
                    Text(
                        text = titulo,
                        style = MaterialTheme.typography.bodyLarge,
                        fontWeight = FontWeight.Medium,
                        color = if (habilitado)
                            MaterialTheme.colorScheme.onSurface
                        else
                            MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f)
                    )
                    Text(
                        text = valorActual,
                        style = MaterialTheme.typography.bodySmall,
                        color = if (habilitado)
                            MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)
                        else
                            MaterialTheme.colorScheme.onSurface.copy(alpha = 0.3f)
                    )
                    if (!habilitado) {
                        Text(
                            text = "Solo Premium",
                            style = MaterialTheme.typography.bodySmall,
                            color = Color.Red.copy(alpha = 0.7f)
                        )
                    }
                }
                if (habilitado) {
                    Icon(
                        painter = painterResource(
                            id = if (expanded) R.drawable.ic_arrow_up else R.drawable.ic_arrow_down
                        ),
                        contentDescription = "Expandir",
                        tint = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f),
                        modifier = Modifier.size(16.dp)
                    )
                }
            }
            if (expanded && habilitado) {
                Column(modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp)) {
                    opciones.forEach { (codigo, nombre) ->
                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .clickable {
                                    onSeleccionar(codigo)
                                    expanded = false
                                }
                                .padding(vertical = 8.dp),
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            RadioButton(
                                selected = valorActual == codigo,
                                onClick = {
                                    onSeleccionar(codigo)
                                    expanded = false
                                }
                            )
                            Spacer(modifier = Modifier.width(8.dp))
                            Text(nombre)
                        }
                    }
                }
            }
        }
    }
}

@Composable
private fun TarjetaInformacionCuenta(
    email: String,
    esPremium: Boolean,
    isAuthenticated: Boolean,
    version: String,
    language: String
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface),
        elevation = CardDefaults.cardElevation(4.dp)
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = StringResourceManager.getString("informacion_cuenta", language),
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Bold
                )
                Card(
                    colors = CardDefaults.cardColors(
                        containerColor = when {
                            !isAuthenticated -> Color(0xFFCCCCCC)
                            esPremium -> Color(0xFFFFD700)
                            else -> Color(0xFF90EE90)
                        }
                    ),
                    modifier = Modifier.padding(4.dp)
                ) {
                    Text(
                        text = when {
                            !isAuthenticated -> "INVITADO"
                            esPremium -> "PREMIUM"
                            else -> "FREE"
                        },
                        modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp),
                        fontSize = 12.sp,
                        fontWeight = FontWeight.Bold,
                        color = Color.Black
                    )
                }
            }
            Spacer(modifier = Modifier.height(8.dp))
            Text(
                text = email,
                style = MaterialTheme.typography.bodyLarge,
                color = MaterialTheme.colorScheme.onSurface
            )
            Text(
                text = "App $version",
                style = MaterialTheme.typography.bodySmall,
                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)
            )
        }
    }
}

@Composable
private fun TarjetaPromocionPremium(language: String) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(containerColor = Color(0xFFFFD700).copy(alpha = 0.3f)),
        elevation = CardDefaults.cardElevation(6.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Icon(
                painter = painterResource(id = R.drawable.ic_info),
                contentDescription = "Premium",
                tint = Color(0xFFFFD700),
                modifier = Modifier.size(32.dp)
            )
            Spacer(modifier = Modifier.height(8.dp))
            Text(
                text = StringResourceManager.getString("promocion_premium", language),
                style = MaterialTheme.typography.titleMedium,
                fontWeight = FontWeight.Bold,
                color = MaterialTheme.colorScheme.onSurface
            )
            Text(
                text = StringResourceManager.getString("desbloquea_funciones", language),
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.8f)
            )
        }
    }
}

// app/src/main/java/es/nuskysoftware/marketsales/ui/pantallas/PantallaLogin.kt
package es.nuskysoftware.marketsales.ui.pantallas

import android.app.Activity
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardActions
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Email
import androidx.compose.material.icons.filled.Lock
import androidx.compose.material.icons.filled.Visibility
import androidx.compose.material.icons.filled.VisibilityOff
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.focus.FocusDirection
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalFocusManager
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.text.input.VisualTransformation
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.google.android.gms.auth.api.signin.GoogleSignIn
import com.google.android.gms.common.api.ApiException
import es.nuskysoftware.marketsales.R
import es.nuskysoftware.marketsales.data.repository.AuthState
import es.nuskysoftware.marketsales.ui.viewmodel.AuthViewModel
import es.nuskysoftware.marketsales.ui.viewmodel.AuthViewModelFactory
import es.nuskysoftware.marketsales.utils.ConfigurationManager
import es.nuskysoftware.marketsales.utils.StringResourceManager

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun PantallaLogin(
    onNavigateToMain: () -> Unit = {}
) {
    val context = LocalContext.current
    val focusManager = LocalFocusManager.current

    // ✅ CORRECCIÓN: Pasar context al factory
    val authViewModel: AuthViewModel = viewModel(
        factory = AuthViewModelFactory(context)
    )

    val authState by authViewModel.authState.collectAsState()

    // Para forzar recomposición al cambiar idioma
    val currentLanguage by ConfigurationManager.idioma.collectAsState()

    // Estados locales
    var email by remember { mutableStateOf("") }
    var password by remember { mutableStateOf("") }
    var isPasswordVisible by remember { mutableStateOf(false) }
    var isLoginMode by remember { mutableStateOf(true) } // true = Login, false = Registro
    var showError by remember { mutableStateOf(false) }
    var errorMessage by remember { mutableStateOf("") }

    // Validaciones
    val isEmailValid = email.contains("@") && email.contains(".")
    val isPasswordValid = password.length >= 6
    val isFormValid = isEmailValid && isPasswordValid

    // 🚀 GOOGLE AUTH V8 - CONFIGURACIÓN GOOGLE SIGN-IN ACTIVA
    val googleSignInClient = remember {
        try {
            es.nuskysoftware.marketsales.utils.GoogleAuthHelper.getGoogleSignInClient(context)
        } catch (e: Exception) {
            null // Si falla, Google Auth no disponible
        }
    }

    // Launcher para Google Sign-In
    val googleSignInLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.StartActivityForResult()
    ) { result ->
        if (result.resultCode == Activity.RESULT_OK) {
            val task = GoogleSignIn.getSignedInAccountFromIntent(result.data)
            try {
                val account = task.getResult(ApiException::class.java)
                val idToken = account?.idToken
                if (idToken != null) {
                    authViewModel.signInWithGoogle(idToken)
                } else {
                    errorMessage = "Error obteniendo token de Google"
                    showError = true
                }
            } catch (e: ApiException) {
                errorMessage = "Error en Google Sign-In: ${e.message}"
                showError = true
            }
        }
    }

    // Navegar tras autenticación
    LaunchedEffect(authState) {
        when (authState) {
            is AuthState.Authenticated -> onNavigateToMain()
            is AuthState.Error -> {
                errorMessage = (authState as AuthState.Error).message
                showError = true
            }
            else -> { }
        }
    }

    fun handleAuthAction() {
        if (!isFormValid) return
        showError = false
        if (isLoginMode) authViewModel.loginWithEmail(email, password)
        else authViewModel.registerWithEmail(email, password)
    }

    // 🚀 GOOGLE AUTH V8 - FUNCIÓN PARA GOOGLE SIGN-IN ACTIVA
    fun handleGoogleSignIn() {
        if (googleSignInClient != null) {
            showError = false
            val signInIntent = googleSignInClient.signInIntent
            googleSignInLauncher.launch(signInIntent)
        } else {
            errorMessage = "Google Auth no disponible - Revisa configuración"
            showError = true
        }
    }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(
                brush = Brush.verticalGradient(
                    colors = listOf(
                        MaterialTheme.colorScheme.primary.copy(alpha = 0.1f),
                        MaterialTheme.colorScheme.surface
                    )
                )
            )
    ) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .verticalScroll(rememberScrollState())
                .padding(24.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.Center
        ) {
            // Logo
            Card(
                modifier = Modifier
                    .size(100.dp)
                    .padding(bottom = 16.dp),
                shape = RoundedCornerShape(50.dp),
                elevation = CardDefaults.cardElevation(8.dp)
            ) {
                Box(
                    modifier = Modifier.fillMaxSize(),
                    contentAlignment = Alignment.Center
                ) {
                    Image(
                        painter = painterResource(id = R.drawable.ic_store),
                        contentDescription = StringResourceManager.getString("app_name", currentLanguage),
                        modifier = Modifier.size(60.dp)
                    )
                }
            }

            // Título App
            Text(
                text = StringResourceManager.getString("app_name", currentLanguage),
                style = MaterialTheme.typography.headlineMedium.copy(
                    fontWeight = FontWeight.Bold,
                    color = MaterialTheme.colorScheme.primary
                ),
                modifier = Modifier.padding(bottom = 8.dp)
            )

            // Subtítulo Login/Registro
            Text(
                text = if (isLoginMode)
                    StringResourceManager.getString("login_subtitle", currentLanguage)
                else
                    StringResourceManager.getString("register_subtitle", currentLanguage),
                style = MaterialTheme.typography.bodyLarge.copy(
                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)
                ),
                textAlign = TextAlign.Center,
                modifier = Modifier.padding(bottom = 32.dp)
            )

            // Formulario
            Card(
                modifier = Modifier.fillMaxWidth().padding(bottom = 16.dp),
                elevation = CardDefaults.cardElevation(4.dp),
                shape = RoundedCornerShape(16.dp)
            ) {
                Column(
                    modifier = Modifier.fillMaxWidth().padding(24.dp),
                    verticalArrangement = Arrangement.spacedBy(16.dp)
                ) {
                    // Email
                    OutlinedTextField(
                        value = email,
                        onValueChange = {
                            email = it
                            showError = false
                        },
                        label = { Text(StringResourceManager.getString("email", currentLanguage)) },
                        placeholder = { Text(StringResourceManager.getString("email_placeholder", currentLanguage)) },
                        leadingIcon = { Icon(Icons.Default.Email, contentDescription = null) },
                        modifier = Modifier.fillMaxWidth(),
                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Email, imeAction = ImeAction.Next),
                        keyboardActions = KeyboardActions(onNext = { focusManager.moveFocus(FocusDirection.Down) }),
                        isError = email.isNotEmpty() && !isEmailValid,
                        supportingText = {
                            if (email.isNotEmpty() && !isEmailValid) {
                                Text(
                                    text = StringResourceManager.getString("email_invalid", currentLanguage),
                                    color = MaterialTheme.colorScheme.error
                                )
                            }
                        },
                        singleLine = true
                    )

                    // Contraseña
                    OutlinedTextField(
                        value = password,
                        onValueChange = {
                            password = it
                            showError = false
                        },
                        label = { Text(StringResourceManager.getString("password", currentLanguage)) },
                        placeholder = { Text(StringResourceManager.getString("password_placeholder", currentLanguage)) },
                        leadingIcon = { Icon(Icons.Default.Lock, contentDescription = null) },
                        trailingIcon = {
                            IconButton(onClick = { isPasswordVisible = !isPasswordVisible }) {
                                Icon(
                                    imageVector = if (isPasswordVisible) Icons.Default.Visibility else Icons.Default.VisibilityOff,
                                    contentDescription = if (isPasswordVisible)
                                        "Ocultar contraseña" else "Mostrar contraseña"
                                )
                            }
                        },
                        visualTransformation = if (isPasswordVisible) VisualTransformation.None else PasswordVisualTransformation(),
                        modifier = Modifier.fillMaxWidth(),
                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password, imeAction = ImeAction.Done),
                        keyboardActions = KeyboardActions(onDone = {
                            focusManager.clearFocus()
                            if (isFormValid) handleAuthAction()
                        }),
                        isError = password.isNotEmpty() && !isPasswordValid,
                        supportingText = {
                            if (password.isNotEmpty() && !isPasswordValid) {
                                Text(
                                    text = StringResourceManager.getString("password_invalid", currentLanguage),
                                    color = MaterialTheme.colorScheme.error
                                )
                            }
                        },
                        singleLine = true
                    )

                    // Error genérico
                    if (showError && errorMessage.isNotEmpty()) {
                        Card(
                            modifier = Modifier.fillMaxWidth(),
                            colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.errorContainer)
                        ) {
                            Text(
                                text = errorMessage,
                                color = MaterialTheme.colorScheme.onErrorContainer,
                                style = MaterialTheme.typography.bodyMedium,
                                modifier = Modifier.padding(12.dp)
                            )
                        }
                    }
                }
            }

            // Botón principal
            Button(
                onClick = { handleAuthAction() },
                modifier = Modifier.fillMaxWidth().height(56.dp),
                enabled = isFormValid && authState !is AuthState.Loading,
                shape = RoundedCornerShape(28.dp)
            ) {
                if (authState is AuthState.Loading) {
                    Row(verticalAlignment = Alignment.CenterVertically, horizontalArrangement = Arrangement.spacedBy(8.dp)) {
                        CircularProgressIndicator(modifier = Modifier.size(20.dp), strokeWidth = 2.dp, color = MaterialTheme.colorScheme.onPrimary)
                        Text(StringResourceManager.getString("loading", currentLanguage), fontSize = 16.sp, fontWeight = FontWeight.Medium)
                    }
                } else {
                    Text(
                        text = if (isLoginMode)
                            StringResourceManager.getString("login_button", currentLanguage)
                        else
                            StringResourceManager.getString("register_button", currentLanguage),
                        fontSize = 16.sp,
                        fontWeight = FontWeight.Medium
                    )
                }
            }

            // Divisor
            Row(modifier = Modifier.fillMaxWidth().padding(vertical = 24.dp), verticalAlignment = Alignment.CenterVertically) {
                HorizontalDivider(modifier = Modifier.weight(1f))
                Text(
                    StringResourceManager.getString("or", currentLanguage),
                    modifier = Modifier.padding(horizontal = 16.dp),
                    style = MaterialTheme.typography.bodyMedium.copy(color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f))
                )
                HorizontalDivider(modifier = Modifier.weight(1f))
            }

            // 🚀 GOOGLE AUTH V8 - BOTÓN GOOGLE SIGN-IN MEJORADO
            if (googleSignInClient != null) {
                OutlinedButton(
                    onClick = { handleGoogleSignIn() },
                    modifier = Modifier.fillMaxWidth().height(56.dp),
                    enabled = authState !is AuthState.Loading,
                    shape = RoundedCornerShape(28.dp),
                    border = ButtonDefaults.outlinedButtonBorder.copy(
                        width = 2.dp,
                        brush = Brush.horizontalGradient(
                            colors = listOf(
                                MaterialTheme.colorScheme.primary,
                                MaterialTheme.colorScheme.secondary
                            )
                        )
                    )
                ) {
                    if (authState is AuthState.Loading) {
                        CircularProgressIndicator(
                            modifier = Modifier.size(20.dp),
                            strokeWidth = 2.dp,
                            color = MaterialTheme.colorScheme.primary
                        )
                    } else {
                        Row(
                            verticalAlignment = Alignment.CenterVertically,
                            horizontalArrangement = Arrangement.spacedBy(12.dp)
                        ) {
                            // Google Icon (usando un painterResource o puedes usar un ícono personalizado)
                            Icon(
                                painter = painterResource(id = R.drawable.ic_store), // Usar ícono de Google si tienes
                                contentDescription = "Google",
                                modifier = Modifier.size(20.dp),
                                tint = MaterialTheme.colorScheme.primary
                            )
                            Text(
                                text = if (isLoginMode)
                                    StringResourceManager.getString("google_signin", currentLanguage)
                                else
                                    StringResourceManager.getString("google_register", currentLanguage),
                                fontSize = 16.sp,
                                fontWeight = FontWeight.Medium,
                                color = MaterialTheme.colorScheme.primary
                            )
                        }
                    }
                }
            }

            Spacer(modifier = Modifier.height(32.dp))

            // Toggle Login/Registro
            TextButton(
                onClick = {
                    isLoginMode = !isLoginMode
                    showError = false
                    errorMessage = ""
                }
            ) {
                Text(
                    text = if (isLoginMode)
                        StringResourceManager.getString("go_to_register", currentLanguage)
                    else
                        StringResourceManager.getString("go_to_login", currentLanguage),
                    style = MaterialTheme.typography.bodyMedium.copy(
                        color = MaterialTheme.colorScheme.primary,
                        fontWeight = FontWeight.Medium
                    )
                )
            }

            // Beneficios del registro (solo en modo registro)
            if (!isLoginMode) {
                Spacer(modifier = Modifier.height(16.dp))
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    colors = CardDefaults.cardColors(
                        containerColor = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.3f)
                    ),
                    elevation = CardDefaults.cardElevation(2.dp)
                ) {
                    Column(modifier = Modifier.padding(16.dp)) {
                        Text(
                            text = StringResourceManager.getString("register_benefits_title", currentLanguage),
                            style = MaterialTheme.typography.titleSmall.copy(fontWeight = FontWeight.Bold),
                            color = MaterialTheme.colorScheme.onSurface
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        listOf("benefit_1", "benefit_2", "benefit_3", "benefit_4").forEach { benefit ->
                            Text(
                                text = StringResourceManager.getString(benefit, currentLanguage),
                                style = MaterialTheme.typography.bodySmall,
                                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.8f),
                                modifier = Modifier.padding(vertical = 2.dp)
                            )
                        }
                    }
                }
            }
        }
    }
}

// app/src/main/java/es/nuskysoftware/marketsales/ui/pantallas/PantallaPerfil.kt
package es.nuskysoftware.marketsales.ui.pantallas

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.text.KeyboardActions
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Email
import androidx.compose.material.icons.filled.Lock
import androidx.compose.material.icons.filled.Person
import androidx.compose.material.icons.filled.Visibility
import androidx.compose.material.icons.filled.VisibilityOff
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.focus.FocusDirection
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalFocusManager
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.text.input.VisualTransformation
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import kotlinx.coroutines.launch
import android.util.Log
import es.nuskysoftware.marketsales.R
import es.nuskysoftware.marketsales.data.repository.AuthState
import es.nuskysoftware.marketsales.ui.viewmodel.AuthViewModel
import es.nuskysoftware.marketsales.ui.viewmodel.AuthViewModelFactory
import es.nuskysoftware.marketsales.utils.ConfigurationManager
import es.nuskysoftware.marketsales.utils.FooterMarca
import es.nuskysoftware.marketsales.utils.StringResourceManager

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun PantallaPerfil(
    navController: NavController? = null
) {
    val context = LocalContext.current
    val focusManager = LocalFocusManager.current
    val scope = rememberCoroutineScope()

    // AuthViewModel para manejar actualizaciones
    val authViewModel: AuthViewModel = viewModel(factory = AuthViewModelFactory(context))
    val authState by authViewModel.authState.collectAsState()
    val currentUser by authViewModel.currentUser.collectAsState()

    // Estados de ConfigurationManager
    val currentLanguage by ConfigurationManager.idioma.collectAsState()
    val usuarioEmail by ConfigurationManager.usuarioEmail.collectAsState()
    val displayName by ConfigurationManager.displayName.collectAsState()

    // Estados locales del formulario
    var nombre by remember { mutableStateOf(displayName ?: "") }
    var email by remember { mutableStateOf(usuarioEmail ?: "") }
    var passwordActual by remember { mutableStateOf("") }
    var passwordNueva by remember { mutableStateOf("") }
    var confirmarPassword by remember { mutableStateOf("") }

    var isPasswordActualVisible by remember { mutableStateOf(false) }
    var isPasswordNuevaVisible by remember { mutableStateOf(false) }
    var isConfirmarPasswordVisible by remember { mutableStateOf(false) }

    var showError by remember { mutableStateOf(false) }
    var showSuccess by remember { mutableStateOf(false) }
    var errorMessage by remember { mutableStateOf("") }
    var successMessage by remember { mutableStateOf("") }

    // Estado de carga para botones individuales
    var isUpdatingInfo by remember { mutableStateOf(false) }
    var isUpdatingPassword by remember { mutableStateOf(false) }

    // Actualizar campos cuando cambie el usuario
    LaunchedEffect(currentUser, displayName, usuarioEmail) {
        nombre = displayName ?: ""
        email = usuarioEmail ?: ""
    }

    // ✅ NUEVO: Actualizar campos cuando se muestre el mensaje de éxito
    LaunchedEffect(showSuccess) {
        if (showSuccess) {
            kotlinx.coroutines.delay(300)
            val updatedDisplayName = ConfigurationManager.displayName.value
            val updatedEmail = ConfigurationManager.usuarioEmail.value

            Log.d("PantallaPerfil", "🔄 ConfigurationManager.displayName: $updatedDisplayName")
            Log.d("PantallaPerfil", "🔄 Campo nombre antes: $nombre")

            if (updatedDisplayName != null) {
                nombre = updatedDisplayName
            }
            if (updatedEmail != null) {
                email = updatedEmail
            }

            Log.d("PantallaPerfil", "🔄 Campo nombre después: $nombre")
        }
    }

    // Validaciones
    val isNombreValid = nombre.isNotBlank()
    val isEmailValid = email.contains("@") && email.contains(".")
    val isPasswordActualValid = passwordActual.isNotBlank()
    val isPasswordNuevaValid = passwordNueva.length >= 6
    val isConfirmarPasswordValid = passwordNueva == confirmarPassword
    val canUpdateBasicInfo = isNombreValid && isEmailValid
    val canUpdatePassword = isPasswordActualValid && isPasswordNuevaValid && isConfirmarPasswordValid

    // Manejar estados de AuthViewModel
    LaunchedEffect(authState) {
        when (authState) {
            is AuthState.Error -> {
                errorMessage = (authState as AuthState.Error).message
                showError = true
                showSuccess = false
                isUpdatingInfo = false
                isUpdatingPassword = false
            }
            is AuthState.Authenticated -> {
                isUpdatingInfo = false
                isUpdatingPassword = false
            }
            else -> { }
        }
    }

    LaunchedEffect(displayName) {
        Log.d("PantallaPerfil", "🔄 ConfigurationManager.displayName: $displayName")
        if (!displayName.isNullOrBlank()) {
            Log.d("PantallaPerfil", "🔄 Campo nombre antes: $nombre")
            nombre = displayName ?: ""  // ✅ Manejar el nullable
            Log.d("PantallaPerfil", "🔄 Campo nombre después: $nombre")
        }
    }
    LaunchedEffect(currentUser, displayName, usuarioEmail) {
        nombre = displayName ?: currentUser?.displayName ?: ""
        email = usuarioEmail ?: currentUser?.email ?: ""
        Log.d("PantallaPerfil", "🔄 Campos actualizados - nombre: $nombre, email: $email")
    }
    // Función para actualizar información básica
    fun updateBasicInfo() {
        scope.launch {
            isUpdatingInfo = true
            showError = false
            showSuccess = false

            try {
                val result = authViewModel.updateUserProfile(
                    displayName = nombre,
                    email = email
                )

                if (result) {
                    successMessage = StringResourceManager.getString("informacion_actualizada", currentLanguage)
                    showSuccess = true
                } else {
                    errorMessage = StringResourceManager.getString("error_actualizar_informacion", currentLanguage)
                    showError = true
                }
            } catch (e: Exception) {
                errorMessage = StringResourceManager.getString("error_generico", currentLanguage).replace("{0}", e.message ?: "")
                showError = true
            } finally {
                isUpdatingInfo = false
            }
        }
    }

    // Función para cambiar contraseña
    fun updatePassword() {
        scope.launch {
            isUpdatingPassword = true
            showError = false
            showSuccess = false

            try {
                val result = authViewModel.updatePassword(
                    currentPassword = passwordActual,
                    newPassword = passwordNueva
                )

                if (result) {
                    successMessage = StringResourceManager.getString("contrasena_actualizada", currentLanguage)
                    showSuccess = true
                    // Limpiar campos
                    passwordActual = ""
                    passwordNueva = ""
                    confirmarPassword = ""
                } else {
                    errorMessage = StringResourceManager.getString("error_cambiar_contrasena", currentLanguage)
                    showError = true
                }
            } catch (e: Exception) {
                errorMessage = StringResourceManager.getString("error_generico", currentLanguage).replace("{0}", e.message ?: "")
                showError = true
            } finally {
                isUpdatingPassword = false
            }
        }
    }

    // Auto-ocultar mensajes después de 5 segundos
    LaunchedEffect(showSuccess) {
        if (showSuccess) {
            kotlinx.coroutines.delay(5000)
            showSuccess = false
        }
    }

    LaunchedEffect(showError) {
        if (showError) {
            kotlinx.coroutines.delay(5000)
            showError = false
        }
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = {
                    Text(
                        StringResourceManager.getString("perfil", currentLanguage),
                        fontWeight = FontWeight.Bold
                    )
                },
                navigationIcon = {
                    IconButton(onClick = { navController?.popBackStack() }) {
                        Icon(
                            painter = painterResource(id = R.drawable.ic_arrow_left),
                            contentDescription = StringResourceManager.getString("volver", currentLanguage)
                        )
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primary,
                    titleContentColor = MaterialTheme.colorScheme.onPrimary,
                    navigationIconContentColor = MaterialTheme.colorScheme.onPrimary
                )
            )
        }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
        ) {
            Column(
                modifier = Modifier
                    .weight(1f)
                    .fillMaxWidth()
                    .verticalScroll(rememberScrollState())
                    .padding(16.dp),
                verticalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                // Información de cuenta
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface),
                    elevation = CardDefaults.cardElevation(4.dp)
                ) {
                    Column(modifier = Modifier.padding(16.dp)) {
                        Text(
                            text = StringResourceManager.getString("informacion_cuenta", currentLanguage),
                            style = MaterialTheme.typography.titleMedium,
                            fontWeight = FontWeight.Bold
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        Text(
                            text = StringResourceManager.getString("modificar_informacion", currentLanguage),
                            style = MaterialTheme.typography.bodyMedium,
                            color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)
                        )
                    }
                }

                // Mensajes de estado (arriba para mejor visibilidad)
                if (showError && errorMessage.isNotEmpty()) {
                    Card(
                        modifier = Modifier.fillMaxWidth(),
                        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.errorContainer)
                    ) {
                        Row(
                            modifier = Modifier.padding(12.dp),
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Text(
                                text = errorMessage,
                                color = MaterialTheme.colorScheme.onErrorContainer,
                                style = MaterialTheme.typography.bodyMedium,
                                modifier = Modifier.weight(1f)
                            )
                            TextButton(onClick = { showError = false }) {
                                Text("✕", color = MaterialTheme.colorScheme.onErrorContainer)
                            }
                        }
                    }
                }

                if (showSuccess && successMessage.isNotEmpty()) {
                    Card(
                        modifier = Modifier.fillMaxWidth(),
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF4CAF50).copy(alpha = 0.1f))
                    ) {
                        Row(
                            modifier = Modifier.padding(12.dp),
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Text(
                                text = successMessage,
                                color = Color(0xFF4CAF50),
                                style = MaterialTheme.typography.bodyMedium,
                                modifier = Modifier.weight(1f)
                            )
                            TextButton(onClick = { showSuccess = false }) {
                                Text("✕", color = Color(0xFF4CAF50))
                            }
                        }
                    }
                }

                // Formulario de información básica
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface),
                    elevation = CardDefaults.cardElevation(4.dp)
                ) {
                    Column(
                        modifier = Modifier.padding(16.dp),
                        verticalArrangement = Arrangement.spacedBy(16.dp)
                    ) {
                        Text(
                            text = StringResourceManager.getString("informacion_personal", currentLanguage),
                            style = MaterialTheme.typography.titleSmall,
                            fontWeight = FontWeight.Bold
                        )

                        // Nombre
                        OutlinedTextField(
                            value = nombre,
                            onValueChange = {
                                nombre = it
                                showError = false
                                showSuccess = false
                            },
                            label = { Text(StringResourceManager.getString("nombre_completo", currentLanguage)) },
                            leadingIcon = { Icon(Icons.Default.Person, contentDescription = null) },
                            modifier = Modifier.fillMaxWidth(),
                            keyboardOptions = KeyboardOptions(
                                keyboardType = KeyboardType.Text,
                                imeAction = ImeAction.Next
                            ),
                            keyboardActions = KeyboardActions(
                                onNext = { focusManager.moveFocus(FocusDirection.Down) }
                            ),
                            isError = nombre.isNotEmpty() && !isNombreValid,
                            supportingText = {
                                if (nombre.isNotEmpty() && !isNombreValid) {
                                    Text(
                                        text = StringResourceManager.getString("nombre_vacio", currentLanguage),
                                        color = MaterialTheme.colorScheme.error
                                    )
                                }
                            },
                            singleLine = true,
                            enabled = !isUpdatingInfo
                        )

                        // Email
                        OutlinedTextField(
                            value = email,
                            onValueChange = {
                                email = it
                                showError = false
                                showSuccess = false
                            },
                            label = { Text(StringResourceManager.getString("correo_electronico", currentLanguage)) },
                            leadingIcon = { Icon(Icons.Default.Email, contentDescription = null) },
                            modifier = Modifier.fillMaxWidth(),
                            keyboardOptions = KeyboardOptions(
                                keyboardType = KeyboardType.Email,
                                imeAction = ImeAction.Done
                            ),
                            keyboardActions = KeyboardActions(
                                onDone = { focusManager.clearFocus() }
                            ),
                            isError = email.isNotEmpty() && !isEmailValid,
                            supportingText = {
                                if (email.isNotEmpty() && !isEmailValid) {
                                    Text(
                                        text = StringResourceManager.getString("email_invalido", currentLanguage),
                                        color = MaterialTheme.colorScheme.error
                                    )
                                }
                            },
                            singleLine = true,
                            enabled = !isUpdatingInfo
                        )

                        // Botón actualizar información básica
                        Button(
                            onClick = { updateBasicInfo() },
                            modifier = Modifier.fillMaxWidth(),
                            enabled = canUpdateBasicInfo && !isUpdatingInfo && !isUpdatingPassword
                        ) {
                            if (isUpdatingInfo) {
                                CircularProgressIndicator(
                                    modifier = Modifier.size(20.dp),
                                    strokeWidth = 2.dp,
                                    color = MaterialTheme.colorScheme.onPrimary
                                )
                                Spacer(modifier = Modifier.width(8.dp))
                                Text(StringResourceManager.getString("actualizando", currentLanguage))
                            } else {
                                Text(StringResourceManager.getString("actualizar_informacion", currentLanguage))
                            }
                        }
                    }
                }

                // Formulario de cambio de contraseña
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface),
                    elevation = CardDefaults.cardElevation(4.dp)
                ) {
                    Column(
                        modifier = Modifier.padding(16.dp),
                        verticalArrangement = Arrangement.spacedBy(16.dp)
                    ) {
                        Text(
                            text = StringResourceManager.getString("cambiar_contrasena_titulo", currentLanguage),
                            style = MaterialTheme.typography.titleSmall,
                            fontWeight = FontWeight.Bold
                        )

                        Text(
                            text = StringResourceManager.getString("cambiar_contrasena_descripcion", currentLanguage),
                            style = MaterialTheme.typography.bodySmall,
                            color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)
                        )

                        // Contraseña actual
                        OutlinedTextField(
                            value = passwordActual,
                            onValueChange = {
                                passwordActual = it
                                showError = false
                                showSuccess = false
                            },
                            label = { Text(StringResourceManager.getString("contrasena_actual", currentLanguage)) },
                            leadingIcon = { Icon(Icons.Default.Lock, contentDescription = null) },
                            trailingIcon = {
                                IconButton(onClick = { isPasswordActualVisible = !isPasswordActualVisible }) {
                                    Icon(
                                        imageVector = if (isPasswordActualVisible) Icons.Default.Visibility else Icons.Default.VisibilityOff,
                                        contentDescription = if (isPasswordActualVisible)
                                            StringResourceManager.getString("ocultar_contrasena", currentLanguage)
                                        else
                                            StringResourceManager.getString("mostrar_contrasena", currentLanguage)
                                    )
                                }
                            },
                            visualTransformation = if (isPasswordActualVisible) VisualTransformation.None else PasswordVisualTransformation(),
                            modifier = Modifier.fillMaxWidth(),
                            keyboardOptions = KeyboardOptions(
                                keyboardType = KeyboardType.Password,
                                imeAction = ImeAction.Next
                            ),
                            keyboardActions = KeyboardActions(
                                onNext = { focusManager.moveFocus(FocusDirection.Down) }
                            ),
                            isError = passwordActual.isNotEmpty() && !isPasswordActualValid,
                            supportingText = {
                                if (passwordActual.isNotEmpty() && !isPasswordActualValid) {
                                    Text(
                                        text = StringResourceManager.getString("contrasena_actual_requerida", currentLanguage),
                                        color = MaterialTheme.colorScheme.error
                                    )
                                }
                            },
                            singleLine = true,
                            enabled = !isUpdatingPassword
                        )

                        // Nueva contraseña
                        OutlinedTextField(
                            value = passwordNueva,
                            onValueChange = {
                                passwordNueva = it
                                showError = false
                                showSuccess = false
                            },
                            label = { Text(StringResourceManager.getString("nueva_contrasena", currentLanguage)) },
                            leadingIcon = { Icon(Icons.Default.Lock, contentDescription = null) },
                            trailingIcon = {
                                IconButton(onClick = { isPasswordNuevaVisible = !isPasswordNuevaVisible }) {
                                    Icon(
                                        imageVector = if (isPasswordNuevaVisible) Icons.Default.Visibility else Icons.Default.VisibilityOff,
                                        contentDescription = if (isPasswordNuevaVisible)
                                            StringResourceManager.getString("ocultar_contrasena", currentLanguage)
                                        else
                                            StringResourceManager.getString("mostrar_contrasena", currentLanguage)
                                    )
                                }
                            },
                            visualTransformation = if (isPasswordNuevaVisible) VisualTransformation.None else PasswordVisualTransformation(),
                            modifier = Modifier.fillMaxWidth(),
                            keyboardOptions = KeyboardOptions(
                                keyboardType = KeyboardType.Password,
                                imeAction = ImeAction.Next
                            ),
                            keyboardActions = KeyboardActions(
                                onNext = { focusManager.moveFocus(FocusDirection.Down) }
                            ),
                            isError = passwordNueva.isNotEmpty() && !isPasswordNuevaValid,
                            supportingText = {
                                if (passwordNueva.isNotEmpty() && !isPasswordNuevaValid) {
                                    Text(
                                        text = StringResourceManager.getString("contrasena_minimo_caracteres", currentLanguage),
                                        color = MaterialTheme.colorScheme.error
                                    )
                                }
                            },
                            singleLine = true,
                            enabled = !isUpdatingPassword
                        )

                        // Confirmar contraseña
                        OutlinedTextField(
                            value = confirmarPassword,
                            onValueChange = {
                                confirmarPassword = it
                                showError = false
                                showSuccess = false
                            },
                            label = { Text(StringResourceManager.getString("confirmar_nueva_contrasena", currentLanguage)) },
                            leadingIcon = { Icon(Icons.Default.Lock, contentDescription = null) },
                            trailingIcon = {
                                IconButton(onClick = { isConfirmarPasswordVisible = !isConfirmarPasswordVisible }) {
                                    Icon(
                                        imageVector = if (isConfirmarPasswordVisible) Icons.Default.Visibility else Icons.Default.VisibilityOff,
                                        contentDescription = if (isConfirmarPasswordVisible)
                                            StringResourceManager.getString("ocultar_contrasena", currentLanguage)
                                        else
                                            StringResourceManager.getString("mostrar_contrasena", currentLanguage)
                                    )
                                }
                            },
                            visualTransformation = if (isConfirmarPasswordVisible) VisualTransformation.None else PasswordVisualTransformation(),
                            modifier = Modifier.fillMaxWidth(),
                            keyboardOptions = KeyboardOptions(
                                keyboardType = KeyboardType.Password,
                                imeAction = ImeAction.Done
                            ),
                            keyboardActions = KeyboardActions(
                                onDone = { focusManager.clearFocus() }
                            ),
                            isError = confirmarPassword.isNotEmpty() && !isConfirmarPasswordValid,
                            supportingText = {
                                if (confirmarPassword.isNotEmpty() && !isConfirmarPasswordValid) {
                                    Text(
                                        text = StringResourceManager.getString("contrasenas_no_coinciden", currentLanguage),
                                        color = MaterialTheme.colorScheme.error
                                    )
                                }
                            },
                            singleLine = true,
                            enabled = !isUpdatingPassword
                        )

                        // Botón cambiar contraseña
                        Button(
                            onClick = { updatePassword() },
                            modifier = Modifier.fillMaxWidth(),
                            enabled = canUpdatePassword && !isUpdatingPassword && !isUpdatingInfo
                        ) {
                            if (isUpdatingPassword) {
                                CircularProgressIndicator(
                                    modifier = Modifier.size(20.dp),
                                    strokeWidth = 2.dp,
                                    color = MaterialTheme.colorScheme.onPrimary
                                )
                                Spacer(modifier = Modifier.width(8.dp))
                                Text(StringResourceManager.getString("cambiando", currentLanguage))
                            } else {
                                Text(StringResourceManager.getString("cambiar_contrasena_btn", currentLanguage))
                            }
                        }
                    }
                }
            }

            // Footer
            FooterMarca()
        }
    }
}

package es.nuskysoftware.marketsales.ui.pantallas

import androidx.compose.animation.core.*
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.scale
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import es.nuskysoftware.marketsales.R

@Composable
fun PantallaSplash() {
    // Animación de escala
    val infiniteTransition = rememberInfiniteTransition(label = "splash_animation")
    val scale by infiniteTransition.animateFloat(
        initialValue = 0.8f,
        targetValue = 1.2f,
        animationSpec = infiniteRepeatable(
            animation = tween(1000, easing = EaseInOutCubic),
            repeatMode = RepeatMode.Reverse
        ),
        label = "scale_animation"
    )

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(
                brush = Brush.verticalGradient(
                    colors = listOf(
                        MaterialTheme.colorScheme.primary,
                        MaterialTheme.colorScheme.primaryContainer
                    )
                )
            ),
        contentAlignment = Alignment.Center
    ) {
        Column(
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.Center
        ) {
            // Logo animado
            Card(
                modifier = Modifier
                    .size(120.dp)
                    .scale(scale),
                shape = RoundedCornerShape(60.dp),
                elevation = CardDefaults.cardElevation(defaultElevation = 8.dp),
                colors = CardDefaults.cardColors(
                    containerColor = MaterialTheme.colorScheme.surface
                )
            ) {
                Box(
                    modifier = Modifier.fillMaxSize(),
                    contentAlignment = Alignment.Center
                ) {
                    Image(
                        painter = painterResource(id = R.drawable.ic_store),
                        contentDescription = "Market Sales Logo",
                        modifier = Modifier.size(80.dp)
                    )
                }
            }

            Spacer(modifier = Modifier.height(24.dp))

            // Título
            Text(
                text = "Market Sales",
                fontSize = 32.sp,
                fontWeight = FontWeight.Bold,
                color = MaterialTheme.colorScheme.onPrimary
            )

            Spacer(modifier = Modifier.height(8.dp))

            // Subtítulo
            Text(
                text = "Gestión de Mercadillos",
                fontSize = 16.sp,
                color = MaterialTheme.colorScheme.onPrimary.copy(alpha = 0.8f)
            )

            Spacer(modifier = Modifier.height(48.dp))

            // Indicador de carga
            CircularProgressIndicator(
                modifier = Modifier.size(32.dp),
                color = MaterialTheme.colorScheme.onPrimary,
                strokeWidth = 3.dp
            )
        }
    }
}

package es.nuskysoftware.marketsales.ui.theme

import androidx.compose.material3.ColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.runtime.staticCompositionLocalOf
import androidx.compose.ui.graphics.Color

// ================= COLORES PRINCIPALES - VERDE PASTEL =================

// ------------------- Tema Claro - Verde Pastel MÁS SUAVE -------------------
val PrimaryLight = Color(0xFF81C784)        // Verde pastel más suave
val OnPrimaryLight = Color(0xFFFFFFFF)      // Blanco sobre verde
val SecondaryLight = Color(0xFFA5D6A7)      // Verde pastel muy claro
val OnSecondaryLight = Color(0xFF2E7D32)    // Verde oscuro sobre verde pastel
val BackgroundLight = Color(0xFFF1F8E9)     // Verde muy claro de fondo
val OnBackgroundLight = Color(0xFF1B5E20)   // Verde muy oscuro para texto

// ------------------- Tema Oscuro - Verde Pastel MÁS SUAVE -------------------
val PrimaryDark = Color(0xFF66BB6A)         // Verde pastel medio para oscuro
val OnPrimaryDark = Color(0xFF1B5E20)       // Verde muy oscuro sobre verde pastel
val SecondaryDark = Color(0xFF81C784)       // Verde pastel más claro
val OnSecondaryDark = Color(0xFF2E7D32)     // Verde oscuro sobre verde pastel
val BackgroundDark = Color(0xFF1B5E20)      // Verde muy oscuro de fondo
val OnBackgroundDark = Color(0xFFC8E6C9)    // Verde claro para texto

// ================= COLORES EXTENDIDOS PERSONALIZADOS =================

// ------------------- Extendidos Claro -------------------
val SuccessLight = Color(0xFF4CAF50)        // Verde éxito
val OnSuccessLight = Color(0xFFFFFFFF)      // Blanco sobre verde
val WarningLight = Color(0xFFFF9800)        // Naranja advertencia
val OnWarningLight = Color(0xFFFFFFFF)      // Blanco sobre naranja
val ErrorLight = Color(0xFFF44336)          // Rojo error
val OnErrorLight = Color(0xFFFFFFFF)        // Blanco sobre rojo
val InfoLight = Color(0xFF4CAF50)           // Verde información (en vez de azul)
val OnInfoLight = Color(0xFFFFFFFF)         // Blanco sobre verde info

val SurfaceLight = Color(0xFFFFFFFF)        // Superficie blanca
val OnSurfaceLight = Color(0xFF2E7D32)      // Verde oscuro sobre superficie
val SurfaceVariantLight = Color(0xFFC8E6C9) // Superficie variante verde claro
val OnSurfaceVariantLight = Color(0xFF1B5E20) // Verde muy oscuro sobre superficie variante

// ------------------- Extendidos Oscuro -------------------
val SuccessDark = Color(0xFF388E3C)         // Verde éxito oscuro
val OnSuccessDark = Color(0xFFFFFFFF)       // Blanco sobre verde oscuro
val WarningDark = Color(0xFFF57C00)         // Naranja advertencia oscuro
val OnWarningDark = Color(0xFFFFFFFF)       // Blanco sobre naranja oscuro
val ErrorDark = Color(0xFFD32F2F)           // Rojo error oscuro
val OnErrorDark = Color(0xFFFFFFFF)         // Blanco sobre rojo oscuro
val InfoDark = Color(0xFF388E3C)            // Verde información oscuro
val OnInfoDark = Color(0xFFFFFFFF)          // Blanco sobre verde info oscuro

val SurfaceDark = Color(0xFF2E7D32)         // Superficie verde oscuro
val OnSurfaceDark = Color(0xFFA5D6A7)       // Verde claro sobre superficie oscura
val SurfaceVariantDark = Color(0xFF1B5E20)  // Superficie variante verde muy oscuro
val OnSurfaceVariantDark = Color(0xFF81C784) // Verde pastel sobre superficie variante

// ================= CLASE PARA COLORES EXTENDIDOS =================

data class ExtendedColors(
    val success: Color,
    val onSuccess: Color,
    val warning: Color,
    val onWarning: Color,
    val error: Color,
    val onError: Color,
    val info: Color,
    val onInfo: Color,
    val surface: Color,
    val onSurface: Color,
    val surfaceVariant: Color,
    val onSurfaceVariant: Color
)

// ------------------- Instancias de colores extendidos -------------------
val LightExtendedColors = ExtendedColors(
    success = SuccessLight,
    onSuccess = OnSuccessLight,
    warning = WarningLight,
    onWarning = OnWarningLight,
    error = ErrorLight,
    onError = OnErrorLight,
    info = InfoLight,
    onInfo = OnInfoLight,
    surface = SurfaceLight,
    onSurface = OnSurfaceLight,
    surfaceVariant = SurfaceVariantLight,
    onSurfaceVariant = OnSurfaceVariantLight
)

val DarkExtendedColors = ExtendedColors(
    success = SuccessDark,
    onSuccess = OnSuccessDark,
    warning = WarningDark,
    onWarning = OnWarningDark,
    error = ErrorDark,
    onError = OnErrorDark,
    info = InfoDark,
    onInfo = OnInfoDark,
    surface = SurfaceDark,
    onSurface = OnSurfaceDark,
    surfaceVariant = SurfaceVariantDark,
    onSurfaceVariant = OnSurfaceVariantDark
)

// ================= COMPOSITION LOCAL PARA ACCESO GLOBAL =================

val LocalExtendedColors = staticCompositionLocalOf {
    LightExtendedColors
}

// ================= EXTENSIÓN PARA ACCESO FÁCIL =================

val ColorScheme.extended: ExtendedColors
    @Composable
    get() = LocalExtendedColors.current

// ================= COLORES ADICIONALES VERDE PASTEL =================

// Colores específicos de la aplicación
val PrimaryGreen = Color(0xFF4CAF50)
val SecondaryGreenLight = Color(0xFF81C784)
val AccentGreenPastel = Color(0xFFA5D6A7)
val WarningOrange = Color(0xFFFF9800)

// Verdes para fondos y bordes
val Green50 = Color(0xFFF1F8E9)
val Green100 = Color(0xFFC8E6C9)
val Green200 = Color(0xFFA5D6A7)
val Green300 = Color(0xFF81C784)
val Green400 = Color(0xFF66BB6A)
val Green500 = Color(0xFF4CAF50)
val Green600 = Color(0xFF43A047)
val Green700 = Color(0xFF388E3C)
val Green800 = Color(0xFF2E7D32)
val Green900 = Color(0xFF1B5E20)

// Colores verde pastel suave para Market Sales
val VerdePrimario = Color(0xFF90EE90)      // Verde claro pastel
val VerdeSecundario = Color(0xFF98FB98)     // Verde pálido
val VerdeTerciario = Color(0xFFAFEEAF)      // Verde muy claro

// Colores de fondo y superficie
val FondoClaro = Color(0xFFF5F5F5)          // Gris muy claro
val BlancoTexto = Color(0xFFFFFFFF)         // Blanco puro
val NegroTexto = Color(0xFF000000)          // Negro puro
val GrisOscuro = Color(0xFF424242)          // Gris oscuro para modo oscuro

// Colores adicionales
val GrisClaro = Color(0xFFE0E0E0)           // Gris claro para bordes
val AzulAccento = Color(0xFF2196F3)         // Azul para enlaces
val RojoError = Color(0xFFF44336)           // Rojo para errores
val VerdeExito = Color(0xFF4CAF50)          // Verde para éxito

// app/src/main/java/es/nuskysoftware/marketsales/ui/theme/LocalConfiguration.kt
package es.nuskysoftware.marketsales.ui.theme

import androidx.compose.runtime.Composable
import androidx.compose.runtime.compositionLocalOf
import es.nuskysoftware.marketsales.utils.ConfigurationManager

/**
 * CompositionLocal que proporciona acceso al ConfigurationManager
 * en cualquier parte del árbol de composición
 */
val LocalConfigurationManager = compositionLocalOf<ConfigurationManager> {
    error("ConfigurationManager no proporcionado")
}

/**
 * Función para acceder al ConfigurationManager actual
 */
@Composable
fun getConfigurationManager(): ConfigurationManager {
    return LocalConfigurationManager.current
}

package es.nuskysoftware.marketsales.ui.theme

import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Shapes
import androidx.compose.ui.unit.dp

/**
 * Shape.kt - Market Sales
 * Definición de formas para componentes Material3
 */

val Shapes = Shapes(
    // Formas pequeñas - para botones, chips, etc.
    small = RoundedCornerShape(4.dp),

    // Formas medianas - para cards, dialogs, etc.
    medium = RoundedCornerShape(8.dp),

    // Formas grandes - para bottom sheets, navigation drawers, etc.
    large = RoundedCornerShape(16.dp)
)

// Formas personalizadas adicionales
object CustomShapes {
    val extraSmall = RoundedCornerShape(2.dp)
    val extraLarge = RoundedCornerShape(24.dp)
    val circular = RoundedCornerShape(50)

    // Formas específicas para la app
    val cardShape = RoundedCornerShape(12.dp)
    val buttonShape = RoundedCornerShape(8.dp)
    val fabShape = RoundedCornerShape(16.dp)
    val dialogShape = RoundedCornerShape(20.dp)
}

// app/src/main/java/es/nuskysoftware/marketsales/ui/theme/Theme.kt
package es.nuskysoftware.marketsales.ui.theme

import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.runtime.CompositionLocalProvider
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue

// Esquema de colores claro con verde pastel suave
private val LightColorScheme = lightColorScheme(
    primary = VerdePrimario,
    onPrimary = BlancoTexto,
    secondary = VerdeSecundario,
    onSecondary = BlancoTexto,
    tertiary = VerdeTerciario,
    background = FondoClaro,
    surface = BlancoTexto,
    onBackground = NegroTexto,
    onSurface = NegroTexto
)

// Esquema de colores oscuro con verde pastel suave adaptado
private val DarkColorScheme = darkColorScheme(
    primary = VerdePrimario,
    onPrimary = BlancoTexto,
    secondary = VerdeSecundario,
    onSecondary = BlancoTexto,
    tertiary = VerdeTerciario,
    background = NegroTexto,
    surface = GrisOscuro,
    onBackground = BlancoTexto,
    onSurface = BlancoTexto
)

@Composable
fun MarketSalesTheme(
    configurationManager: es.nuskysoftware.marketsales.utils.ConfigurationManager,
    content: @Composable () -> Unit
) {
    // Observar cambios usando los StateFlow que SÍ existen
    val isDarkTheme by configurationManager.temaOscuro.collectAsState()
    val currentFont by configurationManager.fuente.collectAsState()

    // Seleccionar esquema de colores
    val colorScheme = if (isDarkTheme) {
        DarkColorScheme
    } else {
        LightColorScheme
    }

    // Obtener tipografía basada en la fuente configurada
    val typography = getTypographyForFont(currentFont)

    // Proporcionar el ConfigurationManager a todo el árbol de composición
    CompositionLocalProvider(
        LocalConfigurationManager provides configurationManager
    ) {
        MaterialTheme(
            colorScheme = colorScheme,
            typography = typography,
            shapes = Shapes,
            content = content
        )
    }
}

/**
 * Función para obtener la tipografía según la fuente seleccionada
 */
@Composable
private fun getTypographyForFont(fontName: String) = when (fontName) {
    "Montserrat" -> MontserratTypography
    "Poppins" -> PoppinsTypography
    "Roboto" -> RobotoTypography
    else -> MontserratTypography // Por defecto
}

package es.nuskysoftware.marketsales.ui.theme

import androidx.compose.material3.Typography
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.Font
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp
import es.nuskysoftware.marketsales.R


/**
 * Type.kt - Market Sales
 * ✅ Múltiples familias tipográficas dinámicas
 */

// ------------------- Definimos las familias tipográficas -------------------
val Montserrat = FontFamily(
    Font(R.font.montserrat_regular, FontWeight.Normal),
    Font(R.font.montserrat_medium, FontWeight.Medium),
    Font(R.font.montserrat_bold, FontWeight.Bold)
)

val Poppins = FontFamily(
    Font(R.font.poppins_regular, FontWeight.Normal),
    Font(R.font.poppins_medium, FontWeight.Medium),
    Font(R.font.poppins_bold, FontWeight.Bold)
)

val Roboto = FontFamily.Default // Roboto viene por defecto en Android

// ------------------- Función para crear Typography con fuente específica -------------------
private fun createTypography(fontFamily: FontFamily): Typography {
    return Typography(
        // Título grande (pantallas principales)
        titleLarge = TextStyle(
            fontFamily = fontFamily,
            fontWeight = FontWeight.Bold,
            fontSize = 22.sp
        ),
        // Título medio
        titleMedium = TextStyle(
            fontFamily = fontFamily,
            fontWeight = FontWeight.Medium,
            fontSize = 18.sp
        ),
        // Texto normal
        bodyLarge = TextStyle(
            fontFamily = fontFamily,
            fontWeight = FontWeight.Normal,
            fontSize = 16.sp
        ),
        // Texto pequeño
        bodyMedium = TextStyle(
            fontFamily = fontFamily,
            fontWeight = FontWeight.Normal,
            fontSize = 14.sp
        )
    )
}

// ------------------- Tipografías precreadas -------------------
val MontserratTypography = createTypography(Montserrat)
val PoppinsTypography = createTypography(Poppins)
val RobotoTypography = createTypography(Roboto)

// app/src/main/java/es/nuskysoftware/marketsales/ui/viewmodel/ArticuloViewModel.kt
package es.nuskysoftware.marketsales.ui.viewmodel

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import es.nuskysoftware.marketsales.data.local.entity.ArticuloEntity
import es.nuskysoftware.marketsales.data.repository.ArticuloRepository
import kotlinx.coroutines.flow.*
import kotlinx.coroutines.launch

/**
 * ArticuloViewModel V11 - Market Sales
 *
 * ARQUITECTURA REACTIVA:
 * - StateFlow para estados reactivos
 * - Observa cambios en tiempo real
 * - Compatible con sistema híbrido "Reloj Suizo"
 * - Estados de UI para loading, errores, etc.
 * - Validaciones Premium para campos de coste y stock
 */
class ArticuloViewModel(
    private val repository: ArticuloRepository
) : ViewModel() {

    companion object {
        private const val TAG = "ArticuloViewModel"
    }

    // ========== ESTADOS REACTIVOS ==========

    private val _uiState = MutableStateFlow(ArticuloUiState())
    val uiState: StateFlow<ArticuloUiState> = _uiState.asStateFlow()

    // Artículos del usuario actual en tiempo real
    val articulos = repository.getArticulosUsuarioActual()
        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5_000), emptyList())

    init {
        Log.d(TAG, "✅ ArticuloViewModel inicializado")
    }

    // ========== OPERACIONES CRUD ==========

    /**
     * Crea un nuevo artículo
     */
    fun crearArticulo(
        nombre: String,
        idCategoria: String,
        precioVenta: Double,
        precioCoste: Double? = null,
        stock: Int? = null,
        controlarStock: Boolean = false,
        controlarCoste: Boolean = false,
        favorito: Boolean = false,
        fotoUri: String? = null
    ) {
        viewModelScope.launch {
            _uiState.value = _uiState.value.copy(loading = true, error = null)

            try {
                // Validar datos básicos
                val validacionNombre = validarNombreArticulo(nombre)
                if (validacionNombre != null) {
                    _uiState.value = _uiState.value.copy(
                        loading = false,
                        error = validacionNombre
                    )
                    return@launch
                }

                val validacionPrecio = validarPrecioVenta(precioVenta)
                if (validacionPrecio != null) {
                    _uiState.value = _uiState.value.copy(
                        loading = false,
                        error = validacionPrecio
                    )
                    return@launch
                }

                // Validar nombre duplicado
                if (repository.existeArticuloConNombre(nombre)) {
                    _uiState.value = _uiState.value.copy(
                        loading = false,
                        error = "Ya existe un artículo con ese nombre"
                    )
                    return@launch
                }

                // Validar campos Premium si están activos
                if (controlarCoste && precioCoste != null) {
                    val validacionCoste = validarPrecioCoste(precioCoste)
                    if (validacionCoste != null) {
                        _uiState.value = _uiState.value.copy(
                            loading = false,
                            error = validacionCoste
                        )
                        return@launch
                    }
                }

                if (controlarStock && stock != null) {
                    val validacionStock = validarStock(stock)
                    if (validacionStock != null) {
                        _uiState.value = _uiState.value.copy(
                            loading = false,
                            error = validacionStock
                        )
                        return@launch
                    }
                }

                val articuloId = repository.crearArticulo(
                    nombre = nombre,
                    idCategoria = idCategoria,
                    precioVenta = precioVenta,
                    precioCoste = precioCoste,
                    stock = stock,
                    controlarStock = controlarStock,
                    controlarCoste = controlarCoste,
                    favorito = favorito,
                    fotoUri = fotoUri
                )

                _uiState.value = _uiState.value.copy(
                    loading = false,
                    message = "Artículo creado exitosamente",
                    error = null
                )

                Log.d(TAG, "✅ Artículo creado: $nombre (ID: $articuloId)")

            } catch (e: Exception) {
                _uiState.value = _uiState.value.copy(
                    loading = false,
                    error = "Error creando artículo: ${e.message}"
                )
                Log.e(TAG, "❌ Error creando artículo", e)
            }
        }
    }

    /**
     * Actualiza un artículo existente
     */
    fun actualizarArticulo(articulo: ArticuloEntity) {
        viewModelScope.launch {
            _uiState.value = _uiState.value.copy(loading = true, error = null)

            try {
                // Validar datos básicos
                val validacionNombre = validarNombreArticulo(articulo.nombre)
                if (validacionNombre != null) {
                    _uiState.value = _uiState.value.copy(
                        loading = false,
                        error = validacionNombre
                    )
                    return@launch
                }

                val validacionPrecio = validarPrecioVenta(articulo.precioVenta)
                if (validacionPrecio != null) {
                    _uiState.value = _uiState.value.copy(
                        loading = false,
                        error = validacionPrecio
                    )
                    return@launch
                }

                // Validar nombre duplicado (excluyendo el artículo actual)
                if (repository.existeArticuloConNombre(articulo.nombre, articulo.idArticulo)) {
                    _uiState.value = _uiState.value.copy(
                        loading = false,
                        error = "Ya existe un artículo con ese nombre"
                    )
                    return@launch
                }

                // Validar campos Premium si están activos
                if (articulo.controlarCoste && articulo.precioCoste != null) {
                    val validacionCoste = validarPrecioCoste(articulo.precioCoste)
                    if (validacionCoste != null) {
                        _uiState.value = _uiState.value.copy(
                            loading = false,
                            error = validacionCoste
                        )
                        return@launch
                    }
                }

                if (articulo.controlarStock && articulo.stock != null) {
                    val validacionStock = validarStock(articulo.stock)
                    if (validacionStock != null) {
                        _uiState.value = _uiState.value.copy(
                            loading = false,
                            error = validacionStock
                        )
                        return@launch
                    }
                }

                val exito = repository.actualizarArticulo(articulo)

                if (exito) {
                    _uiState.value = _uiState.value.copy(
                        loading = false,
                        message = "Artículo actualizado exitosamente",
                        error = null
                    )
                    Log.d(TAG, "✅ Artículo actualizado: ${articulo.nombre}")
                } else {
                    _uiState.value = _uiState.value.copy(
                        loading = false,
                        error = "Error actualizando artículo"
                    )
                }

            } catch (e: Exception) {
                _uiState.value = _uiState.value.copy(
                    loading = false,
                    error = "Error actualizando artículo: ${e.message}"
                )
                Log.e(TAG, "❌ Error actualizando artículo", e)
            }
        }
    }

    /**
     * Elimina un artículo
     */
    fun eliminarArticulo(articulo: ArticuloEntity) {
        viewModelScope.launch {
            _uiState.value = _uiState.value.copy(loading = true, error = null)

            try {
                val exito = repository.eliminarArticulo(articulo)

                if (exito) {
                    _uiState.value = _uiState.value.copy(
                        loading = false,
                        message = "Artículo eliminado exitosamente",
                        error = null
                    )
                    Log.d(TAG, "✅ Artículo eliminado: ${articulo.nombre}")
                } else {
                    _uiState.value = _uiState.value.copy(
                        loading = false,
                        error = "Error eliminando artículo"
                    )
                }

            } catch (e: Exception) {
                _uiState.value = _uiState.value.copy(
                    loading = false,
                    error = "Error eliminando artículo: ${e.message}"
                )
                Log.e(TAG, "❌ Error eliminando artículo", e)
            }
        }
    }

    /**
     * Obtiene un artículo por ID
     */
    suspend fun getArticuloById(id: String): ArticuloEntity? {
        return try {
            repository.getArticuloById(id)
        } catch (e: Exception) {
            Log.e(TAG, "❌ Error obteniendo artículo por ID: $id", e)
            null
        }
    }

    /**
     * Obtiene artículos filtrados por categoría
     */
    fun getArticulosByCategoria(categoriaId: String): Flow<List<ArticuloEntity>> {
        return repository.getArticulosByCategoria(categoriaId)
    }

    /**
     * Busca artículos por nombre
     */
    fun searchArticulos(query: String): Flow<List<ArticuloEntity>> {
        return repository.searchArticulos(query)
    }

    // ========== SINCRONIZACIÓN ==========

    /**
     * Fuerza sincronización manual
     */
    fun forzarSincronizacion() {
        viewModelScope.launch {
            _uiState.value = _uiState.value.copy(loading = true, error = null)

            try {
                val exito = repository.forzarSincronizacion()

                _uiState.value = _uiState.value.copy(
                    loading = false,
                    message = if (exito) "Sincronización completada" else "Error en sincronización",
                    error = if (!exito) "No se pudo completar la sincronización" else null
                )

                Log.d(TAG, if (exito) "✅ Sincronización forzada exitosa" else "⚠️ Error en sincronización forzada")

            } catch (e: Exception) {
                _uiState.value = _uiState.value.copy(
                    loading = false,
                    error = "Error en sincronización: ${e.message}"
                )
                Log.e(TAG, "❌ Error en sincronización forzada", e)
            }
        }
    }

    // ========== GESTIÓN DE UI ==========

    /**
     * Limpia mensajes de error o éxito
     */
    fun limpiarMensajes() {
        _uiState.value = _uiState.value.copy(
            error = null,
            message = null
        )
    }

    /**
     * Limpia solo el mensaje de error
     */
    fun limpiarError() {
        _uiState.value = _uiState.value.copy(error = null)
    }

    /**
     * Limpia solo el mensaje de éxito
     */
    fun limpiarMensaje() {
        _uiState.value = _uiState.value.copy(message = null)
    }

    // ========== VALIDACIONES ==========

    /**
     * Valida si un nombre de artículo es válido
     */
    fun validarNombreArticulo(nombre: String): String? {
        return when {
            nombre.isBlank() -> "El nombre no puede estar vacío"
            nombre.length < 2 -> "El nombre debe tener al menos 2 caracteres"
            nombre.length > 100 -> "El nombre no puede tener más de 100 caracteres"
            else -> null
        }
    }

    /**
     * Valida si un precio de venta es válido
     */
    fun validarPrecioVenta(precio: Double): String? {
        return when {
            precio < 0 -> "El precio no puede ser negativo"
            precio > 999999.99 -> "El precio es demasiado alto"
            else -> null
        }
    }

    /**
     * Valida si un precio de coste es válido
     */
    fun validarPrecioCoste(precio: Double): String? {
        return when {
            precio < 0 -> "El precio de coste no puede ser negativo"
            precio > 999999.99 -> "El precio de coste es demasiado alto"
            else -> null
        }
    }

    /**
     * Valida si un stock es válido
     */
    fun validarStock(stock: Int): String? {
        return when {
            stock < 0 -> "El stock no puede ser negativo"
            stock > 999999 -> "El stock es demasiado alto"
            else -> null
        }
    }

    // ========== UTILIDADES ==========

    /**
     * Obtiene el número total de artículos del usuario
     */
    val totalArticulos: StateFlow<Int> = articulos
        .map { it.size }
        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5_000), 0)

    /**
     * Indica si hay artículos creados
     */
    val tieneArticulos: StateFlow<Boolean> = articulos
        .map { it.isNotEmpty() }
        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5_000), false)

    /**
     * Artículos favoritos
     */
    val articulosFavoritos: StateFlow<List<ArticuloEntity>> = articulos
        .map { lista -> lista.filter { it.favorito } }
        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5_000), emptyList())

    /**
     * Artículos con stock bajo (menos de 5 unidades)
     */
    val articulosStockBajo: StateFlow<List<ArticuloEntity>> = articulos
        .map { lista ->
            lista.filter { articulo ->
                articulo.controlarStock && articulo.stock != null && articulo.stock < 5
            }
        }
        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5_000), emptyList())
}

/**
 * Estado de la UI del ArticuloViewModel
 */
data class ArticuloUiState(
    val loading: Boolean = false,
    val error: String? = null,
    val message: String? = null
)

// app/src/main/java/es/nuskysoftware/marketsales/ui/viewmodel/ArticuloViewModelFactory.kt
package es.nuskysoftware.marketsales.ui.viewmodel

import android.content.Context
import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import es.nuskysoftware.marketsales.data.repository.ArticuloRepository

/**
 * Factory para ArticuloViewModel que inyecta ArticuloRepository con Context
 * ✅ FINAL: Context requerido para ArticuloRepository (AppDatabase + ConnectivityObserver)
 */
class ArticuloViewModelFactory(
    private val context: Context
) : ViewModelProvider.Factory {

    @Suppress("UNCHECKED_CAST")
    override fun <T : ViewModel> create(modelClass: Class<T>): T {
        if (modelClass.isAssignableFrom(ArticuloViewModel::class.java)) {
            return ArticuloViewModel(ArticuloRepository(context)) as T
        }
        throw IllegalArgumentException("Unknown ViewModel class: ${modelClass.name}")
    }
}

package es.nuskysoftware.marketsales.ui.viewmodel

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.google.firebase.auth.EmailAuthProvider
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.UserProfileChangeRequest
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch
import kotlinx.coroutines.tasks.await
import es.nuskysoftware.marketsales.data.repository.AuthRepository
import es.nuskysoftware.marketsales.data.repository.AuthResult
import es.nuskysoftware.marketsales.data.repository.AuthState
import com.google.firebase.auth.FirebaseUser
import es.nuskysoftware.marketsales.utils.ConfigurationManager

class AuthViewModel(
    private val authRepository: AuthRepository
) : ViewModel() {

    companion object {
        private const val TAG = "AuthViewModel"
    }

    // ✅ AÑADIR: Referencia a FirebaseAuth
    private val firebaseAuth = FirebaseAuth.getInstance()

    // Estados expuestos
    val authState: StateFlow<AuthState> = authRepository.authState
    val currentUser: StateFlow<FirebaseUser?> = authRepository.currentUser

    init {
        Log.d(TAG, "AuthViewModel inicializado")

        // Testing inicial (mantener para verificar funcionamiento)
        testAuthConnection()
    }

    // ✅ FASE 1 - Funciones de testing (mantener)
    private fun testAuthConnection() {
        viewModelScope.launch {
            try {
                val connectionTest = authRepository.testConnection()
                val isAuthenticated = authRepository.isUserAuthenticated()
                val user = currentUser.value

                Log.d(TAG, "✅ DEBUG AuthViewModel - Test resultados:")
                Log.d(TAG, "   - Conexión Firebase: $connectionTest")
                Log.d(TAG, "   - Usuario autenticado: $isAuthenticated")
                Log.d(TAG, "   - Usuario actual: ${user?.email ?: "null"}")

            } catch (e: Exception) {
                Log.e(TAG, "Error en test de conexión", e)
            }
        }
    }

    // 🔐 FASE 2 - FUNCIONES DE AUTENTICACIÓN CON SAFE CALLS

    /**
     * Registrar nuevo usuario con email y contraseña
     */
    fun registerWithEmail(email: String, password: String) {
        viewModelScope.launch {
            Log.d(TAG, "ViewModel: Iniciando registro para $email")

            try {
                when (val result = authRepository.registerWithEmail(email, password)) {
                    is AuthResult.Success -> {
                        Log.d(TAG, "ViewModel: Registro exitoso - ${result.user?.email ?: "sin email"}")
                        // El estado se actualiza automáticamente vía StateFlow
                    }
                    is AuthResult.Error -> {
                        Log.e(TAG, "ViewModel: Error en registro - ${result.message}")
                        // El estado de error se maneja automáticamente
                    }
                }
            } catch (e: Exception) {
                Log.e(TAG, "ViewModel: Excepción no controlada en registro", e)
            }
        }
    }

    /**
     * Iniciar sesión con email y contraseña
     */
    fun loginWithEmail(email: String, password: String) {
        viewModelScope.launch {
            Log.d(TAG, "ViewModel: Iniciando login para $email")

            try {
                when (val result = authRepository.loginWithEmail(email, password)) {
                    is AuthResult.Success -> {
                        Log.d(TAG, "ViewModel: Login exitoso - ${result.user?.email ?: "sin email"}")
                        // El estado se actualiza automáticamente vía StateFlow
                    }
                    is AuthResult.Error -> {
                        Log.e(TAG, "ViewModel: Error en login - ${result.message}")
                        // El estado de error se maneja automáticamente
                    }
                }
            } catch (e: Exception) {
                Log.e(TAG, "ViewModel: Excepción no controlada en login", e)
            }
        }
    }

    // 🚀 FASE 3 - GOOGLE AUTH V8 - NUEVO MÉTODO IMPLEMENTADO
    /**
     * Iniciar sesión con Google usando idToken
     */
    fun signInWithGoogle(idToken: String) {
        viewModelScope.launch {
            Log.d(TAG, "ViewModel: Iniciando Google Auth")

            try {
                when (val result = authRepository.signInWithGoogle(idToken)) {
                    is AuthResult.Success -> {
                        Log.d(TAG, "ViewModel: Google Auth exitoso - ${result.user?.email ?: "sin email"}")
                        Log.d(TAG, "ViewModel: Usuario Google - ${result.user?.displayName ?: "sin nombre"}")
                        // El estado se actualiza automáticamente vía StateFlow
                    }
                    is AuthResult.Error -> {
                        Log.e(TAG, "ViewModel: Error en Google Auth - ${result.message}")
                        // El estado de error se maneja automáticamente
                    }
                }
            } catch (e: Exception) {
                Log.e(TAG, "ViewModel: Excepción no controlada en Google Auth", e)
            }
        }
    }

    /**
     * Cerrar sesión
     */
    fun logout() {
        viewModelScope.launch {
            Log.d(TAG, "ViewModel: Iniciando logout")

            try {
                when (val result = authRepository.logout()) {
                    is AuthResult.Success -> {
                        Log.d(TAG, "ViewModel: Logout exitoso")
                        // El estado se actualiza automáticamente vía StateFlow
                    }
                    is AuthResult.Error -> {
                        Log.e(TAG, "ViewModel: Error en logout - ${result.message}")
                        // El estado de error se maneja automáticamente
                    }
                }
            } catch (e: Exception) {
                Log.e(TAG, "ViewModel: Excepción no controlada en logout", e)
            }
        }
    }

    /**
     * Verificar si el usuario está autenticado
     */
    fun isUserAuthenticated(): Boolean {
        return authRepository.isUserAuthenticated()
    }

    /**
     * Limpiar errores de autenticación
     */
    fun clearAuthError() {
        Log.d(TAG, "ViewModel: Limpiando errores de autenticación")
    }

    /**
     * Actualiza el perfil del usuario (nombre y email)
     */

    suspend fun updateUserProfile(displayName: String, email: String): Boolean {
        return try {
            val user = firebaseAuth.currentUser ?: return false

            Log.d(TAG, "🔄 ANTES: user.displayName = ${user.displayName}")
            Log.d(TAG, "🔄 NUEVO: displayName = $displayName")

            // 1. Actualizar en Firebase Auth
            val profileUpdates = UserProfileChangeRequest.Builder()
                .setDisplayName(displayName)
                .build()

            user.updateProfile(profileUpdates).await()
            user.reload().await()

            Log.d(TAG, "🔄 DESPUÉS Firebase reload: user.displayName = ${user.displayName}")

            // 2. Actualizar email si es diferente
            if (user.email != email) {
                user.updateEmail(email).await()
            }

            // 3. ✅ CLAVE: Actualizar UserRepository Y marcar como no sincronizado
            authRepository.updateUserProfileAndMarkDirty(user.uid, displayName, email)

            // 4. Actualizar ConfigurationManager
            ConfigurationManager.updateUserConfiguration(
                displayName = displayName,
                usuarioEmail = email,
                isAuthenticated = true
            )

            Log.d(TAG, "🔄 ConfigurationManager.displayName = ${ConfigurationManager.displayName.value}")

            true

        } catch (e: Exception) {
            Log.e(TAG, "❌ Error actualizando perfil", e)
            false
        }
    }


    /**
     * Cambia la contraseña del usuario
     */
    suspend fun updatePassword(currentPassword: String, newPassword: String): Boolean {
        return try {
            val user = firebaseAuth.currentUser ?: return false
            val email = user.email ?: return false

            // Primero reautenticar con la contraseña actual
            val credential = EmailAuthProvider.getCredential(email, currentPassword)
            user.reauthenticate(credential).await()

            // Cambiar la contraseña
            user.updatePassword(newPassword).await()

            Log.d(TAG, "✅ Contraseña actualizada correctamente")
            true

        } catch (e: Exception) {
            Log.e(TAG, "❌ Error cambiando contraseña", e)
            false
        }
    }
}


// app/src/main/java/es/nuskysoftware/marketsales/ui/viewmodel/AuthViewModelFactory.kt
package es.nuskysoftware.marketsales.ui.viewmodel

import android.content.Context
import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import es.nuskysoftware.marketsales.data.repository.AuthRepository

/**
 * Factory para AuthViewModel que inyecta AuthRepository con Context
 * ✅ FINAL: Context requerido para AuthRepository
 */
class AuthViewModelFactory(
    private val context: Context
) : ViewModelProvider.Factory {

    @Suppress("UNCHECKED_CAST")
    override fun <T : ViewModel> create(modelClass: Class<T>): T {
        if (modelClass.isAssignableFrom(AuthViewModel::class.java)) {
            return AuthViewModel(AuthRepository(context)) as T
        }
        throw IllegalArgumentException("Unknown ViewModel class: ${modelClass.name}")
    }
}


// app/src/main/java/es/nuskysoftware/marketsales/data/viewmodel/CategoriaViewModel.kt
package es.nuskysoftware.marketsales.ui.viewmodel

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import es.nuskysoftware.marketsales.data.local.entity.CategoriaEntity
import es.nuskysoftware.marketsales.data.repository.CategoriaRepository
import kotlinx.coroutines.flow.*
import kotlinx.coroutines.launch

/**
 * CategoriaViewModel V11 - Market Sales
 *
 * ARQUITECTURA REACTIVA:
 * - StateFlow para estados reactivos
 * - Observa cambios en tiempo real
 * - Compatible con sistema híbrido "Reloj Suizo"
 * - Estados de UI para loading, errores, etc.
 */
class CategoriaViewModel(
    private val repository: CategoriaRepository
) : ViewModel() {

    companion object {
        private const val TAG = "CategoriaViewModel"
    }

    // ========== ESTADOS REACTIVOS ==========

    private val _uiState = MutableStateFlow(CategoriaUiState())
    val uiState: StateFlow<CategoriaUiState> = _uiState.asStateFlow()

    // Categorías del usuario actual en tiempo real
    val categorias = repository.getCategoriasUsuarioActual()
        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5_000), emptyList())

    init {
        Log.d(TAG, "✅ CategoriaViewModel inicializado")
    }

    // ========== OPERACIONES CRUD ==========

    /**
     * Crea una nueva categoría
     */
    fun crearCategoria(
        nombre: String,
        colorHex: String,
        orden: Int = 0
    ) {
        viewModelScope.launch {
            _uiState.value = _uiState.value.copy(loading = true, error = null)

            try {
                // Validar nombre duplicado
                if (repository.existeCategoriaConNombre(nombre)) {
                    _uiState.value = _uiState.value.copy(
                        loading = false,
                        error = "Ya existe una categoría con ese nombre"
                    )
                    return@launch
                }

                val categoriaId = repository.crearCategoria(nombre, colorHex, orden)

                _uiState.value = _uiState.value.copy(
                    loading = false,
                    message = "Categoría creada exitosamente",
                    error = null
                )

                Log.d(TAG, "✅ Categoría creada: $nombre (ID: $categoriaId)")

            } catch (e: Exception) {
                _uiState.value = _uiState.value.copy(
                    loading = false,
                    error = "Error creando categoría: ${e.message}"
                )
                Log.e(TAG, "❌ Error creando categoría", e)
            }
        }
    }

    /**
     * Actualiza una categoría existente
     */
    fun actualizarCategoria(categoria: CategoriaEntity) {
        viewModelScope.launch {
            _uiState.value = _uiState.value.copy(loading = true, error = null)

            try {
                // Validar nombre duplicado (excluyendo la categoría actual)
                if (repository.existeCategoriaConNombre(categoria.nombre, categoria.idCategoria)) {
                    _uiState.value = _uiState.value.copy(
                        loading = false,
                        error = "Ya existe una categoría con ese nombre"
                    )
                    return@launch
                }

                val exito = repository.actualizarCategoria(categoria)

                if (exito) {
                    _uiState.value = _uiState.value.copy(
                        loading = false,
                        message = "Categoría actualizada exitosamente",
                        error = null
                    )
                    Log.d(TAG, "✅ Categoría actualizada: ${categoria.nombre}")
                } else {
                    _uiState.value = _uiState.value.copy(
                        loading = false,
                        error = "Error actualizando categoría"
                    )
                }

            } catch (e: Exception) {
                _uiState.value = _uiState.value.copy(
                    loading = false,
                    error = "Error actualizando categoría: ${e.message}"
                )
                Log.e(TAG, "❌ Error actualizando categoría", e)
            }
        }
    }

    /**
     * Elimina una categoría
     */
    fun eliminarCategoria(categoria: CategoriaEntity) {
        viewModelScope.launch {
            _uiState.value = _uiState.value.copy(loading = true, error = null)

            try {
                val exito = repository.eliminarCategoria(categoria)

                if (exito) {
                    _uiState.value = _uiState.value.copy(
                        loading = false,
                        message = "Categoría eliminada exitosamente",
                        error = null
                    )
                    Log.d(TAG, "✅ Categoría eliminada: ${categoria.nombre}")
                } else {
                    _uiState.value = _uiState.value.copy(
                        loading = false,
                        error = "Error eliminando categoría"
                    )
                }

            } catch (e: Exception) {
                _uiState.value = _uiState.value.copy(
                    loading = false,
                    error = "Error eliminando categoría: ${e.message}"
                )
                Log.e(TAG, "❌ Error eliminando categoría", e)
            }
        }
    }

    /**
     * Obtiene una categoría por ID
     */
    suspend fun getCategoriaById(id: String): CategoriaEntity? {
        return try {
            repository.getCategoriaById(id)
        } catch (e: Exception) {
            Log.e(TAG, "❌ Error obteniendo categoría por ID: $id", e)
            null
        }
    }

    // ========== SINCRONIZACIÓN ==========

    /**
     * Fuerza sincronización manual
     */
    fun forzarSincronizacion() {
        viewModelScope.launch {
            _uiState.value = _uiState.value.copy(loading = true, error = null)

            try {
                val exito = repository.forzarSincronizacion()

                _uiState.value = _uiState.value.copy(
                    loading = false,
                    message = if (exito) "Sincronización completada" else "Error en sincronización",
                    error = if (!exito) "No se pudo completar la sincronización" else null
                )

                Log.d(TAG, if (exito) "✅ Sincronización forzada exitosa" else "⚠️ Error en sincronización forzada")

            } catch (e: Exception) {
                _uiState.value = _uiState.value.copy(
                    loading = false,
                    error = "Error en sincronización: ${e.message}"
                )
                Log.e(TAG, "❌ Error en sincronización forzada", e)
            }
        }
    }

    // ========== GESTIÓN DE UI ==========

    /**
     * Limpia mensajes de error o éxito
     */
    fun limpiarMensajes() {
        _uiState.value = _uiState.value.copy(
            error = null,
            message = null
        )
    }

    /**
     * Limpia solo el mensaje de error
     */
    fun limpiarError() {
        _uiState.value = _uiState.value.copy(error = null)
    }

    /**
     * Limpia solo el mensaje de éxito
     */
    fun limpiarMensaje() {
        _uiState.value = _uiState.value.copy(message = null)
    }

    // ========== VALIDACIONES ==========

    /**
     * Valida si un nombre de categoría es válido
     */
    fun validarNombreCategoria(nombre: String): String? {
        return when {
            nombre.isBlank() -> "El nombre no puede estar vacío"
            nombre.length < 2 -> "El nombre debe tener al menos 2 caracteres"
            nombre.length > 50 -> "El nombre no puede tener más de 50 caracteres"
            else -> null
        }
    }

    /**
     * Valida si un color hex es válido
     */
    fun validarColorHex(colorHex: String): String? {
        return if (colorHex.matches(Regex("^#[0-9A-Fa-f]{6}$"))) {
            null
        } else {
            "Color inválido"
        }
    }

    // ========== UTILIDADES ==========

    /**
     * Obtiene el número total de categorías del usuario
     */
    val totalCategorias: StateFlow<Int> = categorias
        .map { it.size }
        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5_000), 0)

    /**
     * Indica si hay categorías creadas
     */
    val tieneCategorias: StateFlow<Boolean> = categorias
        .map { it.isNotEmpty() }
        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5_000), false)
}

/**
 * Estado de la UI del CategoriaViewModel
 */
data class CategoriaUiState(
    val loading: Boolean = false,
    val error: String? = null,
    val message: String? = null
)


// app/src/main/java/es/nuskysoftware/marketsales/ui/viewmodel/CategoriaViewModelFactory.kt
package es.nuskysoftware.marketsales.ui.viewmodel

import android.content.Context
import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import es.nuskysoftware.marketsales.data.repository.CategoriaRepository

/**
 * Factory para CategoriaViewModel que inyecta CategoriaRepository con Context
 * ✅ FINAL: Context requerido para CategoriaRepository (AppDatabase + ConnectivityObserver)
 */
class CategoriaViewModelFactory(
    private val context: Context
) : ViewModelProvider.Factory {

    @Suppress("UNCHECKED_CAST")
    override fun <T : ViewModel> create(modelClass: Class<T>): T {
        if (modelClass.isAssignableFrom(CategoriaViewModel::class.java)) {
            return CategoriaViewModel(CategoriaRepository(context)) as T
        }
        throw IllegalArgumentException("Unknown ViewModel class: ${modelClass.name}")
    }
}

// app/src/main/java/es/nuskysoftware/marketsales/ui/viewmodel/ConfiguracionViewModel.kt
package es.nuskysoftware.marketsales.ui.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import es.nuskysoftware.marketsales.data.local.entity.ConfiguracionEntity
import es.nuskysoftware.marketsales.data.repository.ConfiguracionRepository
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch

class ConfiguracionViewModel(
    private val repository: ConfiguracionRepository
) : ViewModel() {

    val configuracion: StateFlow<ConfiguracionEntity?> = repository.configuracion

    init {
        // Crear configuración por defecto si no existe
        viewModelScope.launch {
            repository.crearConfiguracionPorDefecto()
        }
    }

    /**
     * Actualiza la contraseña del usuario
     */
    fun actualizarPassword(nuevaPassword: String) {
        viewModelScope.launch {
            repository.actualizarPassword(nuevaPassword)
        }
    }

    /**
     * Actualiza el tema (claro/oscuro)
     */
    fun actualizarTema(esTemaOscuro: Boolean) {
        viewModelScope.launch {
            repository.actualizarTema(esTemaOscuro)
        }
    }

    /**
     * Actualiza la fuente de la aplicación
     */
    fun actualizarFuente(fuente: String) {
        viewModelScope.launch {
            repository.actualizarFuente(fuente)
        }
    }

    /**
     * Actualiza el idioma de la aplicación
     */
    fun actualizarIdioma(idioma: String) {
        viewModelScope.launch {
            repository.actualizarIdioma(idioma)
        }
    }

    /**
     * Actualiza la moneda de la aplicación
     */
    fun actualizarMoneda(moneda: String) {
        viewModelScope.launch {
            repository.actualizarMoneda(moneda)
        }
    }

    /**
     * Actualiza la versión de la app (0=FREE, 1=PREMIUM)
     */
    fun actualizarVersion(version: Int) {
        viewModelScope.launch {
            repository.actualizarVersionApp(version)
        }
    }

    /**
     * Actualiza el email del usuario
     */
    fun actualizarEmail(email: String) {
        viewModelScope.launch {
            repository.actualizarUsuarioEmail(email)
        }
    }

    /**
     * Fuerza la sincronización con Firebase
     */
    fun sincronizar() {
        viewModelScope.launch {
            repository.sincronizar()
        }
    }
}

package es.nuskysoftware.marketsales.ui.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import es.nuskysoftware.marketsales.data.repository.ConfiguracionRepository

class ConfiguracionViewModelFactory(
    private val repository: ConfiguracionRepository
) : ViewModelProvider.Factory {

    @Suppress("UNCHECKED_CAST")
    override fun <T : ViewModel> create(modelClass: Class<T>): T {
        if (modelClass.isAssignableFrom(ConfiguracionViewModel::class.java)) {
            return ConfiguracionViewModel(repository) as T
        }
        throw IllegalArgumentException("Unknown ViewModel class")
    }
}

// app/src/main/java/es/nuskysoftware/marketsales/utils/ColorUtils.kt
package es.nuskysoftware.marketsales.utils

import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.toArgb
import kotlin.random.Random

/**
 * ColorUtils V11 - Market Sales
 *
 * Utilidades para manejo de colores en la aplicación.
 * Migrado desde Caja Mercadillos y adaptado para Market Sales.
 */

/**
 * Genera un color aleatorio en tonos pastel
 * Los colores pastel tienen valores RGB altos (150-255) para ser suaves y agradables
 */
fun generarColorAleatorioPastel(): Color {
    val r = Random.nextInt(150, 256)
    val g = Random.nextInt(150, 256)
    val b = Random.nextInt(150, 256)
    return Color(r, g, b)
}

/**
 * Convierte un Color de Compose a String HEX
 */
fun Color.toHexString(): String {
    return String.format("#%06X", 0xFFFFFF and this.toArgb())
}

/**
 * Convierte un String HEX a Color de Compose
 * @param hexString String en formato "#RRGGBB"
 * @return Color o Color.White si el formato es inválido
 */
fun hexStringToColor(hexString: String): Color {
    return try {
        Color(android.graphics.Color.parseColor(hexString))
    } catch (e: Exception) {
        Color.White
    }
}

/**
 * Verifica si un string es un color HEX válido
 */
fun isValidHexColor(hexString: String): Boolean {
    return hexString.matches(Regex("^#[0-9A-Fa-f]{6}$"))
}

/**
 * Obtiene un color de contraste (blanco o negro) según el brillo del color de fondo
 */
fun Color.getContrastColor(): Color {
    // Calcular luminancia usando la fórmula estándar
    val luminance = (0.299 * red + 0.587 * green + 0.114 * blue)
    return if (luminance > 0.5) Color.Black else Color.White
}

/**
 * Colores predefinidos pastel para categorías
 */
object ColoresPastelPredefinidos {
    val ROSA_PASTEL = Color(0xFFFFB6C1)
    val AZUL_PASTEL = Color(0xFFADD8E6)
    val VERDE_PASTEL = Color(0xFF98FB98)
    val AMARILLO_PASTEL = Color(0xFFFFFACD)
    val LAVANDA_PASTEL = Color(0xFFE6E6FA)
    val MELOCOTON_PASTEL = Color(0xFFFFDAB9)
    val MENTA_PASTEL = Color(0xFFF0FFF0)
    val CORAL_PASTEL = Color(0xFFF08080)

    /**
     * Lista de todos los colores predefinidos
     */
    val TODOS = listOf(
        ROSA_PASTEL,
        AZUL_PASTEL,
        VERDE_PASTEL,
        AMARILLO_PASTEL,
        LAVANDA_PASTEL,
        MELOCOTON_PASTEL,
        MENTA_PASTEL,
        CORAL_PASTEL
    )

    /**
     * Obtiene un color aleatorio de los predefinidos
     */
    fun obtenerAleatorio(): Color {
        return TODOS.random()
    }
}

// app/src/main/java/es/nuskysoftware/marketsales/utils/ConfigurationManager.kt
package es.nuskysoftware.marketsales.utils

import android.content.ContentValues.TAG
import android.util.Log
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow

/**
 * ✅ COMPLETO V10 - ConfigurationManager con TODOS los métodos necesarios
 */
object ConfigurationManager {

    // ========== ESTADOS V10 ==========
    private val _idioma = MutableStateFlow("es")
    private val _fuente = MutableStateFlow("Montserrat")
    private val _temaOscuro = MutableStateFlow(false)
    private val _moneda = MutableStateFlow("€ Euro")
    private val _usuarioLogueado = MutableStateFlow<String?>("usuario_default")
    // O si quieres que el valor inicial cuando nadie está logueado sea null:
    // private val _usuarioLogueado = MutableStateFlow<String?>(null)
    private val _usuarioEmail = MutableStateFlow<String?>(null)
    private val _displayName = MutableStateFlow<String?>(null)
    private val _versionApp = MutableStateFlow(0) // Para compatibilidad

    private val _isAuthenticated = MutableStateFlow(false)

    private var lastSuccessfulPremiumState: Boolean? = null

    private var lastUpdateTimestamp = 0L


    // ========== ESTADOS PÚBLICOS ==========
    val idioma: StateFlow<String> = _idioma.asStateFlow()
    val fuente: StateFlow<String> = _fuente.asStateFlow()
    val temaOscuro: StateFlow<Boolean> = _temaOscuro.asStateFlow()
    val moneda: StateFlow<String> = _moneda.asStateFlow()
    val usuarioEmail: StateFlow<String?> = _usuarioEmail.asStateFlow()
    val versionApp: StateFlow<Int> = _versionApp.asStateFlow()

    val isAuthenticated: StateFlow<Boolean> = _isAuthenticated.asStateFlow()
    val displayName: StateFlow<String?> = _displayName.asStateFlow()
    val usuarioLogueado: StateFlow<String?> = _usuarioLogueado.asStateFlow()

    private val _esPremium = MutableStateFlow(false)
    val esPremium: StateFlow<Boolean> = _esPremium.asStateFlow()

    // ========== MÉTODOS PRINCIPALES ==========
    fun updateUserConfigurationProtected(
        displayName: String? = null,
        usuarioEmail: String? = null,
        planUsuario: String = "FREE",
        isAuthenticated: Boolean = false,
        source: String = "unknown"
    ) {
        val currentTime = System.currentTimeMillis()

        // ✅ PROTECCIÓN: Si el displayName cambió hace menos de 5 segundos, no sobrescribir
        if (displayName != null && _displayName.value != displayName) {
            if (currentTime - lastUpdateTimestamp < 5000) {
                Log.w("ConfigurationManager", "🚫 PROTECCIÓN: Evitando sobrescribir displayName reciente")
                Log.w("ConfigurationManager", "   - Valor actual: ${_displayName.value}")
                Log.w("ConfigurationManager", "   - Valor que se quiere poner: $displayName")
                Log.w("ConfigurationManager", "   - Tiempo desde último cambio: ${currentTime - lastUpdateTimestamp}ms")
                return
            }
        }

        // Actualizar timestamp si hay cambio de displayName
        if (displayName != null && _displayName.value != displayName) {
            lastUpdateTimestamp = currentTime
            Log.d("ConfigurationManager", "🕒 Actualizando timestamp de protección")
        }

        // Llamar al método normal
        updateUserConfiguration(
            displayName = displayName,
            usuarioEmail = usuarioEmail,
            planUsuario = planUsuario,
            isAuthenticated = isAuthenticated
        )
    }
    /**
     * Obtiene el ID del usuario actual
     */
    fun getCurrentUserId(): String? {
        return _usuarioLogueado.value
    }

    // ========== MÉTODOS GET ==========
    fun getIdioma(): String = _idioma.value
    fun getFuente(): String = _fuente.value
    fun getModoOscuro(): Boolean = _temaOscuro.value
    fun getTemaOscuro(): Boolean = _temaOscuro.value
    fun getMoneda(): String = _moneda.value
    fun getUsuarioEmail(): String? = _usuarioEmail.value
    fun getUsuarioId(): String? = _usuarioLogueado.value.takeIf { it != "usuario_default" }
    fun getVersionApp(): Int = _versionApp.value
    fun getIsPremium(): Boolean = _esPremium.value

    // ========== MÉTODOS DE AUTENTICACIÓN ==========

    /**
     * Login de usuario
     */
    fun login(userId: String, email: String?, displayName: String? = null, isPremium: Boolean = false) {
        _usuarioLogueado.value = userId
        _usuarioEmail.value = email
        _displayName.value = displayName
       //_esPremium.value = isPremium
        setEsPremiumProtected(isPremium, "updateUserConfiguration")

        _versionApp.value = if (isPremium) 1 else 0
        _isAuthenticated.value = true
    }


    private fun setEsPremiumProtected(newValue: Boolean, source: String = "unknown") {
        val oldValue = _esPremium.value

        Log.d("ConfigurationManager", "🔄 INTENTO CAMBIO esPremium: $oldValue → $newValue")
        Log.d("ConfigurationManager", "   - Fuente: $source")
        Log.d("ConfigurationManager", "   - lastSuccessfulPremiumState: $lastSuccessfulPremiumState")
        Log.d("ConfigurationManager", "   - isAuthenticated: ${_isAuthenticated.value}")

        // 🛡️ PROTECCIÓN MEJORADA: Solo bloquear si usuario está autenticado
        if (oldValue == true && newValue == false && _isAuthenticated.value == true) {
            Log.e("ConfigurationManager", "🚨 BLOQUEANDO CAMBIO - Usuario autenticado premium")
            Thread.currentThread().stackTrace.take(15).forEach { frame ->
                Log.e("ConfigurationManager", "     at ${frame.className}.${frame.methodName}(${frame.fileName}:${frame.lineNumber})")
            }
            return
        }

        // ✅ PERMITIR logout cuando isAuthenticated = false
        if (oldValue == true && newValue == false && _isAuthenticated.value == false) {
            Log.w("ConfigurationManager", "✅ PERMITIENDO logout - Usuario no autenticado")
        }

        _esPremium.value = newValue
        Log.d("ConfigurationManager", "✅ esPremium cambiado: $oldValue → $newValue (fuente: $source)")
    }
    /**
     * Logout de usuario
     */

    fun logout() {
        Log.d("ConfigurationManager", "🚪 logout() llamado!")
        Log.d("ConfigurationManager", "   - esPremium antes: ${_esPremium.value}")
        Log.d("ConfigurationManager", "   - STACK TRACE:")
        Thread.currentThread().stackTrace.take(8).forEach { frame ->
            Log.d("ConfigurationManager", "     at ${frame.className}.${frame.methodName}(${frame.fileName}:${frame.lineNumber})")
        }

        // 🔓 Limpiar estado de protección en logout real
        lastSuccessfulPremiumState = null
        Log.d("ConfigurationManager", "   - Protección premium limpiada")

        // 🔄 Llamar a reset después de limpiar protección
        resetToDefaults()

        Log.d("ConfigurationManager", "   - esPremium después: ${_esPremium.value}")
        Log.d("ConfigurationManager", "   - ✅ Logout completado")
    }
    // ========== MÉTODOS DE CONFIGURACIÓN ==========

    /**
     * Verifica si el usuario puede cambiar configuración
     */
    fun canChangeConfiguration(): Boolean {
        return _esPremium.value
    }

    /**
     * Actualiza configuración global
     */
    fun updateGlobalConfiguration(
        idioma: String,
        fuente: String,
        temaOscuro: Boolean,
        moneda: String
    ) {
        _idioma.value = idioma
        _fuente.value = fuente
        _temaOscuro.value = temaOscuro
        _moneda.value = moneda
    }

    /**
     * Actualiza premium del usuario
     */
    fun updateUserPremium(isPremium: Boolean) {
        setEsPremiumProtected(isPremium, "updateUserConfiguration")
        _versionApp.value = if (isPremium) 1 else 0
    }

    // ========== MÉTODOS UPDATE EXISTENTES ==========
    fun updateConfiguration(
        idioma: String,
        fuente: String,
        modoOscuro: Boolean,
        isPremium: Boolean
    ) {
        _idioma.value = idioma
        _fuente.value = fuente
        _temaOscuro.value = modoOscuro
        setEsPremiumProtected(isPremium, "updateUserConfiguration")
        _versionApp.value = if (isPremium) 1 else 0
    }

    // Añade estos logs TEMPORALES en ConfigurationManager.kt en estos métodos:

    fun updateUserConfiguration(
        idioma: String = _idioma.value,
        fuente: String = _fuente.value,
        temaOscuro: Boolean = _temaOscuro.value,
        usuarioEmail: String? = _usuarioEmail.value,
        usuarioId: String? = null,
        planUsuario: String = "FREE",
        empresaId: String? = null,
        tipoUsuario: String? = null,
        displayName: String? = null,
        photoUrl: String? = null,
        isAuthenticated: Boolean = false,
        moneda: String = _moneda.value ,


        ) {
        // 🔍 LOG TEMPORAL
        Log.d("ConfigurationManager", "🔧 updateUserConfiguration llamado:")
        Log.d("ConfigurationManager", "   - planUsuario: $planUsuario")
        Log.d("ConfigurationManager", "   - isAuthenticated: $isAuthenticated")
        Log.d("ConfigurationManager", "   - esPremium antes: ${_esPremium.value}")

        Log.d("ConfigurationManager", "🔧 updateUserConfiguration - displayName recibido: $displayName")
        Log.d("ConfigurationManager", "🔧 _displayName.value antes: ${_displayName.value}")

        Log.d("ConfigurationManager", "🔧 FINAL updateUserConfiguration:")
        Log.d("ConfigurationManager", "   - displayName: ${_displayName.value}")
        Log.d("ConfigurationManager", "   - isAuthenticated: ${_isAuthenticated.value}")
        Log.d("ConfigurationManager", "   - esPremium: ${_esPremium.value}")


        // Actualizar valores de configuración
        _idioma.value = idioma
        _fuente.value = fuente
        _temaOscuro.value = temaOscuro
        _usuarioEmail.value = usuarioEmail
        _displayName.value = displayName
        _moneda.value = moneda
        _isAuthenticated.value = isAuthenticated

        // Calcular estado premium
        val isPremium = planUsuario == "PREMIUM" && isAuthenticated
        setEsPremiumProtected(isPremium, "updateUserConfiguration")
        _versionApp.value = if (isPremium) 1 else 0

        // Configurar usuario
        _usuarioLogueado.value = if (isAuthenticated && usuarioId != null) {
            usuarioId
        } else {
            "usuario_default"
        }

        // 💾 Guardar último estado premium válido para protección
        if (isPremium) {
            lastSuccessfulPremiumState = true
            Log.d("ConfigurationManager", "   - esPremium después: ${_esPremium.value}")
        }
        if (displayName != null) {
            _displayName.value = displayName
        }

        Log.d("ConfigurationManager", "🔧 _displayName.value después: ${_displayName.value}")

        // ... resto del código ...


        // 🔍 LOG TEMPORAL
        Log.d("ConfigurationManager", "   - esPremium después: ${_esPremium.value}")
        Log.d("ConfigurationManager", "   - STACK TRACE:")
        Thread.currentThread().stackTrace.take(8).forEach { frame ->
            Log.d("ConfigurationManager", "     at ${frame.className}.${frame.methodName}(${frame.fileName}:${frame.lineNumber})")
        }
    }

    fun forceUpdateDisplayName(newDisplayName: String) {
        Log.d(TAG, "🔧 forceUpdateDisplayName: ${_displayName.value} → $newDisplayName")
        _displayName.value = newDisplayName
        Log.d(TAG, "🔧 forceUpdateDisplayName DESPUÉS: ${_displayName.value}")
    }


    // ========== MÉTODOS SET ==========
    fun setIdioma(idioma: String) {
        _idioma.value = idioma
    }

    fun setFuente(fuente: String) {
        _fuente.value = fuente
    }

    fun setTemaOscuro(temaOscuro: Boolean) {
        _temaOscuro.value = temaOscuro
    }

    fun setModoOscuro(modoOscuro: Boolean) {
        _temaOscuro.value = modoOscuro
    }

    fun setUsuarioEmail(email: String?) {
        _usuarioEmail.value = email
    }

    fun setUsuarioLogueado(userId: String?) {
        _usuarioLogueado.value = userId ?: "usuario_default"
    }

    fun setUsuarioId(userId: String?) {
        setUsuarioLogueado(userId)
    }

    fun setMoneda(moneda: String) {
        _moneda.value = moneda
    }

    fun setIsPremium(isPremium: Boolean) {
        setEsPremiumProtected(isPremium, "updateUserConfiguration")
        _versionApp.value = if (isPremium) 1 else 0
    }

    fun setVersionApp(versionApp: Int) {
        _versionApp.value = versionApp
        setEsPremiumProtected(versionApp == 1, "setVersionApp")
    }

    // ========== RESET ==========
//    fun resetToDefaults() {
//        _idioma.value = "es"
//        _fuente.value = "Montserrat"
//        _temaOscuro.value = false
//        _moneda.value = "€ Euro"
//        _usuarioLogueado.value = "usuario_default"
//        _usuarioEmail.value = null
//        _displayName.value = null
//        _esPremium.value = false
//        _versionApp.value = 0
//        _isAuthenticated.value = false
//    }
    fun resetToDefaults() {
        // 🔍 LOG TEMPORAL
        Log.d("ConfigurationManager", "🔄 resetToDefaults() llamado!")
        Log.d("ConfigurationManager", "   - esPremium antes: ${_esPremium.value}")
        Log.d("ConfigurationManager", "   - lastSuccessfulPremiumState: $lastSuccessfulPremiumState")
        Log.d("ConfigurationManager", "   - STACK TRACE:")
        Thread.currentThread().stackTrace.take(8).forEach { frame ->
            Log.d("ConfigurationManager", "     at ${frame.className}.${frame.methodName}(${frame.fileName}:${frame.lineNumber})")
        }

        // 🛡️ PROTECCIÓN: No resetear si hay un estado premium válido y el usuario está autenticado
        if (lastSuccessfulPremiumState == true && _isAuthenticated.value) {
            Log.w("ConfigurationManager", "🚫 EVITANDO RESET - Usuario premium autenticado detectado")
            return
        }

        // Resetear todos los valores a defaults
        _idioma.value = "es"
        _fuente.value = "Montserrat"
        _temaOscuro.value = false
        _moneda.value = "€ Euro"
        _usuarioLogueado.value = "usuario_default"
        _usuarioEmail.value = null
        _displayName.value = null
        setEsPremiumProtected(false, "resetToDefaults")
        _versionApp.value = 0
        _isAuthenticated.value = false

        // Limpiar estado de protección solo en logout real
        lastSuccessfulPremiumState = null

        Log.d("ConfigurationManager", "   - ✅ Reset completado")

        Log.d("ConfigurationManager", "   - esPremium después: ${_esPremium.value}")
        Log.d("ConfigurationManager", "   - ✅ Reset completado")
    }

    // ========== VERIFICACIONES ==========
    fun isUsuarioLogueado(): Boolean {
        return _usuarioLogueado.value != "usuario_default"
    }

    fun isPremium(): Boolean = _esPremium.value
    fun isFree(): Boolean = !_esPremium.value
}

// app/src/main/java/es/nuskysoftware/marketsales/utils/ConnectivityObserver.kt
package es.nuskysoftware.marketsales.utils

import android.content.Context
import android.net.*
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow

/**
 * Observa el estado de la red (online/offline) usando ConnectivityManager
 * y expone un StateFlow<Boolean>.
 */
class ConnectivityObserver(context: Context) {

    private val cm = context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager
    private val _isConnected = MutableStateFlow(isCurrentlyConnected())
    val isConnected: StateFlow<Boolean> = _isConnected

    init {
        val request = NetworkRequest.Builder()
            .addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET)
            .build()

        cm.registerNetworkCallback(request, object : ConnectivityManager.NetworkCallback() {
            override fun onAvailable(network: Network) {
                _isConnected.value = true
            }
            override fun onLost(network: Network) {
                _isConnected.value = isCurrentlyConnected()
            }
        })
    }

    private fun isCurrentlyConnected(): Boolean {
        val n = cm.activeNetwork ?: return false
        val caps = cm.getNetworkCapabilities(n) ?: return false
        return caps.hasCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET)
    }
}

// app/src/main/java/es/nuskysoftware/marketsales/utils/FooterMarca.kt
package es.nuskysoftware.marketsales.utils

import androidx.compose.foundation.layout.*
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

@Composable
fun FooterMarca() {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 16.dp)
            .windowInsetsPadding(WindowInsets.navigationBars) // ✅ Respeta barras de navegación
            .padding(vertical = 8.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = "© La Nusky Software",
            fontSize = 12.sp,
            fontWeight = FontWeight.Normal,
            color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f),
            textAlign = TextAlign.Center
        )
    }
}

package es.nuskysoftware.marketsales.utils

import android.content.Context
import com.google.android.gms.auth.api.signin.GoogleSignIn
import com.google.android.gms.auth.api.signin.GoogleSignInClient
import com.google.android.gms.auth.api.signin.GoogleSignInOptions
import es.nuskysoftware.marketsales.R

/**
 * Helper class para manejar Google Sign-In de forma centralizada
 * V8 - Google Auth implementation
 */
object GoogleAuthHelper {

    /**
     * Obtiene el cliente de Google Sign-In configurado
     */
    fun getGoogleSignInClient(context: Context): GoogleSignInClient {
        val webClientId = context.getString(R.string.web_client_id)

        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
            .requestIdToken(webClientId)
            .requestEmail()
            .requestProfile()
            .build()

        return GoogleSignIn.getClient(context, gso)
    }

    /**
     * Verifica si hay un usuario ya logueado con Google
     */
    fun getLastSignedInAccount(context: Context) = GoogleSignIn.getLastSignedInAccount(context)

    /**
     * Cierra sesión de Google
     */
    fun signOut(context: Context, onComplete: () -> Unit = {}) {
        getGoogleSignInClient(context).signOut().addOnCompleteListener {
            onComplete()
        }
    }

    /**
     * Revoca el acceso de Google
     */
    fun revokeAccess(context: Context, onComplete: () -> Unit = {}) {
        getGoogleSignInClient(context).revokeAccess().addOnCompleteListener {
            onComplete()
        }
    }
}

package es.nuskysoftware.marketsales.utils

import java.util.Locale

/**
 * Gestor de recursos de string que permite cambio dinámico de idioma
 * V11 - Con strings completos para PantallaPerfil + PantallaCategorias
 */
object StringResourceManager {

    fun getString(key: String, language: String = "es"): String {
        return when (language) {
            "en" -> getEnglishString(key)
            "es" -> getSpanishString(key)
            else -> getSpanishString(key)
        }
    }

    /**
     * Strings en español
     */
    private fun getSpanishString(key: String): String = when (key) {
        // Pantalla principal
        "app_name" -> "Market Sales"
        "mercadillos" -> "Mercadillos"
        "configuracion" -> "Configuración"
        "articulos" -> "Artículos"
        "categorias" -> "Categorías"
        "inventario" -> "Inventario"
        "listados" -> "Listados"
        "iniciar_sesion" -> "Iniciar Sesión"
        "cerrar_sesion" -> "Cerrar Sesión"
        "salir" -> "Salir"
        "perfil" -> "Perfil"

        // Configuración
        "informacion_cuenta" -> "Información de Cuenta"
        "cambiar_contrasena" -> "Cambiar Contraseña"
        "tema" -> "Tema"
        "fuente" -> "Fuente"
        "idioma" -> "Idioma"
        "moneda" -> "Moneda"
        "version_premium" -> "PREMIUM"
        "version_free" -> "FREE"
        "promocion_premium" -> "¡Actualiza a Premium!"
        "desbloquea_funciones" -> "Desbloquea todas las funciones"

        // Tema
        "tema_claro" -> "Claro"
        "tema_oscuro" -> "Oscuro"

        // Idiomas
        "espanol" -> "Español"
        "ingles" -> "English"

        // Fuentes
        "montserrat" -> "Montserrat"
        "poppins" -> "Poppins"
        "roboto" -> "Roboto"

        // Monedas
        "euro" -> "€ Euro"
        "dolar" -> "$ Dólar"
        "libra" -> "£ Libra"
        "yen" -> "¥ Yen"

        // ✅ PANTALLA PERFIL - STRINGS COMPLETOS
        "modificar_informacion" -> "Modifica tu información personal"
        "informacion_personal" -> "Información Personal"
        "nombre_completo" -> "Nombre completo"
        "correo_electronico" -> "Correo electrónico"
        "actualizar_informacion" -> "Actualizar Información"
        "actualizando" -> "Actualizando..."
        "cambiar_contrasena_titulo" -> "Cambiar Contraseña"
        "cambiar_contrasena_descripcion" -> "Deja en blanco si no quieres cambiar la contraseña"
        "contrasena_actual" -> "Contraseña actual"
        "nueva_contrasena" -> "Nueva contraseña"
        "confirmar_nueva_contrasena" -> "Confirmar nueva contraseña"
        "cambiando" -> "Cambiando..."
        "cambiar_contrasena_btn" -> "Cambiar Contraseña"

        // Validaciones
        "nombre_vacio" -> "El nombre no puede estar vacío"
        "email_invalido" -> "Email inválido"
        "contrasena_actual_requerida" -> "Contraseña actual requerida"
        "contrasena_minimo_caracteres" -> "La contraseña debe tener al menos 6 caracteres"
        "contrasenas_no_coinciden" -> "Las contraseñas no coinciden"

        // Mensajes de éxito/error
        "informacion_actualizada" -> "✅ Información actualizada correctamente"
        "contrasena_actualizada" -> "✅ Contraseña actualizada correctamente"
        "error_actualizar_informacion" -> "❌ Error al actualizar la información"
        "error_cambiar_contrasena" -> "❌ Error al cambiar la contraseña"
        "error_generico" -> "❌ Error: {0}"

        // Botones y acciones
        "volver" -> "Volver"
        "ocultar_contrasena" -> "Ocultar contraseña"
        "mostrar_contrasena" -> "Mostrar contraseña"

        // Diálogos
        "cambiar" -> "Cambiar"
        "cancelar" -> "Cancelar"
        "guardar" -> "Guardar"
        "aceptar" -> "Aceptar"
        "eliminar" -> "Eliminar"
        "contrasenas_no_coinciden_dialogo" -> "Las contraseñas no coinciden"
        "contrasena_muy_corta" -> "La contraseña debe tener al menos 6 caracteres"

        // Mensajes
        "funcion_premium" -> "Esta función está disponible solo en la versión Premium"
        "error_actualizacion" -> "Error al actualizar la configuración"

        // ✅ NUEVOS STRINGS PARA CATEGORÍAS
        "add_categoria" -> "Añadir categoría"
        "nueva_categoria" -> "Nueva Categoría"
        "editar_categoria" -> "Editar Categoría"
        "nombre" -> "Nombre"
        "seleccionar_color" -> "Seleccionar color"
        "pulsa_crear_primera_categoria" -> "Pulsa + para crear tu primera categoría"
        "eliminar_categoria" -> "Eliminar Categoría"
        "confirmar_eliminar_categoria" -> "¿Seguro que deseas eliminar \"{nombre}\"?"
        "categoria_creada" -> "Categoría creada exitosamente"
        "categoria_actualizada" -> "Categoría actualizada exitosamente"
        "categoria_eliminada" -> "Categoría eliminada exitosamente"
        "error_crear_categoria" -> "Error al crear la categoría"
        "error_actualizar_categoria" -> "Error al actualizar la categoría"
        "error_eliminar_categoria" -> "Error al eliminar la categoría"
        "nombre_categoria_requerido" -> "El nombre de la categoría es requerido"
        "nombre_categoria_muy_corto" -> "El nombre debe tener al menos 2 caracteres"
        "nombre_categoria_muy_largo" -> "El nombre no puede tener más de 50 caracteres"
        "categoria_nombre_duplicado" -> "Ya existe una categoría con ese nombre"
        "color_invalido" -> "Color inválido"
        "sincronizacion_completada" -> "Sincronización completada"
        "error_sincronizacion" -> "Error en sincronización"

        // Artículos - Pantalla principal
        "articulos" -> "Artículos"
        "add_articulo" -> "Añadir artículo"
        "nuevo_articulo" -> "Nuevo Artículo"
        "editar_articulo" -> "Editar Artículo"
        "pulsa_crear_primer_articulo" -> "Pulsa + para crear tu primer artículo"
        "eliminar_articulo" -> "Eliminar Artículo"
        "confirmar_eliminar_articulo" -> "¿Seguro que deseas eliminar \"{nombre}\"?"

        // Campos del formulario
        "precio_venta" -> "Precio de venta"
        "precio_coste" -> "Precio de coste"
        "stock" -> "Stock"
        "categoria" -> "Categoría"
        "seleccionar_categoria" -> "Seleccionar categoría"
        "sin_categorias" -> "No hay categorías disponibles"

        // Controles Premium
        "controlar_coste" -> "Controlar coste"
        "controlar_stock" -> "Controlar stock"
        "marcar_favorito" -> "Marcar como favorito"

        // Validaciones y mensajes
        "precio_venta_requerido" -> "El precio de venta es requerido"
        "precio_venta_invalido" -> "Precio de venta inválido"
        "categoria_requerida" -> "Selecciona una categoría"
        "articulo_creado" -> "Artículo creado exitosamente"
        "articulo_actualizado" -> "Artículo actualizado exitosamente"
        "articulo_eliminado" -> "Artículo eliminado exitosamente"
        "error_crear_articulo" -> "Error al crear el artículo"
        "error_actualizar_articulo" -> "Error al actualizar el artículo"
        "error_eliminar_articulo" -> "Error al eliminar el artículo"

        // Estados
        "sin_articulos" -> "No tienes artículos registrados"
        "cargando_articulos" -> "Cargando artículos..."
        "sincronizando_articulos" -> "Sincronizando artículos..."

        // Premium
        "solo_premium_stock" -> "Control de stock disponible solo en Premium"
        "solo_premium_coste" -> "Control de coste disponible solo en Premium"

        // ✅ AUTHENTICATION STRINGS PHASE 2
        "login_subtitle" -> "Inicia sesión en tu cuenta"
        "register_subtitle" -> "Crea tu nueva cuenta"
        "email" -> "Email"
        "email_placeholder" -> "tu@email.com"
        "email_invalid" -> "Email inválido"
        "password" -> "Contraseña"
        "password_placeholder" -> "Mínimo 6 caracteres"
        "password_invalid" -> "Mínimo 6 caracteres requeridos"
        "login_button" -> "Iniciar Sesión"
        "register_button" -> "Crear Cuenta"
        "loading" -> "Cargando..."
        "or" -> "o"
        "go_to_register" -> "¿No tienes cuenta? Crear cuenta"
        "go_to_login" -> "¿Ya tienes cuenta? Iniciar sesión"
        "register_benefits_title" -> "🚀 Beneficios de crear cuenta:"
        "benefit_1" -> "• Sincronización automática en todos tus dispositivos"
        "benefit_2" -> "• Configuración personalizada guardada"
        "benefit_3" -> "• Acceso a funciones Premium"
        "benefit_4" -> "• Respaldo seguro de tus datos"
        "welcome" -> "Bienvenido"
        "premium_user" -> "Usuario Premium"
        "free_user" -> "Usuario Gratuito"
        "not_authenticated" -> "No autenticado"
        "home" -> "Inicio"
        "markets" -> "Mercadillos"
        "add_market" -> "Añadir Mercadillo"
        "premium_features" -> "Funciones Premium"
        "upgrade_premium" -> "Actualizar a Premium"
        "about" -> "Acerca de"
        "logout" -> "Cerrar Sesión"
        "exit_app" -> "Salir de la App"
        "logout_title" -> "Cerrar Sesión"
        "logout_message" -> "¿Estás seguro de que deseas cerrar sesión?"
        "logout_confirm" -> "Cerrar Sesión"
        "exit_title" -> "Salir de la App"
        "exit_message" -> "¿Estás seguro de que deseas salir de Market Sales?"
        "exit_confirm" -> "Salir"
        "available_markets" -> "Mercadillos Disponibles"
        "premium_required" -> "Requiere Premium para acceso completo"
        "see_details" -> "Ver detalles"
        "edit" -> "Editar"
        "menu" -> "Menú"
        "premium" -> "Premium"
        "free" -> "Gratuito"

        // 🚀 GOOGLE AUTH V8 - NUEVOS STRINGS AGREGADOS
        "google_signin" -> "Continuar con Google"
        "google_register" -> "Registrarse con Google"
        "google_auth_error" -> "Error de autenticación con Google"
        "google_token_error" -> "Error obteniendo token de Google"
        "auth_provider_google" -> "Google"
        "auth_provider_email" -> "Email"
        "google_signin_success" -> "Autenticación con Google exitosa"
        "google_signin_failed" -> "Falló la autenticación con Google"

        else -> key
    }

    /**
     * Strings en inglés
     */
    private fun getEnglishString(key: String): String = when (key) {
        // Main screen
        "app_name" -> "Market Sales"
        "mercadillos" -> "Markets"
        "configuracion" -> "Settings"
        "articulos" -> "Articles"
        "categorias" -> "Categories"
        "inventario" -> "Inventory"
        "listados" -> "Reports"
        "iniciar_sesion" -> "Login"
        "cerrar_sesion" -> "Logout"
        "salir" -> "Exit"
        "perfil" -> "Profile"

        // Settings
        "informacion_cuenta" -> "Account Information"
        "cambiar_contrasena" -> "Change Password"
        "tema" -> "Theme"
        "fuente" -> "Font"
        "idioma" -> "Language"
        "moneda" -> "Currency"
        "version_premium" -> "PREMIUM"
        "version_free" -> "FREE"
        "promocion_premium" -> "Upgrade to Premium!"
        "desbloquea_funciones" -> "Unlock all features"

        // Theme
        "tema_claro" -> "Light"
        "tema_oscuro" -> "Dark"

        // Languages
        "espanol" -> "Español"
        "ingles" -> "English"

        // Fonts
        "montserrat" -> "Montserrat"
        "poppins" -> "Poppins"
        "roboto" -> "Roboto"

        // Currencies
        "euro" -> "€ Euro"
        "dolar" -> "$ Dollar"
        "libra" -> "£ Pound"
        "yen" -> "¥ Yen"

        // ✅ PROFILE SCREEN - COMPLETE STRINGS
        "modificar_informacion" -> "Change your personal information"
        "informacion_personal" -> "Personal Information"
        "nombre_completo" -> "Full name"
        "correo_electronico" -> "Email address"
        "actualizar_informacion" -> "Update Information"
        "actualizando" -> "Updating..."
        "cambiar_contrasena_titulo" -> "Change Password"
        "cambiar_contrasena_descripcion" -> "Leave blank if you don't want to change the password"
        "contrasena_actual" -> "Current password"
        "nueva_contrasena" -> "New password"
        "confirmar_nueva_contrasena" -> "Confirm new password"
        "cambiando" -> "Changing..."
        "cambiar_contrasena_btn" -> "Change Password"

        // Validations
        "nombre_vacio" -> "Name cannot be empty"
        "email_invalido" -> "Invalid email"
        "contrasena_actual_requerida" -> "Current password required"
        "contrasena_minimo_caracteres" -> "Password must be at least 6 characters"
        "contrasenas_no_coinciden" -> "Passwords don't match"

        // Success/Error messages
        "informacion_actualizada" -> "✅ Information updated successfully"
        "contrasena_actualizada" -> "✅ Password updated successfully"
        "error_actualizar_informacion" -> "❌ Error updating information"
        "error_cambiar_contrasena" -> "❌ Error changing password"
        "error_generico" -> "❌ Error: {0}"

        // Buttons and actions
        "volver" -> "Back"
        "ocultar_contrasena" -> "Hide password"
        "mostrar_contrasena" -> "Show password"

        // Dialogs
        "cambiar" -> "Change"
        "cancelar" -> "Cancel"
        "guardar" -> "Save"
        "aceptar" -> "Accept"
        "eliminar" -> "Delete"
        "contrasenas_no_coinciden_dialogo" -> "Passwords don't match"
        "contrasena_muy_corta" -> "Password must be at least 6 characters"

        // Messages
        "funcion_premium" -> "This feature is available only in Premium version"
        "error_actualizacion" -> "Error updating configuration"

        // ✅ NEW STRINGS FOR CATEGORIES
        "add_categoria" -> "Add category"
        "nueva_categoria" -> "New Category"
        "editar_categoria" -> "Edit Category"
        "nombre" -> "Name"
        "seleccionar_color" -> "Select color"
        "pulsa_crear_primera_categoria" -> "Tap + to create your first category"
        "eliminar_categoria" -> "Delete Category"
        "confirmar_eliminar_categoria" -> "Are you sure you want to delete \"{nombre}\"?"
        "categoria_creada" -> "Category created successfully"
        "categoria_actualizada" -> "Category updated successfully"
        "categoria_eliminada" -> "Category deleted successfully"
        "error_crear_categoria" -> "Error creating category"
        "error_actualizar_categoria" -> "Error updating category"
        "error_eliminar_categoria" -> "Error deleting category"
        "nombre_categoria_requerido" -> "Category name is required"
        "nombre_categoria_muy_corto" -> "Name must be at least 2 characters"
        "nombre_categoria_muy_largo" -> "Name cannot be more than 50 characters"
        "categoria_nombre_duplicado" -> "A category with that name already exists"
        "color_invalido" -> "Invalid color"
        "sincronizacion_completada" -> "Synchronization completed"
        "error_sincronizacion" -> "Synchronization error"

        // Articles - Main screen
        "articulos" -> "Articles"
        "add_articulo" -> "Add article"
        "nuevo_articulo" -> "New Article"
        "editar_articulo" -> "Edit Article"
        "pulsa_crear_primer_articulo" -> "Tap + to create your first article"
        "eliminar_articulo" -> "Delete Article"
        "confirmar_eliminar_articulo" -> "Are you sure you want to delete \"{nombre}\"?"

        // Form fields
        "precio_venta" -> "Sale price"
        "precio_coste" -> "Cost price"
        "stock" -> "Stock"
        "categoria" -> "Category"
        "seleccionar_categoria" -> "Select category"
        "sin_categorias" -> "No categories available"

        // Premium controls
        "controlar_coste" -> "Control cost"
        "controlar_stock" -> "Control stock"
        "marcar_favorito" -> "Mark as favorite"

        // Validations and messages
        "precio_venta_requerido" -> "Sale price is required"
        "precio_venta_invalido" -> "Invalid sale price"
        "categoria_requerida" -> "Select a category"
        "articulo_creado" -> "Article created successfully"
        "articulo_actualizado" -> "Article updated successfully"
        "articulo_eliminado" -> "Article deleted successfully"
        "error_crear_articulo" -> "Error creating article"
        "error_actualizar_articulo" -> "Error updating article"
        "error_eliminar_articulo" -> "Error deleting article"

        // States
        "sin_articulos" -> "You have no registered articles"
        "cargando_articulos" -> "Loading articles..."
        "sincronizando_articulos" -> "Syncing articles..."

        // Premium
        "solo_premium_stock" -> "Stock control available only in Premium"
        "solo_premium_coste" -> "Cost control available only in Premium"


        // ✅ AUTHENTICATION STRINGS PHASE 2
        "login_subtitle" -> "Sign in to your account"
        "register_subtitle" -> "Create your new account"
        "email" -> "Email"
        "email_placeholder" -> "your@email.com"
        "email_invalid" -> "Invalid email"
        "password" -> "Password"
        "password_placeholder" -> "Minimum 6 characters"
        "password_invalid" -> "Minimum 6 characters required"
        "login_button" -> "Sign In"
        "register_button" -> "Create Account"
        "loading" -> "Loading..."
        "or" -> "or"
        "go_to_register" -> "Don't have an account? Create account"
        "go_to_login" -> "Already have an account? Sign in"
        "register_benefits_title" -> "🚀 Account benefits:"
        "benefit_1" -> "• Automatic sync across all your devices"
        "benefit_2" -> "• Personalized configuration saved"
        "benefit_3" -> "• Access to Premium features"
        "benefit_4" -> "• Secure data backup"
        "welcome" -> "Welcome"
        "premium_user" -> "Premium User"
        "free_user" -> "Free User"
        "not_authenticated" -> "Not authenticated"
        "home" -> "Home"
        "markets" -> "Markets"
        "add_market" -> "Add Market"
        "premium_features" -> "Premium Features"
        "upgrade_premium" -> "Upgrade to Premium"
        "about" -> "About"
        "logout" -> "Sign Out"
        "exit_app" -> "Exit App"
        "logout_title" -> "Sign Out"
        "logout_message" -> "Are you sure you want to sign out?"
        "logout_confirm" -> "Sign Out"
        "exit_title" -> "Exit App"
        "exit_message" -> "Are you sure you want to exit Market Sales?"
        "exit_confirm" -> "Exit"
        "available_markets" -> "Available Markets"
        "premium_required" -> "Requires Premium for full access"
        "see_details" -> "See details"
        "edit" -> "Edit"
        "menu" -> "Menu"
        "premium" -> "Premium"
        "free" -> "Free"

        // 🚀 GOOGLE AUTH V8 - NEW ENGLISH STRINGS
        "google_signin" -> "Continue with Google"
        "google_register" -> "Sign up with Google"
        "google_auth_error" -> "Google authentication error"
        "google_token_error" -> "Error getting Google token"
        "auth_provider_google" -> "Google"
        "auth_provider_email" -> "Email"
        "google_signin_success" -> "Google authentication successful"
        "google_signin_failed" -> "Google authentication failed"

        else -> key
    }
}

